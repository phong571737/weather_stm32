
weather_forecast.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 ExtFlashSection 00000000  90000000  90000000  0001123c  2**0
                  CONTENTS
  1 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a37c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00005748  0800a490  0800a490  0000b490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800fbd8  0800fbd8  0001123c  2**0
                  CONTENTS
  5 .ARM          00000008  0800fbd8  0800fbd8  00010bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800fbe0  0800fbe0  0001123c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800fbe0  0800fbe0  00010be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800fbe4  0800fbe4  00010be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000023c  20000000  0800fbe8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001a40  20000240  0800fe24  00011240  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001c80  0800fe24  00011c80  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0001123c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011701  00000000  00000000  00011265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d2a  00000000  00000000  00022966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00025690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da3  00000000  00000000  00026820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000417c  00000000  00000000  000275c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c46  00000000  00000000  0002b73f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000911a6  00000000  00000000  00041385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d252b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ad4  00000000  00000000  000d2570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  000d8044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000240 	.word	0x20000240
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a474 	.word	0x0800a474

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000244 	.word	0x20000244
 800014c:	0800a474 	.word	0x0800a474

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2uiz>:
 8000fe4:	0042      	lsls	r2, r0, #1
 8000fe6:	d20e      	bcs.n	8001006 <__aeabi_f2uiz+0x22>
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fec:	d30b      	bcc.n	8001006 <__aeabi_f2uiz+0x22>
 8000fee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d409      	bmi.n	800100c <__aeabi_f2uiz+0x28>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2uiz+0x32>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d102      	bne.n	800101c <__aeabi_f2uiz+0x38>
 8001016:	f04f 30ff 	mov.w	r0, #4294967295
 800101a:	4770      	bx	lr
 800101c:	f04f 0000 	mov.w	r0, #0
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <ILI9341_Select>:
#include "ILI9341_STM32_Driver.h"

volatile uint16_t LCD_HEIGHT = HEIGHT;
volatile uint16_t LCD_WIDTH	 = WIDTH;

static void ILI9341_Select() {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800102e:	4802      	ldr	r0, [pc, #8]	@ (8001038 <ILI9341_Select+0x14>)
 8001030:	f003 fd4f 	bl	8004ad2 <HAL_GPIO_WritePin>
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40010c00 	.word	0x40010c00

0800103c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001046:	4802      	ldr	r0, [pc, #8]	@ (8001050 <ILI9341_Unselect+0x14>)
 8001048:	f003 fd43 	bl	8004ad2 <HAL_GPIO_WritePin>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40010c00 	.word	0x40010c00

08001054 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	2102      	movs	r1, #2
 800105c:	4806      	ldr	r0, [pc, #24]	@ (8001078 <ILI9341_Reset+0x24>)
 800105e:	f003 fd38 	bl	8004ad2 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001062:	2005      	movs	r0, #5
 8001064:	f003 f854 	bl	8004110 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2102      	movs	r1, #2
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <ILI9341_Reset+0x24>)
 800106e:	f003 fd30 	bl	8004ad2 <HAL_GPIO_WritePin>
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40010c00 	.word	0x40010c00

0800107c <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	4807      	ldr	r0, [pc, #28]	@ (80010a8 <ILI9341_WriteCommand+0x2c>)
 800108c:	f003 fd21 	bl	8004ad2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001090:	1df9      	adds	r1, r7, #7
 8001092:	f04f 33ff 	mov.w	r3, #4294967295
 8001096:	2201      	movs	r2, #1
 8001098:	4804      	ldr	r0, [pc, #16]	@ (80010ac <ILI9341_WriteCommand+0x30>)
 800109a:	f004 fec3 	bl	8005e24 <HAL_SPI_Transmit>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40010c00 	.word	0x40010c00
 80010ac:	20000d5c 	.word	0x20000d5c

080010b0 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	2101      	movs	r1, #1
 80010be:	4811      	ldr	r0, [pc, #68]	@ (8001104 <ILI9341_WriteData+0x54>)
 80010c0:	f003 fd07 	bl	8004ad2 <HAL_GPIO_WritePin>
    //ILI9341_Select();

     //split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 80010c4:	e015      	b.n	80010f2 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80010cc:	bf28      	it	cs
 80010ce:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80010d2:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&hspi1, (uint8_t*)buff, chunk_size, HAL_MAX_DELAY);
 80010d4:	89fa      	ldrh	r2, [r7, #14]
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	480a      	ldr	r0, [pc, #40]	@ (8001108 <ILI9341_WriteData+0x58>)
 80010de:	f004 fea1 	bl	8005e24 <HAL_SPI_Transmit>
        buff += chunk_size;
 80010e2:	89fb      	ldrh	r3, [r7, #14]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80010ea:	89fb      	ldrh	r3, [r7, #14]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1e6      	bne.n	80010c6 <ILI9341_WriteData+0x16>
    }
    //ILI9341_Unselect();
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40010c00 	.word	0x40010c00
 8001108:	20000d5c 	.word	0x20000d5c

0800110c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	4604      	mov	r4, r0
 8001114:	4608      	mov	r0, r1
 8001116:	4611      	mov	r1, r2
 8001118:	461a      	mov	r2, r3
 800111a:	4623      	mov	r3, r4
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	4603      	mov	r3, r0
 8001120:	80bb      	strh	r3, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	807b      	strh	r3, [r7, #2]
 8001126:	4613      	mov	r3, r2
 8001128:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 800112a:	202a      	movs	r0, #42	@ 0x2a
 800112c:	f7ff ffa6 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	b29b      	uxth	r3, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	733b      	strb	r3, [r7, #12]
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	737b      	strb	r3, [r7, #13]
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	b29b      	uxth	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	73bb      	strb	r3, [r7, #14]
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2104      	movs	r1, #4
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ffaa 	bl	80010b0 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 800115c:	202b      	movs	r0, #43	@ 0x2b
 800115e:	f7ff ff8d 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8001162:	88bb      	ldrh	r3, [r7, #4]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	b29b      	uxth	r3, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	723b      	strb	r3, [r7, #8]
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	727b      	strb	r3, [r7, #9]
 8001172:	883b      	ldrh	r3, [r7, #0]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	b29b      	uxth	r3, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	72bb      	strb	r3, [r7, #10]
 800117c:	883b      	ldrh	r3, [r7, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	2104      	movs	r1, #4
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff91 	bl	80010b0 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800118e:	202c      	movs	r0, #44	@ 0x2c
 8001190:	f7ff ff74 	bl	800107c <ILI9341_WriteCommand>
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}

0800119c <ILI9341_Init>:

void ILI9341_Init() {
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b09b      	sub	sp, #108	@ 0x6c
 80011a0:	af00      	add	r7, sp, #0
    ILI9341_Select();
 80011a2:	f7ff ff3f 	bl	8001024 <ILI9341_Select>
    ILI9341_Reset();
 80011a6:	f7ff ff55 	bl	8001054 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff ff66 	bl	800107c <ILI9341_WriteCommand>
    HAL_Delay(1000);
 80011b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011b4:	f002 ffac 	bl	8004110 <HAL_Delay>

    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 80011b8:	20cb      	movs	r0, #203	@ 0xcb
 80011ba:	f7ff ff5f 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 80011be:	4a87      	ldr	r2, [pc, #540]	@ (80013dc <ILI9341_Init+0x240>)
 80011c0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c8:	6018      	str	r0, [r3, #0]
 80011ca:	3304      	adds	r3, #4
 80011cc:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80011ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011d2:	2105      	movs	r1, #5
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff6b 	bl	80010b0 <ILI9341_WriteData>
    }


    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80011da:	20cf      	movs	r0, #207	@ 0xcf
 80011dc:	f7ff ff4e 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80011e0:	4a7f      	ldr	r2, [pc, #508]	@ (80013e0 <ILI9341_Init+0x244>)
 80011e2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	4611      	mov	r1, r2
 80011ea:	8019      	strh	r1, [r3, #0]
 80011ec:	3302      	adds	r3, #2
 80011ee:	0c12      	lsrs	r2, r2, #16
 80011f0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80011f2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80011f6:	2103      	movs	r1, #3
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff59 	bl	80010b0 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80011fe:	20e8      	movs	r0, #232	@ 0xe8
 8001200:	f7ff ff3c 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8001204:	4a77      	ldr	r2, [pc, #476]	@ (80013e4 <ILI9341_Init+0x248>)
 8001206:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	4611      	mov	r1, r2
 800120e:	8019      	strh	r1, [r3, #0]
 8001210:	3302      	adds	r3, #2
 8001212:	0c12      	lsrs	r2, r2, #16
 8001214:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001216:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800121a:	2103      	movs	r1, #3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff47 	bl	80010b0 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8001222:	20ea      	movs	r0, #234	@ 0xea
 8001224:	f7ff ff2a 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8001228:	2300      	movs	r3, #0
 800122a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 800122e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001232:	2102      	movs	r1, #2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff3b 	bl	80010b0 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 800123a:	20ed      	movs	r0, #237	@ 0xed
 800123c:	f7ff ff1e 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8001240:	4b69      	ldr	r3, [pc, #420]	@ (80013e8 <ILI9341_Init+0x24c>)
 8001242:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8001244:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001248:	2104      	movs	r1, #4
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff30 	bl	80010b0 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8001250:	20f7      	movs	r0, #247	@ 0xf7
 8001252:	f7ff ff13 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8001256:	2320      	movs	r3, #32
 8001258:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 800125c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001260:	2101      	movs	r1, #1
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff24 	bl	80010b0 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8001268:	20c0      	movs	r0, #192	@ 0xc0
 800126a:	f7ff ff07 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800126e:	2323      	movs	r3, #35	@ 0x23
 8001270:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8001274:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001278:	2101      	movs	r1, #1
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff18 	bl	80010b0 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8001280:	20c1      	movs	r0, #193	@ 0xc1
 8001282:	f7ff fefb 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8001286:	2310      	movs	r3, #16
 8001288:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 800128c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001290:	2101      	movs	r1, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff0c 	bl	80010b0 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8001298:	20c5      	movs	r0, #197	@ 0xc5
 800129a:	f7ff feef 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800129e:	f642 033e 	movw	r3, #10302	@ 0x283e
 80012a2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 80012a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012aa:	2102      	movs	r1, #2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff feff 	bl	80010b0 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 80012b2:	20c7      	movs	r0, #199	@ 0xc7
 80012b4:	f7ff fee2 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 80012b8:	2386      	movs	r3, #134	@ 0x86
 80012ba:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 80012be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80012c2:	2101      	movs	r1, #1
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fef3 	bl	80010b0 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80012ca:	2036      	movs	r0, #54	@ 0x36
 80012cc:	f7ff fed6 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80012d0:	2348      	movs	r3, #72	@ 0x48
 80012d2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 80012d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012da:	2101      	movs	r1, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fee7 	bl	80010b0 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80012e2:	203a      	movs	r0, #58	@ 0x3a
 80012e4:	f7ff feca 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80012e8:	2355      	movs	r3, #85	@ 0x55
 80012ea:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 80012ee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012f2:	2101      	movs	r1, #1
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fedb 	bl	80010b0 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80012fa:	20b1      	movs	r0, #177	@ 0xb1
 80012fc:	f7ff febe 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8001300:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001304:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 8001306:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800130a:	2102      	movs	r1, #2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fecf 	bl	80010b0 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8001312:	20b6      	movs	r0, #182	@ 0xb6
 8001314:	f7ff feb2 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8001318:	4a34      	ldr	r2, [pc, #208]	@ (80013ec <ILI9341_Init+0x250>)
 800131a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	4611      	mov	r1, r2
 8001322:	8019      	strh	r1, [r3, #0]
 8001324:	3302      	adds	r3, #2
 8001326:	0c12      	lsrs	r2, r2, #16
 8001328:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800132a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800132e:	2103      	movs	r1, #3
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff febd 	bl	80010b0 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8001336:	20f2      	movs	r0, #242	@ 0xf2
 8001338:	f7ff fea0 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 800133c:	2300      	movs	r3, #0
 800133e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 8001342:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001346:	2101      	movs	r1, #1
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff feb1 	bl	80010b0 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 800134e:	2026      	movs	r0, #38	@ 0x26
 8001350:	f7ff fe94 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8001354:	2301      	movs	r3, #1
 8001356:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 800135a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135e:	2101      	movs	r1, #1
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fea5 	bl	80010b0 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8001366:	20e0      	movs	r0, #224	@ 0xe0
 8001368:	f7ff fe88 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 800136c:	4b20      	ldr	r3, [pc, #128]	@ (80013f0 <ILI9341_Init+0x254>)
 800136e:	f107 0414 	add.w	r4, r7, #20
 8001372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001374:	c407      	stmia	r4!, {r0, r1, r2}
 8001376:	8023      	strh	r3, [r4, #0]
 8001378:	3402      	adds	r4, #2
 800137a:	0c1b      	lsrs	r3, r3, #16
 800137c:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	210f      	movs	r1, #15
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fe93 	bl	80010b0 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 800138a:	20e1      	movs	r0, #225	@ 0xe1
 800138c:	f7ff fe76 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8001390:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <ILI9341_Init+0x258>)
 8001392:	1d3c      	adds	r4, r7, #4
 8001394:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001396:	c407      	stmia	r4!, {r0, r1, r2}
 8001398:	8023      	strh	r3, [r4, #0]
 800139a:	3402      	adds	r4, #2
 800139c:	0c1b      	lsrs	r3, r3, #16
 800139e:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	210f      	movs	r1, #15
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe83 	bl	80010b0 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 80013aa:	2011      	movs	r0, #17
 80013ac:	f7ff fe66 	bl	800107c <ILI9341_WriteCommand>
    HAL_Delay(120);
 80013b0:	2078      	movs	r0, #120	@ 0x78
 80013b2:	f002 fead 	bl	8004110 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 80013b6:	2029      	movs	r0, #41	@ 0x29
 80013b8:	f7ff fe60 	bl	800107c <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 80013bc:	2036      	movs	r0, #54	@ 0x36
 80013be:	f7ff fe5d 	bl	800107c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 80013c2:	2348      	movs	r3, #72	@ 0x48
 80013c4:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 80013c6:	463b      	mov	r3, r7
 80013c8:	2101      	movs	r1, #1
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff fe70 	bl	80010b0 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80013d0:	f7ff fe34 	bl	800103c <ILI9341_Unselect>
}
 80013d4:	bf00      	nop
 80013d6:	376c      	adds	r7, #108	@ 0x6c
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	0800a490 	.word	0x0800a490
 80013e0:	0800a498 	.word	0x0800a498
 80013e4:	0800a49c 	.word	0x0800a49c
 80013e8:	81120364 	.word	0x81120364
 80013ec:	0800a4a0 	.word	0x0800a4a0
 80013f0:	0800a4a4 	.word	0x0800a4a4
 80013f4:	0800a4b4 	.word	0x0800a4b4

080013f8 <ILI9341_WriteChar>:
    ILI9341_WriteData(data, sizeof(data));

    ILI9341_Unselect();
}

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80013f8:	b082      	sub	sp, #8
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b088      	sub	sp, #32
 80013fe:	af00      	add	r7, sp, #0
 8001400:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
 8001406:	460b      	mov	r3, r1
 8001408:	80bb      	strh	r3, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800140e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001412:	461a      	mov	r2, r3
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4413      	add	r3, r2
 8001418:	b29b      	uxth	r3, r3
 800141a:	3b01      	subs	r3, #1
 800141c:	b29a      	uxth	r2, r3
 800141e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001422:	4619      	mov	r1, r3
 8001424:	88bb      	ldrh	r3, [r7, #4]
 8001426:	440b      	add	r3, r1
 8001428:	b29b      	uxth	r3, r3
 800142a:	3b01      	subs	r3, #1
 800142c:	b29b      	uxth	r3, r3
 800142e:	88b9      	ldrh	r1, [r7, #4]
 8001430:	88f8      	ldrh	r0, [r7, #6]
 8001432:	f7ff fe6b 	bl	800110c <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	e041      	b.n	80014c0 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 800143c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	3b20      	subs	r3, #32
 8001442:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001446:	fb01 f303 	mul.w	r3, r1, r3
 800144a:	4619      	mov	r1, r3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	440b      	add	r3, r1
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	e027      	b.n	80014ae <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00e      	beq.n	800148c <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800146e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	b29b      	uxth	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	743b      	strb	r3, [r7, #16]
 8001478:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800147a:	b2db      	uxtb	r3, r3
 800147c:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	2102      	movs	r1, #2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fe13 	bl	80010b0 <ILI9341_WriteData>
 800148a:	e00d      	b.n	80014a8 <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800148c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	b29b      	uxth	r3, r3
 8001492:	b2db      	uxtb	r3, r3
 8001494:	733b      	strb	r3, [r7, #12]
 8001496:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001498:	b2db      	uxtb	r3, r3
 800149a:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2102      	movs	r1, #2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fe04 	bl	80010b0 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	3301      	adds	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014b2:	461a      	mov	r2, r3
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d3d1      	bcc.n	800145e <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3301      	adds	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
 80014c0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80014c4:	461a      	mov	r2, r3
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d3b7      	bcc.n	800143c <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3720      	adds	r7, #32
 80014d2:	46bd      	mov	sp, r7
 80014d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014d8:	b002      	add	sp, #8
 80014da:	4770      	bx	lr

080014dc <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80014dc:	b082      	sub	sp, #8
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af04      	add	r7, sp, #16
 80014e4:	603a      	str	r2, [r7, #0]
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	4603      	mov	r3, r0
 80014ea:	80fb      	strh	r3, [r7, #6]
 80014ec:	460b      	mov	r3, r1
 80014ee:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 80014f0:	f7ff fd98 	bl	8001024 <ILI9341_Select>

    while(*str) {
 80014f4:	e033      	b.n	800155e <ILI9341_WriteString+0x82>
        if(x + font.width >= LCD_WIDTH) {
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	7d3a      	ldrb	r2, [r7, #20]
 80014fa:	4413      	add	r3, r2
 80014fc:	4a1f      	ldr	r2, [pc, #124]	@ (800157c <ILI9341_WriteString+0xa0>)
 80014fe:	8812      	ldrh	r2, [r2, #0]
 8001500:	b292      	uxth	r2, r2
 8001502:	4293      	cmp	r3, r2
 8001504:	db16      	blt.n	8001534 <ILI9341_WriteString+0x58>
            x = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800150a:	7d7b      	ldrb	r3, [r7, #21]
 800150c:	461a      	mov	r2, r3
 800150e:	88bb      	ldrh	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= LCD_HEIGHT) {
 8001514:	88bb      	ldrh	r3, [r7, #4]
 8001516:	7d7a      	ldrb	r2, [r7, #21]
 8001518:	4413      	add	r3, r2
 800151a:	4a19      	ldr	r2, [pc, #100]	@ (8001580 <ILI9341_WriteString+0xa4>)
 800151c:	8812      	ldrh	r2, [r2, #0]
 800151e:	b292      	uxth	r2, r2
 8001520:	4293      	cmp	r3, r2
 8001522:	da21      	bge.n	8001568 <ILI9341_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b20      	cmp	r3, #32
 800152a:	d103      	bne.n	8001534 <ILI9341_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	603b      	str	r3, [r7, #0]
                continue;
 8001532:	e014      	b.n	800155e <ILI9341_WriteString+0x82>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	88b9      	ldrh	r1, [r7, #4]
 800153a:	88f8      	ldrh	r0, [r7, #6]
 800153c:	8c3b      	ldrh	r3, [r7, #32]
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	8bbb      	ldrh	r3, [r7, #28]
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f7ff ff55 	bl	80013f8 <ILI9341_WriteChar>
        x += font.width;
 800154e:	7d3b      	ldrb	r3, [r7, #20]
 8001550:	461a      	mov	r2, r3
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	4413      	add	r3, r2
 8001556:	80fb      	strh	r3, [r7, #6]
        str++;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	603b      	str	r3, [r7, #0]
    while(*str) {
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1c7      	bne.n	80014f6 <ILI9341_WriteString+0x1a>
 8001566:	e000      	b.n	800156a <ILI9341_WriteString+0x8e>
                break;
 8001568:	bf00      	nop
    }

    ILI9341_Unselect();
 800156a:	f7ff fd67 	bl	800103c <ILI9341_Unselect>
}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001578:	b002      	add	sp, #8
 800157a:	4770      	bx	lr
 800157c:	20000002 	.word	0x20000002
 8001580:	20000000 	.word	0x20000000

08001584 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	4604      	mov	r4, r0
 800158c:	4608      	mov	r0, r1
 800158e:	4611      	mov	r1, r2
 8001590:	461a      	mov	r2, r3
 8001592:	4623      	mov	r3, r4
 8001594:	80fb      	strh	r3, [r7, #6]
 8001596:	4603      	mov	r3, r0
 8001598:	80bb      	strh	r3, [r7, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	807b      	strh	r3, [r7, #2]
 800159e:	4613      	mov	r3, r2
 80015a0:	803b      	strh	r3, [r7, #0]
    // clipping
    /*if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
    if((x + w - 1) >= LCD_WIDTH) w = LCD_WIDTH - x;
    if((y + h - 1) >= LCD_HEIGHT) h = LCD_HEIGHT - y;*/

    ILI9341_Select();
 80015a2:	f7ff fd3f 	bl	8001024 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80015a6:	88fa      	ldrh	r2, [r7, #6]
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	4413      	add	r3, r2
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	3b01      	subs	r3, #1
 80015b0:	b29c      	uxth	r4, r3
 80015b2:	88ba      	ldrh	r2, [r7, #4]
 80015b4:	883b      	ldrh	r3, [r7, #0]
 80015b6:	4413      	add	r3, r2
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3b01      	subs	r3, #1
 80015bc:	b29b      	uxth	r3, r3
 80015be:	88b9      	ldrh	r1, [r7, #4]
 80015c0:	88f8      	ldrh	r0, [r7, #6]
 80015c2:	4622      	mov	r2, r4
 80015c4:	f7ff fda2 	bl	800110c <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80015c8:	8c3b      	ldrh	r3, [r7, #32]
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	733b      	strb	r3, [r7, #12]
 80015d2:	8c3b      	ldrh	r3, [r7, #32]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	2101      	movs	r1, #1
 80015dc:	4811      	ldr	r0, [pc, #68]	@ (8001624 <ILI9341_FillRectangle+0xa0>)
 80015de:	f003 fa78 	bl	8004ad2 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80015e2:	883b      	ldrh	r3, [r7, #0]
 80015e4:	80bb      	strh	r3, [r7, #4]
 80015e6:	e013      	b.n	8001610 <ILI9341_FillRectangle+0x8c>
        for(x = w; x > 0; x--) {
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	80fb      	strh	r3, [r7, #6]
 80015ec:	e00a      	b.n	8001604 <ILI9341_FillRectangle+0x80>
            HAL_SPI_Transmit(&hspi1, data, sizeof(data), HAL_MAX_DELAY);
 80015ee:	f107 010c 	add.w	r1, r7, #12
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	2202      	movs	r2, #2
 80015f8:	480b      	ldr	r0, [pc, #44]	@ (8001628 <ILI9341_FillRectangle+0xa4>)
 80015fa:	f004 fc13 	bl	8005e24 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	3b01      	subs	r3, #1
 8001602:	80fb      	strh	r3, [r7, #6]
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f1      	bne.n	80015ee <ILI9341_FillRectangle+0x6a>
    for(y = h; y > 0; y--) {
 800160a:	88bb      	ldrh	r3, [r7, #4]
 800160c:	3b01      	subs	r3, #1
 800160e:	80bb      	strh	r3, [r7, #4]
 8001610:	88bb      	ldrh	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e8      	bne.n	80015e8 <ILI9341_FillRectangle+0x64>
        }
    }

    ILI9341_Unselect();
 8001616:	f7ff fd11 	bl	800103c <ILI9341_Unselect>
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bd90      	pop	{r4, r7, pc}
 8001622:	bf00      	nop
 8001624:	40010c00 	.word	0x40010c00
 8001628:	20000d5c 	.word	0x20000d5c

0800162c <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af02      	add	r7, sp, #8
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, LCD_WIDTH, LCD_HEIGHT, color);
 8001636:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <ILI9341_FillScreen+0x2c>)
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b07      	ldr	r3, [pc, #28]	@ (800165c <ILI9341_FillScreen+0x30>)
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	b299      	uxth	r1, r3
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	460b      	mov	r3, r1
 8001648:	2100      	movs	r1, #0
 800164a:	2000      	movs	r0, #0
 800164c:	f7ff ff9a 	bl	8001584 <ILI9341_FillRectangle>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000002 	.word	0x20000002
 800165c:	20000000 	.word	0x20000000

08001660 <ILI9341_DrawImage>:

void ILI9341_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4604      	mov	r4, r0
 8001668:	4608      	mov	r0, r1
 800166a:	4611      	mov	r1, r2
 800166c:	461a      	mov	r2, r3
 800166e:	4623      	mov	r3, r4
 8001670:	80fb      	strh	r3, [r7, #6]
 8001672:	4603      	mov	r3, r0
 8001674:	80bb      	strh	r3, [r7, #4]
 8001676:	460b      	mov	r3, r1
 8001678:	807b      	strh	r3, [r7, #2]
 800167a:	4613      	mov	r3, r2
 800167c:	803b      	strh	r3, [r7, #0]
    if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 800167e:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <ILI9341_DrawImage+0xa4>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	429a      	cmp	r2, r3
 8001688:	d234      	bcs.n	80016f4 <ILI9341_DrawImage+0x94>
 800168a:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <ILI9341_DrawImage+0xa8>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	b29b      	uxth	r3, r3
 8001690:	88ba      	ldrh	r2, [r7, #4]
 8001692:	429a      	cmp	r2, r3
 8001694:	d22e      	bcs.n	80016f4 <ILI9341_DrawImage+0x94>
    if((x + w - 1) >= LCD_WIDTH) return;
 8001696:	88fa      	ldrh	r2, [r7, #6]
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	4413      	add	r3, r2
 800169c:	4a19      	ldr	r2, [pc, #100]	@ (8001704 <ILI9341_DrawImage+0xa4>)
 800169e:	8812      	ldrh	r2, [r2, #0]
 80016a0:	b292      	uxth	r2, r2
 80016a2:	4293      	cmp	r3, r2
 80016a4:	dc28      	bgt.n	80016f8 <ILI9341_DrawImage+0x98>
    if((y + h - 1) >= LCD_HEIGHT) return;
 80016a6:	88ba      	ldrh	r2, [r7, #4]
 80016a8:	883b      	ldrh	r3, [r7, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	4a16      	ldr	r2, [pc, #88]	@ (8001708 <ILI9341_DrawImage+0xa8>)
 80016ae:	8812      	ldrh	r2, [r2, #0]
 80016b0:	b292      	uxth	r2, r2
 80016b2:	4293      	cmp	r3, r2
 80016b4:	dc22      	bgt.n	80016fc <ILI9341_DrawImage+0x9c>

    ILI9341_Select();
 80016b6:	f7ff fcb5 	bl	8001024 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80016ba:	88fa      	ldrh	r2, [r7, #6]
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	4413      	add	r3, r2
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b29c      	uxth	r4, r3
 80016c6:	88ba      	ldrh	r2, [r7, #4]
 80016c8:	883b      	ldrh	r3, [r7, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	88b9      	ldrh	r1, [r7, #4]
 80016d4:	88f8      	ldrh	r0, [r7, #6]
 80016d6:	4622      	mov	r2, r4
 80016d8:	f7ff fd18 	bl	800110c <ILI9341_SetAddressWindow>
    ILI9341_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 80016dc:	887b      	ldrh	r3, [r7, #2]
 80016de:	883a      	ldrh	r2, [r7, #0]
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4619      	mov	r1, r3
 80016e8:	69b8      	ldr	r0, [r7, #24]
 80016ea:	f7ff fce1 	bl	80010b0 <ILI9341_WriteData>
    ILI9341_Unselect();
 80016ee:	f7ff fca5 	bl	800103c <ILI9341_Unselect>
 80016f2:	e004      	b.n	80016fe <ILI9341_DrawImage+0x9e>
    if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 80016f4:	bf00      	nop
 80016f6:	e002      	b.n	80016fe <ILI9341_DrawImage+0x9e>
    if((x + w - 1) >= LCD_WIDTH) return;
 80016f8:	bf00      	nop
 80016fa:	e000      	b.n	80016fe <ILI9341_DrawImage+0x9e>
    if((y + h - 1) >= LCD_HEIGHT) return;
 80016fc:	bf00      	nop
}
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	20000002 	.word	0x20000002
 8001708:	20000000 	.word	0x20000000

0800170c <microDelay>:
int state = 0; // 0: màn hình chính, 1: Hue, 2: Ho Chi Minh, 3: Nhiet do va do am
int isTitleDisplayed = 0; // Cờ để kiểm tra nếu Title đã hiển thị
int canReceive = 0;

void microDelay(uint16_t t)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001716:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <microDelay+0x2c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2200      	movs	r2, #0
 800171c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < t);
 800171e:	bf00      	nop
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <microDelay+0x2c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	429a      	cmp	r2, r3
 800172a:	d3f9      	bcc.n	8001720 <microDelay+0x14>
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20000e50 	.word	0x20000e50

0800173c <DHT11_Start>:

uint8_t DHT11_Start()
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
	GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8001752:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001756:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001758:	2301      	movs	r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2302      	movs	r3, #2
 800175e:	613b      	str	r3, [r7, #16]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate);
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	4619      	mov	r1, r3
 8001768:	482c      	ldr	r0, [pc, #176]	@ (800181c <DHT11_Start+0xe0>)
 800176a:	f003 f817 	bl	800479c <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0); // yeu cau data tu sensor
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001774:	4829      	ldr	r0, [pc, #164]	@ (800181c <DHT11_Start+0xe0>)
 8001776:	f003 f9ac 	bl	8004ad2 <HAL_GPIO_WritePin>
	HAL_Delay(20);// cho 20ms
 800177a:	2014      	movs	r0, #20
 800177c:	f002 fcc8 	bl	8004110 <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1); // micro gui tin hieu yeu cau
 8001780:	2201      	movs	r2, #1
 8001782:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001786:	4825      	ldr	r0, [pc, #148]	@ (800181c <DHT11_Start+0xe0>)
 8001788:	f003 f9a3 	bl	8004ad2 <HAL_GPIO_WritePin>
	microDelay(30); // delay 30us
 800178c:	201e      	movs	r0, #30
 800178e:	f7ff ffbd 	bl	800170c <microDelay>
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001796:	2301      	movs	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	4619      	mov	r1, r3
 800179e:	481f      	ldr	r0, [pc, #124]	@ (800181c <DHT11_Start+0xe0>)
 80017a0:	f002 fffc 	bl	800479c <HAL_GPIO_Init>
	microDelay(40);
 80017a4:	2028      	movs	r0, #40	@ 0x28
 80017a6:	f7ff ffb1 	bl	800170c <microDelay>
	if(!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 80017aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017ae:	481b      	ldr	r0, [pc, #108]	@ (800181c <DHT11_Start+0xe0>)
 80017b0:	f003 f978 	bl	8004aa4 <HAL_GPIO_ReadPin>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10c      	bne.n	80017d4 <DHT11_Start+0x98>
	{
		microDelay(80);
 80017ba:	2050      	movs	r0, #80	@ 0x50
 80017bc:	f7ff ffa6 	bl	800170c <microDelay>
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 80017c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017c4:	4815      	ldr	r0, [pc, #84]	@ (800181c <DHT11_Start+0xe0>)
 80017c6:	f003 f96d 	bl	8004aa4 <HAL_GPIO_ReadPin>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <DHT11_Start+0x98>
			Response = 1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	75fb      	strb	r3, [r7, #23]
	}
	pMilis = HAL_GetTick();
 80017d4:	f002 fc92 	bl	80040fc <HAL_GetTick>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a11      	ldr	r2, [pc, #68]	@ (8001820 <DHT11_Start+0xe4>)
 80017dc:	6013      	str	r3, [r2, #0]
	cMillis = HAL_GetTick();
 80017de:	f002 fc8d 	bl	80040fc <HAL_GetTick>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001824 <DHT11_Start+0xe8>)
 80017e6:	6013      	str	r3, [r2, #0]
	while((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMilis + 2 > cMillis)
 80017e8:	e004      	b.n	80017f4 <DHT11_Start+0xb8>
	{
		cMillis = HAL_GetTick();
 80017ea:	f002 fc87 	bl	80040fc <HAL_GetTick>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001824 <DHT11_Start+0xe8>)
 80017f2:	6013      	str	r3, [r2, #0]
	while((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMilis + 2 > cMillis)
 80017f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017f8:	4808      	ldr	r0, [pc, #32]	@ (800181c <DHT11_Start+0xe0>)
 80017fa:	f003 f953 	bl	8004aa4 <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d006      	beq.n	8001812 <DHT11_Start+0xd6>
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <DHT11_Start+0xe4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	1c9a      	adds	r2, r3, #2
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <DHT11_Start+0xe8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d8eb      	bhi.n	80017ea <DHT11_Start+0xae>
	}
	return Response;
 8001812:	7dfb      	ldrb	r3, [r7, #23]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40010c00 	.word	0x40010c00
 8001820:	20000ee8 	.word	0x20000ee8
 8001824:	20000eec 	.word	0x20000eec

08001828 <DHT11_Read>:

uint8_t DHT11_Read()
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
	uint8_t a, b = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	71bb      	strb	r3, [r7, #6]
	for(a = 0;a < 8 ;a++)
 8001832:	2300      	movs	r3, #0
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	e066      	b.n	8001906 <DHT11_Read+0xde>
	{
		pMilis = HAL_GetTick();
 8001838:	f002 fc60 	bl	80040fc <HAL_GetTick>
 800183c:	4603      	mov	r3, r0
 800183e:	4a36      	ldr	r2, [pc, #216]	@ (8001918 <DHT11_Read+0xf0>)
 8001840:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 8001842:	f002 fc5b 	bl	80040fc <HAL_GetTick>
 8001846:	4603      	mov	r3, r0
 8001848:	4a34      	ldr	r2, [pc, #208]	@ (800191c <DHT11_Read+0xf4>)
 800184a:	6013      	str	r3, [r2, #0]
		while(!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && (pMilis + 2 > cMillis))
 800184c:	e004      	b.n	8001858 <DHT11_Read+0x30>
		{
			//wait pin high
			cMillis = HAL_GetTick();
 800184e:	f002 fc55 	bl	80040fc <HAL_GetTick>
 8001852:	4603      	mov	r3, r0
 8001854:	4a31      	ldr	r2, [pc, #196]	@ (800191c <DHT11_Read+0xf4>)
 8001856:	6013      	str	r3, [r2, #0]
		while(!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && (pMilis + 2 > cMillis))
 8001858:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800185c:	4830      	ldr	r0, [pc, #192]	@ (8001920 <DHT11_Read+0xf8>)
 800185e:	f003 f921 	bl	8004aa4 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d106      	bne.n	8001876 <DHT11_Read+0x4e>
 8001868:	4b2b      	ldr	r3, [pc, #172]	@ (8001918 <DHT11_Read+0xf0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	1c9a      	adds	r2, r3, #2
 800186e:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <DHT11_Read+0xf4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d8eb      	bhi.n	800184e <DHT11_Read+0x26>
		}
		microDelay(40);
 8001876:	2028      	movs	r0, #40	@ 0x28
 8001878:	f7ff ff48 	bl	800170c <microDelay>
		if(!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))
 800187c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001880:	4827      	ldr	r0, [pc, #156]	@ (8001920 <DHT11_Read+0xf8>)
 8001882:	f003 f90f 	bl	8004aa4 <HAL_GPIO_ReadPin>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10e      	bne.n	80018aa <DHT11_Read+0x82>
			b &= ~(1 << (7 - a));
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2201      	movs	r2, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	b25b      	sxtb	r3, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	b25a      	sxtb	r2, r3
 800189e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80018a2:	4013      	ands	r3, r2
 80018a4:	b25b      	sxtb	r3, r3
 80018a6:	71bb      	strb	r3, [r7, #6]
 80018a8:	e00b      	b.n	80018c2 <DHT11_Read+0x9a>
		else
			b |= (1 << (7 - a));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f1c3 0307 	rsb	r3, r3, #7
 80018b0:	2201      	movs	r2, #1
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	b25a      	sxtb	r2, r3
 80018b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80018bc:	4313      	orrs	r3, r2
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	71bb      	strb	r3, [r7, #6]
		pMilis = HAL_GetTick();
 80018c2:	f002 fc1b 	bl	80040fc <HAL_GetTick>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4a13      	ldr	r2, [pc, #76]	@ (8001918 <DHT11_Read+0xf0>)
 80018ca:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 80018cc:	f002 fc16 	bl	80040fc <HAL_GetTick>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4a12      	ldr	r2, [pc, #72]	@ (800191c <DHT11_Read+0xf4>)
 80018d4:	6013      	str	r3, [r2, #0]
		while((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMilis + 2 > cMillis)
 80018d6:	e004      	b.n	80018e2 <DHT11_Read+0xba>
		{
			//wait pin high
			cMillis = HAL_GetTick();
 80018d8:	f002 fc10 	bl	80040fc <HAL_GetTick>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a0f      	ldr	r2, [pc, #60]	@ (800191c <DHT11_Read+0xf4>)
 80018e0:	6013      	str	r3, [r2, #0]
		while((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMilis + 2 > cMillis)
 80018e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018e6:	480e      	ldr	r0, [pc, #56]	@ (8001920 <DHT11_Read+0xf8>)
 80018e8:	f003 f8dc 	bl	8004aa4 <HAL_GPIO_ReadPin>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <DHT11_Read+0xd8>
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <DHT11_Read+0xf0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	1c9a      	adds	r2, r3, #2
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <DHT11_Read+0xf4>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d8eb      	bhi.n	80018d8 <DHT11_Read+0xb0>
	for(a = 0;a < 8 ;a++)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	3301      	adds	r3, #1
 8001904:	71fb      	strb	r3, [r7, #7]
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b07      	cmp	r3, #7
 800190a:	d995      	bls.n	8001838 <DHT11_Read+0x10>
		}
	}
	return b;
 800190c:	79bb      	ldrb	r3, [r7, #6]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000ee8 	.word	0x20000ee8
 800191c:	20000eec 	.word	0x20000eec
 8001920:	40010c00 	.word	0x40010c00

08001924 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	if(data_receive.flagReceive == 1){
 800192c:	4b07      	ldr	r3, [pc, #28]	@ (800194c <HAL_UART_RxCpltCallback+0x28>)
 800192e:	f8d3 3ae0 	ldr.w	r3, [r3, #2784]	@ 0xae0
 8001932:	2b01      	cmp	r3, #1
 8001934:	d105      	bne.n	8001942 <HAL_UART_RxCpltCallback+0x1e>
		HAL_UART_Receive_IT(&huart1,(uint8_t *)&data_receive, sizeof(data_receive));
 8001936:	f640 22e8 	movw	r2, #2792	@ 0xae8
 800193a:	4904      	ldr	r1, [pc, #16]	@ (800194c <HAL_UART_RxCpltCallback+0x28>)
 800193c:	4804      	ldr	r0, [pc, #16]	@ (8001950 <HAL_UART_RxCpltCallback+0x2c>)
 800193e:	f005 f9b6 	bl	8006cae <HAL_UART_Receive_IT>
	}
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000260 	.word	0x20000260
 8001950:	20000e98 	.word	0x20000e98

08001954 <Title>:

void Title(){ // display main screen
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af04      	add	r7, sp, #16
	ILI9341_FillRectangle(19, 258, 200, 32, ILI9341_COLOR565(254, 197, 230));
 800195a:	f64f 633c 	movw	r3, #65084	@ 0xfe3c
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2320      	movs	r3, #32
 8001962:	22c8      	movs	r2, #200	@ 0xc8
 8001964:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001968:	2013      	movs	r0, #19
 800196a:	f7ff fe0b 	bl	8001584 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(19, 203, 200, 32, ILI9341_COLOR565(254, 197, 230));
 800196e:	f64f 633c 	movw	r3, #65084	@ 0xfe3c
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2320      	movs	r3, #32
 8001976:	22c8      	movs	r2, #200	@ 0xc8
 8001978:	21cb      	movs	r1, #203	@ 0xcb
 800197a:	2013      	movs	r0, #19
 800197c:	f7ff fe02 	bl	8001584 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(19, 148, 200, 32, ILI9341_COLOR565(254, 197, 230));
 8001980:	f64f 633c 	movw	r3, #65084	@ 0xfe3c
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2320      	movs	r3, #32
 8001988:	22c8      	movs	r2, #200	@ 0xc8
 800198a:	2194      	movs	r1, #148	@ 0x94
 800198c:	2013      	movs	r0, #19
 800198e:	f7ff fdf9 	bl	8001584 <ILI9341_FillRectangle>
	ILI9341_FillRectangle(19, 93, 200, 32, ILI9341_COLOR565(254, 197, 230));
 8001992:	f64f 633c 	movw	r3, #65084	@ 0xfe3c
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2320      	movs	r3, #32
 800199a:	22c8      	movs	r2, #200	@ 0xc8
 800199c:	215d      	movs	r1, #93	@ 0x5d
 800199e:	2013      	movs	r0, #19
 80019a0:	f7ff fdf0 	bl	8001584 <ILI9341_FillRectangle>
	ILI9341_WriteString(112, 10, "Du bao", Font_11x18, ILI9341_COLOR565(102, 255, 255), ILI9341_COLOR565(255, 204, 0));
 80019a4:	4b30      	ldr	r3, [pc, #192]	@ (8001a68 <Title+0x114>)
 80019a6:	f64f 6260 	movw	r2, #65120	@ 0xfe60
 80019aa:	9202      	str	r2, [sp, #8]
 80019ac:	f246 72ff 	movw	r2, #26623	@ 0x67ff
 80019b0:	9201      	str	r2, [sp, #4]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	9200      	str	r2, [sp, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a2c      	ldr	r2, [pc, #176]	@ (8001a6c <Title+0x118>)
 80019ba:	210a      	movs	r1, #10
 80019bc:	2070      	movs	r0, #112	@ 0x70
 80019be:	f7ff fd8d 	bl	80014dc <ILI9341_WriteString>
	ILI9341_WriteString(48, 38, "thoi tiet", Font_16x26, ILI9341_COLOR565(102, 255, 255), ILI9341_COLOR565(255, 204, 0));
 80019c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a70 <Title+0x11c>)
 80019c4:	f64f 6260 	movw	r2, #65120	@ 0xfe60
 80019c8:	9202      	str	r2, [sp, #8]
 80019ca:	f246 72ff 	movw	r2, #26623	@ 0x67ff
 80019ce:	9201      	str	r2, [sp, #4]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	9200      	str	r2, [sp, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a27      	ldr	r2, [pc, #156]	@ (8001a74 <Title+0x120>)
 80019d8:	2126      	movs	r1, #38	@ 0x26
 80019da:	2030      	movs	r0, #48	@ 0x30
 80019dc:	f7ff fd7e 	bl	80014dc <ILI9341_WriteString>
	ILI9341_WriteString(60, 100, "Ho Chi Minh", Font_11x18, ILI9341_COLOR565(58, 12, 163), ILI9341_COLOR565(254, 197, 230));
 80019e0:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <Title+0x114>)
 80019e2:	f64f 623c 	movw	r2, #65084	@ 0xfe3c
 80019e6:	9202      	str	r2, [sp, #8]
 80019e8:	f643 0274 	movw	r2, #14452	@ 0x3874
 80019ec:	9201      	str	r2, [sp, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	9200      	str	r2, [sp, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a20      	ldr	r2, [pc, #128]	@ (8001a78 <Title+0x124>)
 80019f6:	2164      	movs	r1, #100	@ 0x64
 80019f8:	203c      	movs	r0, #60	@ 0x3c
 80019fa:	f7ff fd6f 	bl	80014dc <ILI9341_WriteString>
	ILI9341_WriteString(82, 155, "Ha Noi", Font_11x18, ILI9341_COLOR565(58, 12, 163), ILI9341_COLOR565(254, 197, 230));
 80019fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <Title+0x114>)
 8001a00:	f64f 623c 	movw	r2, #65084	@ 0xfe3c
 8001a04:	9202      	str	r2, [sp, #8]
 8001a06:	f643 0274 	movw	r2, #14452	@ 0x3874
 8001a0a:	9201      	str	r2, [sp, #4]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	9200      	str	r2, [sp, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a1a      	ldr	r2, [pc, #104]	@ (8001a7c <Title+0x128>)
 8001a14:	219b      	movs	r1, #155	@ 0x9b
 8001a16:	2052      	movs	r0, #82	@ 0x52
 8001a18:	f7ff fd60 	bl	80014dc <ILI9341_WriteString>
	ILI9341_WriteString(96, 210, "Hue", Font_11x18, ILI9341_COLOR565(58, 12, 163), ILI9341_COLOR565(254, 197, 230));
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <Title+0x114>)
 8001a1e:	f64f 623c 	movw	r2, #65084	@ 0xfe3c
 8001a22:	9202      	str	r2, [sp, #8]
 8001a24:	f643 0274 	movw	r2, #14452	@ 0x3874
 8001a28:	9201      	str	r2, [sp, #4]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	9200      	str	r2, [sp, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a13      	ldr	r2, [pc, #76]	@ (8001a80 <Title+0x12c>)
 8001a32:	21d2      	movs	r1, #210	@ 0xd2
 8001a34:	2060      	movs	r0, #96	@ 0x60
 8001a36:	f7ff fd51 	bl	80014dc <ILI9341_WriteString>
	ILI9341_WriteString(25, 265, "Nhiet do va do am", Font_11x18, ILI9341_COLOR565(58, 12, 163), ILI9341_COLOR565(254, 197, 230));
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <Title+0x114>)
 8001a3c:	f64f 623c 	movw	r2, #65084	@ 0xfe3c
 8001a40:	9202      	str	r2, [sp, #8]
 8001a42:	f643 0274 	movw	r2, #14452	@ 0x3874
 8001a46:	9201      	str	r2, [sp, #4]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	9200      	str	r2, [sp, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a84 <Title+0x130>)
 8001a50:	f240 1109 	movw	r1, #265	@ 0x109
 8001a54:	2019      	movs	r0, #25
 8001a56:	f7ff fd41 	bl	80014dc <ILI9341_WriteString>
	isTitleDisplayed = 1;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <Title+0x134>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
	//}
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000000c 	.word	0x2000000c
 8001a6c:	0800a4e4 	.word	0x0800a4e4
 8001a70:	20000014 	.word	0x20000014
 8001a74:	0800a4ec 	.word	0x0800a4ec
 8001a78:	0800a4f8 	.word	0x0800a4f8
 8001a7c:	0800a504 	.word	0x0800a504
 8001a80:	0800a50c 	.word	0x0800a50c
 8001a84:	0800a510 	.word	0x0800a510
 8001a88:	20001b28 	.word	0x20001b28

08001a8c <DisplayWeather>:

void DisplayWeather(){
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b097      	sub	sp, #92	@ 0x5c
 8001a90:	af04      	add	r7, sp, #16
	uint16_t x, y;
	if(ILI9341_TouchGetCoordinates(&x, &y) && state == 0)
 8001a92:	1d3a      	adds	r2, r7, #4
 8001a94:	1dbb      	adds	r3, r7, #6
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 f9fd 	bl	8003e98 <ILI9341_TouchGetCoordinates>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f001 847a 	beq.w	800339a <DisplayWeather+0x190e>
 8001aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c50 <DisplayWeather+0x1c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f041 8475 	bne.w	800339a <DisplayWeather+0x190e>
	{
		if(x >= 188 && x <= 196 && y >= 9 && y <= 318)
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	2bbb      	cmp	r3, #187	@ 0xbb
 8001ab4:	f240 83a9 	bls.w	800220a <DisplayWeather+0x77e>
 8001ab8:	88fb      	ldrh	r3, [r7, #6]
 8001aba:	2bc4      	cmp	r3, #196	@ 0xc4
 8001abc:	f200 83a5 	bhi.w	800220a <DisplayWeather+0x77e>
 8001ac0:	88bb      	ldrh	r3, [r7, #4]
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	f240 83a1 	bls.w	800220a <DisplayWeather+0x77e>
 8001ac8:	88bb      	ldrh	r3, [r7, #4]
 8001aca:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001ace:	f200 839c 	bhi.w	800220a <DisplayWeather+0x77e>
		{
			Hue.flagSend = 1;
 8001ad2:	4b60      	ldr	r3, [pc, #384]	@ (8001c54 <DisplayWeather+0x1c8>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	60da      	str	r2, [r3, #12]
			HAL_UART_Transmit(&huart1, (uint8_t *)&Hue, sizeof(Hue),1000);
 8001ad8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001adc:	2210      	movs	r2, #16
 8001ade:	495d      	ldr	r1, [pc, #372]	@ (8001c54 <DisplayWeather+0x1c8>)
 8001ae0:	485d      	ldr	r0, [pc, #372]	@ (8001c58 <DisplayWeather+0x1cc>)
 8001ae2:	f005 f859 	bl	8006b98 <HAL_UART_Transmit>
			Hue.flagSend = 0;
 8001ae6:	4b5b      	ldr	r3, [pc, #364]	@ (8001c54 <DisplayWeather+0x1c8>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
			HAL_UART_Transmit(&huart1, (uint8_t *)&Hue, sizeof(HaNoi),1000);
 8001aec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001af0:	2210      	movs	r2, #16
 8001af2:	4958      	ldr	r1, [pc, #352]	@ (8001c54 <DisplayWeather+0x1c8>)
 8001af4:	4858      	ldr	r0, [pc, #352]	@ (8001c58 <DisplayWeather+0x1cc>)
 8001af6:	f005 f84f 	bl	8006b98 <HAL_UART_Transmit>
			while(data_receive.receiveNumber != 2 || data_receive.receiveNumber == 1 || data_receive.receiveNumber == 3){
 8001afa:	e026      	b.n	8001b4a <DisplayWeather+0xbe>
				Hue.flagSend = 1;
 8001afc:	4b55      	ldr	r3, [pc, #340]	@ (8001c54 <DisplayWeather+0x1c8>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	60da      	str	r2, [r3, #12]
				HAL_UART_Transmit(&huart1, (uint8_t *)&Hue, sizeof(Hue),1000);
 8001b02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b06:	2210      	movs	r2, #16
 8001b08:	4952      	ldr	r1, [pc, #328]	@ (8001c54 <DisplayWeather+0x1c8>)
 8001b0a:	4853      	ldr	r0, [pc, #332]	@ (8001c58 <DisplayWeather+0x1cc>)
 8001b0c:	f005 f844 	bl	8006b98 <HAL_UART_Transmit>
				Hue.flagSend = 0;
 8001b10:	4b50      	ldr	r3, [pc, #320]	@ (8001c54 <DisplayWeather+0x1c8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
				HAL_UART_Transmit(&huart1, (uint8_t *)&Hue, sizeof(HaNoi),1000);
 8001b16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b1a:	2210      	movs	r2, #16
 8001b1c:	494d      	ldr	r1, [pc, #308]	@ (8001c54 <DisplayWeather+0x1c8>)
 8001b1e:	484e      	ldr	r0, [pc, #312]	@ (8001c58 <DisplayWeather+0x1cc>)
 8001b20:	f005 f83a 	bl	8006b98 <HAL_UART_Transmit>
				ILI9341_FillScreen(ILI9341_COLOR565(0, 204, 204));
 8001b24:	f240 6079 	movw	r0, #1657	@ 0x679
 8001b28:	f7ff fd80 	bl	800162c <ILI9341_FillScreen>
				ILI9341_WriteString(40, 147, "Loading...", Font_16x26, ILI9341_COLOR565(102, 51, 255),ILI9341_COLOR565(0, 204, 204));
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c5c <DisplayWeather+0x1d0>)
 8001b2e:	f240 6279 	movw	r2, #1657	@ 0x679
 8001b32:	9202      	str	r2, [sp, #8]
 8001b34:	f246 129f 	movw	r2, #24991	@ 0x619f
 8001b38:	9201      	str	r2, [sp, #4]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	9200      	str	r2, [sp, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a47      	ldr	r2, [pc, #284]	@ (8001c60 <DisplayWeather+0x1d4>)
 8001b42:	2193      	movs	r1, #147	@ 0x93
 8001b44:	2028      	movs	r0, #40	@ 0x28
 8001b46:	f7ff fcc9 	bl	80014dc <ILI9341_WriteString>
			while(data_receive.receiveNumber != 2 || data_receive.receiveNumber == 1 || data_receive.receiveNumber == 3){
 8001b4a:	4b46      	ldr	r3, [pc, #280]	@ (8001c64 <DisplayWeather+0x1d8>)
 8001b4c:	f8d3 3adc 	ldr.w	r3, [r3, #2780]	@ 0xadc
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d1d3      	bne.n	8001afc <DisplayWeather+0x70>
 8001b54:	4b43      	ldr	r3, [pc, #268]	@ (8001c64 <DisplayWeather+0x1d8>)
 8001b56:	f8d3 3adc 	ldr.w	r3, [r3, #2780]	@ 0xadc
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d0ce      	beq.n	8001afc <DisplayWeather+0x70>
 8001b5e:	4b41      	ldr	r3, [pc, #260]	@ (8001c64 <DisplayWeather+0x1d8>)
 8001b60:	f8d3 3adc 	ldr.w	r3, [r3, #2780]	@ 0xadc
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d0c9      	beq.n	8001afc <DisplayWeather+0x70>
			}
			ILI9341_FillScreen(BLACK);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff fd5f 	bl	800162c <ILI9341_FillScreen>
			ILI9341_WriteString(103, 1, "Hue", Font_11x18, ILI9341_COLOR565(255, 51, 0), BLACK);
 8001b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c68 <DisplayWeather+0x1dc>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	9202      	str	r2, [sp, #8]
 8001b74:	f64f 1280 	movw	r2, #63872	@ 0xf980
 8001b78:	9201      	str	r2, [sp, #4]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	9200      	str	r2, [sp, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a3a      	ldr	r2, [pc, #232]	@ (8001c6c <DisplayWeather+0x1e0>)
 8001b82:	2101      	movs	r1, #1
 8001b84:	2067      	movs	r0, #103	@ 0x67
 8001b86:	f7ff fca9 	bl	80014dc <ILI9341_WriteString>
			ILI9341_DrawImage(206, 1, 24, 24, button_back_Image);
 8001b8a:	4b39      	ldr	r3, [pc, #228]	@ (8001c70 <DisplayWeather+0x1e4>)
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2318      	movs	r3, #24
 8001b90:	2218      	movs	r2, #24
 8001b92:	2101      	movs	r1, #1
 8001b94:	20ce      	movs	r0, #206	@ 0xce
 8001b96:	f7ff fd63 	bl	8001660 <ILI9341_DrawImage>

			ILI9341_FillRectangle(38, 80, 22, 22, ILI9341_COLOR565(64, 160, 240));
 8001b9a:	f244 531e 	movw	r3, #17694	@ 0x451e
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2316      	movs	r3, #22
 8001ba2:	2216      	movs	r2, #22
 8001ba4:	2150      	movs	r1, #80	@ 0x50
 8001ba6:	2026      	movs	r0, #38	@ 0x26
 8001ba8:	f7ff fcec 	bl	8001584 <ILI9341_FillRectangle>
			sprintf(rx_letter, "%s","<");
 8001bac:	4a31      	ldr	r2, [pc, #196]	@ (8001c74 <DisplayWeather+0x1e8>)
 8001bae:	4932      	ldr	r1, [pc, #200]	@ (8001c78 <DisplayWeather+0x1ec>)
 8001bb0:	4832      	ldr	r0, [pc, #200]	@ (8001c7c <DisplayWeather+0x1f0>)
 8001bb2:	f006 fb29 	bl	8008208 <siprintf>
			ILI9341_WriteString(43, 82, rx_letter, Font_11x18, WHITE, ILI9341_COLOR565(64, 160, 240));
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c68 <DisplayWeather+0x1dc>)
 8001bb8:	f244 521e 	movw	r2, #17694	@ 0x451e
 8001bbc:	9202      	str	r2, [sp, #8]
 8001bbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bc2:	9201      	str	r2, [sp, #4]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	9200      	str	r2, [sp, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a2c      	ldr	r2, [pc, #176]	@ (8001c7c <DisplayWeather+0x1f0>)
 8001bcc:	2152      	movs	r1, #82	@ 0x52
 8001bce:	202b      	movs	r0, #43	@ 0x2b
 8001bd0:	f7ff fc84 	bl	80014dc <ILI9341_WriteString>
			ILI9341_FillRectangle(187, 80, 22, 22, ILI9341_COLOR565(64, 160, 240));
 8001bd4:	f244 531e 	movw	r3, #17694	@ 0x451e
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2316      	movs	r3, #22
 8001bdc:	2216      	movs	r2, #22
 8001bde:	2150      	movs	r1, #80	@ 0x50
 8001be0:	20bb      	movs	r0, #187	@ 0xbb
 8001be2:	f7ff fccf 	bl	8001584 <ILI9341_FillRectangle>
			sprintf(rx_letter, "%s",">");
 8001be6:	4a26      	ldr	r2, [pc, #152]	@ (8001c80 <DisplayWeather+0x1f4>)
 8001be8:	4923      	ldr	r1, [pc, #140]	@ (8001c78 <DisplayWeather+0x1ec>)
 8001bea:	4824      	ldr	r0, [pc, #144]	@ (8001c7c <DisplayWeather+0x1f0>)
 8001bec:	f006 fb0c 	bl	8008208 <siprintf>
			ILI9341_WriteString(194, 82, rx_letter, Font_11x18, WHITE, ILI9341_COLOR565(64, 160, 240));
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <DisplayWeather+0x1dc>)
 8001bf2:	f244 521e 	movw	r2, #17694	@ 0x451e
 8001bf6:	9202      	str	r2, [sp, #8]
 8001bf8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bfc:	9201      	str	r2, [sp, #4]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	9200      	str	r2, [sp, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1d      	ldr	r2, [pc, #116]	@ (8001c7c <DisplayWeather+0x1f0>)
 8001c06:	2152      	movs	r1, #82	@ 0x52
 8001c08:	20c2      	movs	r0, #194	@ 0xc2
 8001c0a:	f7ff fc67 	bl	80014dc <ILI9341_WriteString>

			int count = data_receive.gioHT + 1;
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <DisplayWeather+0x1d8>)
 8001c10:	f8d3 3ad8 	ldr.w	r3, [r3, #2776]	@ 0xad8
 8001c14:	3301      	adds	r3, #1
 8001c16:	647b      	str	r3, [r7, #68]	@ 0x44

			int n = data_receive.gioHT;
 8001c18:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <DisplayWeather+0x1d8>)
 8001c1a:	f8d3 3ad8 	ldr.w	r3, [r3, #2776]	@ 0xad8
 8001c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			int timeCurrent;

			while(state != 1){
 8001c20:	e2ec      	b.n	80021fc <DisplayWeather+0x770>
				Hue.flagSend = 1;
 8001c22:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <DisplayWeather+0x1c8>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	60da      	str	r2, [r3, #12]
				HAL_UART_Transmit(&huart1, (uint8_t *)&Hue, sizeof(Hue),1000);
 8001c28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	4909      	ldr	r1, [pc, #36]	@ (8001c54 <DisplayWeather+0x1c8>)
 8001c30:	4809      	ldr	r0, [pc, #36]	@ (8001c58 <DisplayWeather+0x1cc>)
 8001c32:	f004 ffb1 	bl	8006b98 <HAL_UART_Transmit>
				Hue.flagSend = 0;
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <DisplayWeather+0x1c8>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
				HAL_UART_Transmit(&huart1, (uint8_t *)&Hue, sizeof(HaNoi),1000);
 8001c3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c40:	2210      	movs	r2, #16
 8001c42:	4904      	ldr	r1, [pc, #16]	@ (8001c54 <DisplayWeather+0x1c8>)
 8001c44:	4804      	ldr	r0, [pc, #16]	@ (8001c58 <DisplayWeather+0x1cc>)
 8001c46:	f004 ffa7 	bl	8006b98 <HAL_UART_Transmit>
				for(int t = 0;t < 7;t++){
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c4e:	e26c      	b.n	800212a <DisplayWeather+0x69e>
 8001c50:	20001b24 	.word	0x20001b24
 8001c54:	2000002c 	.word	0x2000002c
 8001c58:	20000e98 	.word	0x20000e98
 8001c5c:	20000014 	.word	0x20000014
 8001c60:	0800a524 	.word	0x0800a524
 8001c64:	20000260 	.word	0x20000260
 8001c68:	2000000c 	.word	0x2000000c
 8001c6c:	0800a50c 	.word	0x0800a50c
 8001c70:	0800f39c 	.word	0x0800f39c
 8001c74:	0800a530 	.word	0x0800a530
 8001c78:	0800a534 	.word	0x0800a534
 8001c7c:	20001320 	.word	0x20001320
 8001c80:	0800a538 	.word	0x0800a538
					int currentDay = (data_receive.numberDay[t] + i) % 7;
 8001c84:	4a94      	ldr	r2, [pc, #592]	@ (8001ed8 <DisplayWeather+0x44c>)
 8001c86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c88:	33a8      	adds	r3, #168	@ 0xa8
 8001c8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c8e:	4b93      	ldr	r3, [pc, #588]	@ (8001edc <DisplayWeather+0x450>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	441a      	add	r2, r3
 8001c94:	4b92      	ldr	r3, [pc, #584]	@ (8001ee0 <DisplayWeather+0x454>)
 8001c96:	fb83 1302 	smull	r1, r3, r3, r2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	1099      	asrs	r1, r3, #2
 8001c9e:	17d3      	asrs	r3, r2, #31
 8001ca0:	1ac9      	subs	r1, r1, r3
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	1a5b      	subs	r3, r3, r1
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	62bb      	str	r3, [r7, #40]	@ 0x28
						if(t == 0){
 8001cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f040 8134 	bne.w	8001f1c <DisplayWeather+0x490>
							sprintf(rx_Day, "%s",day_char[currentDay]);
 8001cb4:	4a8b      	ldr	r2, [pc, #556]	@ (8001ee4 <DisplayWeather+0x458>)
 8001cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	498a      	ldr	r1, [pc, #552]	@ (8001ee8 <DisplayWeather+0x45c>)
 8001cc0:	488a      	ldr	r0, [pc, #552]	@ (8001eec <DisplayWeather+0x460>)
 8001cc2:	f006 faa1 	bl	8008208 <siprintf>
							ILI9341_WriteString(5, 30, rx_Day, Font_11x18, WHITE, BLACK);
 8001cc6:	4b8a      	ldr	r3, [pc, #552]	@ (8001ef0 <DisplayWeather+0x464>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	9202      	str	r2, [sp, #8]
 8001ccc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cd0:	9201      	str	r2, [sp, #4]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	9200      	str	r2, [sp, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a84      	ldr	r2, [pc, #528]	@ (8001eec <DisplayWeather+0x460>)
 8001cda:	211e      	movs	r1, #30
 8001cdc:	2005      	movs	r0, #5
 8001cde:	f7ff fbfd 	bl	80014dc <ILI9341_WriteString>

							sprintf(rx_buffer, "%d",data_receive.tempCurrent[t][n]);
 8001ce2:	497d      	ldr	r1, [pc, #500]	@ (8001ed8 <DisplayWeather+0x44c>)
 8001ce4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	497e      	ldr	r1, [pc, #504]	@ (8001ef4 <DisplayWeather+0x468>)
 8001cfa:	487f      	ldr	r0, [pc, #508]	@ (8001ef8 <DisplayWeather+0x46c>)
 8001cfc:	f006 fa84 	bl	8008208 <siprintf>
							ILI9341_WriteString(60, 30, rx_buffer, Font_11x18, WHITE, BLACK);
 8001d00:	4b7b      	ldr	r3, [pc, #492]	@ (8001ef0 <DisplayWeather+0x464>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	9202      	str	r2, [sp, #8]
 8001d06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d0a:	9201      	str	r2, [sp, #4]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	9200      	str	r2, [sp, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a79      	ldr	r2, [pc, #484]	@ (8001ef8 <DisplayWeather+0x46c>)
 8001d14:	211e      	movs	r1, #30
 8001d16:	203c      	movs	r0, #60	@ 0x3c
 8001d18:	f7ff fbe0 	bl	80014dc <ILI9341_WriteString>
							sprintf(rx_letter, "%s","o");
 8001d1c:	4a77      	ldr	r2, [pc, #476]	@ (8001efc <DisplayWeather+0x470>)
 8001d1e:	4972      	ldr	r1, [pc, #456]	@ (8001ee8 <DisplayWeather+0x45c>)
 8001d20:	4877      	ldr	r0, [pc, #476]	@ (8001f00 <DisplayWeather+0x474>)
 8001d22:	f006 fa71 	bl	8008208 <siprintf>
							ILI9341_WriteString(83, 30, rx_letter, Font_7x10, WHITE, BLACK);
 8001d26:	4b77      	ldr	r3, [pc, #476]	@ (8001f04 <DisplayWeather+0x478>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	9202      	str	r2, [sp, #8]
 8001d2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d30:	9201      	str	r2, [sp, #4]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	9200      	str	r2, [sp, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a71      	ldr	r2, [pc, #452]	@ (8001f00 <DisplayWeather+0x474>)
 8001d3a:	211e      	movs	r1, #30
 8001d3c:	2053      	movs	r0, #83	@ 0x53
 8001d3e:	f7ff fbcd 	bl	80014dc <ILI9341_WriteString>

							sprintf(rx_buffer, "%d%%",data_receive.humidi[t][n]);
 8001d42:	4965      	ldr	r1, [pc, #404]	@ (8001ed8 <DisplayWeather+0x44c>)
 8001d44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d50:	4413      	add	r3, r2
 8001d52:	33bc      	adds	r3, #188	@ 0xbc
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	496a      	ldr	r1, [pc, #424]	@ (8001f08 <DisplayWeather+0x47c>)
 8001d5e:	4866      	ldr	r0, [pc, #408]	@ (8001ef8 <DisplayWeather+0x46c>)
 8001d60:	f006 fa52 	bl	8008208 <siprintf>
							ILI9341_WriteString(60, 55, rx_buffer, Font_11x18, WHITE, BLACK);
 8001d64:	4b62      	ldr	r3, [pc, #392]	@ (8001ef0 <DisplayWeather+0x464>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	9202      	str	r2, [sp, #8]
 8001d6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d6e:	9201      	str	r2, [sp, #4]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	9200      	str	r2, [sp, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a60      	ldr	r2, [pc, #384]	@ (8001ef8 <DisplayWeather+0x46c>)
 8001d78:	2137      	movs	r1, #55	@ 0x37
 8001d7a:	203c      	movs	r0, #60	@ 0x3c
 8001d7c:	f7ff fbae 	bl	80014dc <ILI9341_WriteString>
							if(data_receive.Rain[t][n] == 0){
 8001d80:	4955      	ldr	r1, [pc, #340]	@ (8001ed8 <DisplayWeather+0x44c>)
 8001d82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d8e:	4413      	add	r3, r2
 8001d90:	33b3      	adds	r3, #179	@ 0xb3
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	f7fe fe01 	bl	80009a8 <__aeabi_dcmpeq>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <DisplayWeather+0x332>
								ILI9341_DrawImage(134, 30, 32, 32, Image_Sun);
 8001dac:	4b57      	ldr	r3, [pc, #348]	@ (8001f0c <DisplayWeather+0x480>)
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2320      	movs	r3, #32
 8001db2:	2220      	movs	r2, #32
 8001db4:	211e      	movs	r1, #30
 8001db6:	2086      	movs	r0, #134	@ 0x86
 8001db8:	f7ff fc52 	bl	8001660 <ILI9341_DrawImage>
 8001dbc:	e007      	b.n	8001dce <DisplayWeather+0x342>
							}
							else{
								ILI9341_DrawImage(134, 30, 32, 32, Image_Rain);
 8001dbe:	4b54      	ldr	r3, [pc, #336]	@ (8001f10 <DisplayWeather+0x484>)
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	211e      	movs	r1, #30
 8001dc8:	2086      	movs	r0, #134	@ 0x86
 8001dca:	f7ff fc49 	bl	8001660 <ILI9341_DrawImage>
							}

							// next current hour
							if(count > 12)
 8001dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	dd1e      	ble.n	8001e12 <DisplayWeather+0x386>
							{
								ILI9341_FillRectangle(80, 82, 44, 18,BLACK);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2312      	movs	r3, #18
 8001dda:	222c      	movs	r2, #44	@ 0x2c
 8001ddc:	2152      	movs	r1, #82	@ 0x52
 8001dde:	2050      	movs	r0, #80	@ 0x50
 8001de0:	f7ff fbd0 	bl	8001584 <ILI9341_FillRectangle>
								timeCurrent = count - 12;
 8001de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001de6:	3b0c      	subs	r3, #12
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
								sprintf(rx_buffer, "%dPM", timeCurrent);
 8001dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dec:	4949      	ldr	r1, [pc, #292]	@ (8001f14 <DisplayWeather+0x488>)
 8001dee:	4842      	ldr	r0, [pc, #264]	@ (8001ef8 <DisplayWeather+0x46c>)
 8001df0:	f006 fa0a 	bl	8008208 <siprintf>
								ILI9341_WriteString(80, 82, rx_buffer, Font_11x18, ILI9341_COLOR565(248, 248, 255), BLACK);
 8001df4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef0 <DisplayWeather+0x464>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	9202      	str	r2, [sp, #8]
 8001dfa:	f64f 72df 	movw	r2, #65503	@ 0xffdf
 8001dfe:	9201      	str	r2, [sp, #4]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	9200      	str	r2, [sp, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a3c      	ldr	r2, [pc, #240]	@ (8001ef8 <DisplayWeather+0x46c>)
 8001e08:	2152      	movs	r1, #82	@ 0x52
 8001e0a:	2050      	movs	r0, #80	@ 0x50
 8001e0c:	f7ff fb66 	bl	80014dc <ILI9341_WriteString>
 8001e10:	e012      	b.n	8001e38 <DisplayWeather+0x3ac>
							}
							else{
								sprintf(rx_buffer, "%dAM", count);
 8001e12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e14:	4940      	ldr	r1, [pc, #256]	@ (8001f18 <DisplayWeather+0x48c>)
 8001e16:	4838      	ldr	r0, [pc, #224]	@ (8001ef8 <DisplayWeather+0x46c>)
 8001e18:	f006 f9f6 	bl	8008208 <siprintf>
								ILI9341_WriteString(80, 82, rx_buffer, Font_11x18, ILI9341_COLOR565(248, 248, 255), BLACK);
 8001e1c:	4b34      	ldr	r3, [pc, #208]	@ (8001ef0 <DisplayWeather+0x464>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	9202      	str	r2, [sp, #8]
 8001e22:	f64f 72df 	movw	r2, #65503	@ 0xffdf
 8001e26:	9201      	str	r2, [sp, #4]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	9200      	str	r2, [sp, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a32      	ldr	r2, [pc, #200]	@ (8001ef8 <DisplayWeather+0x46c>)
 8001e30:	2152      	movs	r1, #82	@ 0x52
 8001e32:	2050      	movs	r0, #80	@ 0x50
 8001e34:	f7ff fb52 	bl	80014dc <ILI9341_WriteString>
							}
							sprintf(rx_buffer, "%d", data_receive.tempCurrent[t][count]);
 8001e38:	4927      	ldr	r1, [pc, #156]	@ (8001ed8 <DisplayWeather+0x44c>)
 8001e3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e46:	4413      	add	r3, r2
 8001e48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4929      	ldr	r1, [pc, #164]	@ (8001ef4 <DisplayWeather+0x468>)
 8001e50:	4829      	ldr	r0, [pc, #164]	@ (8001ef8 <DisplayWeather+0x46c>)
 8001e52:	f006 f9d9 	bl	8008208 <siprintf>
							ILI9341_WriteString(135, 82, rx_buffer, Font_7x10, WHITE, BLACK);
 8001e56:	4b2b      	ldr	r3, [pc, #172]	@ (8001f04 <DisplayWeather+0x478>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	9202      	str	r2, [sp, #8]
 8001e5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e60:	9201      	str	r2, [sp, #4]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	9200      	str	r2, [sp, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a23      	ldr	r2, [pc, #140]	@ (8001ef8 <DisplayWeather+0x46c>)
 8001e6a:	2152      	movs	r1, #82	@ 0x52
 8001e6c:	2087      	movs	r0, #135	@ 0x87
 8001e6e:	f7ff fb35 	bl	80014dc <ILI9341_WriteString>
							sprintf(rx_letter, "%s", "o");
 8001e72:	4a22      	ldr	r2, [pc, #136]	@ (8001efc <DisplayWeather+0x470>)
 8001e74:	491c      	ldr	r1, [pc, #112]	@ (8001ee8 <DisplayWeather+0x45c>)
 8001e76:	4822      	ldr	r0, [pc, #136]	@ (8001f00 <DisplayWeather+0x474>)
 8001e78:	f006 f9c6 	bl	8008208 <siprintf>
							ILI9341_WriteString(150, 79, rx_letter, Font_7x10, WHITE, BLACK);
 8001e7c:	4b21      	ldr	r3, [pc, #132]	@ (8001f04 <DisplayWeather+0x478>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	9202      	str	r2, [sp, #8]
 8001e82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e86:	9201      	str	r2, [sp, #4]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	9200      	str	r2, [sp, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001f00 <DisplayWeather+0x474>)
 8001e90:	214f      	movs	r1, #79	@ 0x4f
 8001e92:	2096      	movs	r0, #150	@ 0x96
 8001e94:	f7ff fb22 	bl	80014dc <ILI9341_WriteString>

							sprintf(rx_buffer, "%d%%", data_receive.humidi[t][count]);
 8001e98:	490f      	ldr	r1, [pc, #60]	@ (8001ed8 <DisplayWeather+0x44c>)
 8001e9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ea6:	4413      	add	r3, r2
 8001ea8:	33bc      	adds	r3, #188	@ 0xbc
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4915      	ldr	r1, [pc, #84]	@ (8001f08 <DisplayWeather+0x47c>)
 8001eb4:	4810      	ldr	r0, [pc, #64]	@ (8001ef8 <DisplayWeather+0x46c>)
 8001eb6:	f006 f9a7 	bl	8008208 <siprintf>
							ILI9341_WriteString(135, 93, rx_buffer, Font_7x10, WHITE, BLACK);
 8001eba:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <DisplayWeather+0x478>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	9202      	str	r2, [sp, #8]
 8001ec0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ec4:	9201      	str	r2, [sp, #4]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	9200      	str	r2, [sp, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <DisplayWeather+0x46c>)
 8001ece:	215d      	movs	r1, #93	@ 0x5d
 8001ed0:	2087      	movs	r0, #135	@ 0x87
 8001ed2:	f7ff fb03 	bl	80014dc <ILI9341_WriteString>
 8001ed6:	e125      	b.n	8002124 <DisplayWeather+0x698>
 8001ed8:	20000260 	.word	0x20000260
 8001edc:	20001b20 	.word	0x20001b20
 8001ee0:	92492493 	.word	0x92492493
 8001ee4:	2000004c 	.word	0x2000004c
 8001ee8:	0800a534 	.word	0x0800a534
 8001eec:	20001720 	.word	0x20001720
 8001ef0:	2000000c 	.word	0x2000000c
 8001ef4:	0800a53c 	.word	0x0800a53c
 8001ef8:	20000f20 	.word	0x20000f20
 8001efc:	0800a540 	.word	0x0800a540
 8001f00:	20001320 	.word	0x20001320
 8001f04:	20000004 	.word	0x20000004
 8001f08:	0800a544 	.word	0x0800a544
 8001f0c:	0800cd9c 	.word	0x0800cd9c
 8001f10:	0800d59c 	.word	0x0800d59c
 8001f14:	0800a54c 	.word	0x0800a54c
 8001f18:	0800a554 	.word	0x0800a554
						}
						else{
							sprintf(rx_Day, "%s",day_char[currentDay]);
 8001f1c:	4a9f      	ldr	r2, [pc, #636]	@ (800219c <DisplayWeather+0x710>)
 8001f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f24:	461a      	mov	r2, r3
 8001f26:	499e      	ldr	r1, [pc, #632]	@ (80021a0 <DisplayWeather+0x714>)
 8001f28:	489e      	ldr	r0, [pc, #632]	@ (80021a4 <DisplayWeather+0x718>)
 8001f2a:	f006 f96d 	bl	8008208 <siprintf>
							ILI9341_WriteString(20,30*t + 97 , rx_Day, Font_7x10, WHITE, BLACK);
 8001f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	0112      	lsls	r2, r2, #4
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3361      	adds	r3, #97	@ 0x61
 8001f3e:	b299      	uxth	r1, r3
 8001f40:	4b99      	ldr	r3, [pc, #612]	@ (80021a8 <DisplayWeather+0x71c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	9202      	str	r2, [sp, #8]
 8001f46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f4a:	9201      	str	r2, [sp, #4]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	9200      	str	r2, [sp, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a94      	ldr	r2, [pc, #592]	@ (80021a4 <DisplayWeather+0x718>)
 8001f54:	2014      	movs	r0, #20
 8001f56:	f7ff fac1 	bl	80014dc <ILI9341_WriteString>


							sprintf(rx_buffer, "%d",data_receive.tempMax[t]);
 8001f5a:	4a94      	ldr	r2, [pc, #592]	@ (80021ac <DisplayWeather+0x720>)
 8001f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f5e:	33ae      	adds	r3, #174	@ 0xae
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	461a      	mov	r2, r3
 8001f68:	4991      	ldr	r1, [pc, #580]	@ (80021b0 <DisplayWeather+0x724>)
 8001f6a:	4892      	ldr	r0, [pc, #584]	@ (80021b4 <DisplayWeather+0x728>)
 8001f6c:	f006 f94c 	bl	8008208 <siprintf>
							ILI9341_WriteString(75, 30*t + 97, rx_buffer, Font_7x10, WHITE, BLACK);
 8001f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3361      	adds	r3, #97	@ 0x61
 8001f80:	b299      	uxth	r1, r3
 8001f82:	4b89      	ldr	r3, [pc, #548]	@ (80021a8 <DisplayWeather+0x71c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	9202      	str	r2, [sp, #8]
 8001f88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f8c:	9201      	str	r2, [sp, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	9200      	str	r2, [sp, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a87      	ldr	r2, [pc, #540]	@ (80021b4 <DisplayWeather+0x728>)
 8001f96:	204b      	movs	r0, #75	@ 0x4b
 8001f98:	f7ff faa0 	bl	80014dc <ILI9341_WriteString>
							sprintf(rx_letter, "%s","o");
 8001f9c:	4a86      	ldr	r2, [pc, #536]	@ (80021b8 <DisplayWeather+0x72c>)
 8001f9e:	4980      	ldr	r1, [pc, #512]	@ (80021a0 <DisplayWeather+0x714>)
 8001fa0:	4886      	ldr	r0, [pc, #536]	@ (80021bc <DisplayWeather+0x730>)
 8001fa2:	f006 f931 	bl	8008208 <siprintf>
							ILI9341_WriteString(90, 30*t + 93, rx_letter, Font_7x10, WHITE, BLACK);
 8001fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	0112      	lsls	r2, r2, #4
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	335d      	adds	r3, #93	@ 0x5d
 8001fb6:	b299      	uxth	r1, r3
 8001fb8:	4b7b      	ldr	r3, [pc, #492]	@ (80021a8 <DisplayWeather+0x71c>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	9202      	str	r2, [sp, #8]
 8001fbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fc2:	9201      	str	r2, [sp, #4]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	9200      	str	r2, [sp, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a7c      	ldr	r2, [pc, #496]	@ (80021bc <DisplayWeather+0x730>)
 8001fcc:	205a      	movs	r0, #90	@ 0x5a
 8001fce:	f7ff fa85 	bl	80014dc <ILI9341_WriteString>

							sprintf(rx_buffer, "%d",data_receive.tempMin[t]);
 8001fd2:	4a76      	ldr	r2, [pc, #472]	@ (80021ac <DisplayWeather+0x720>)
 8001fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd6:	33b6      	adds	r3, #182	@ 0xb6
 8001fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4974      	ldr	r1, [pc, #464]	@ (80021b0 <DisplayWeather+0x724>)
 8001fe0:	4874      	ldr	r0, [pc, #464]	@ (80021b4 <DisplayWeather+0x728>)
 8001fe2:	f006 f911 	bl	8008208 <siprintf>
							ILI9341_WriteString(105, 30*t + 97, rx_buffer, Font_7x10, WHITE, BLACK);
 8001fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	461a      	mov	r2, r3
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3361      	adds	r3, #97	@ 0x61
 8001ff6:	b299      	uxth	r1, r3
 8001ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80021a8 <DisplayWeather+0x71c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	9202      	str	r2, [sp, #8]
 8001ffe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002002:	9201      	str	r2, [sp, #4]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	9200      	str	r2, [sp, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a6a      	ldr	r2, [pc, #424]	@ (80021b4 <DisplayWeather+0x728>)
 800200c:	2069      	movs	r0, #105	@ 0x69
 800200e:	f7ff fa65 	bl	80014dc <ILI9341_WriteString>
							sprintf(rx_letter, "%s","o");
 8002012:	4a69      	ldr	r2, [pc, #420]	@ (80021b8 <DisplayWeather+0x72c>)
 8002014:	4962      	ldr	r1, [pc, #392]	@ (80021a0 <DisplayWeather+0x714>)
 8002016:	4869      	ldr	r0, [pc, #420]	@ (80021bc <DisplayWeather+0x730>)
 8002018:	f006 f8f6 	bl	8008208 <siprintf>
							ILI9341_WriteString(120, 30*t + 93, rx_letter, Font_7x10, WHITE, BLACK);
 800201c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800201e:	b29b      	uxth	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	0112      	lsls	r2, r2, #4
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	b29b      	uxth	r3, r3
 800202a:	335d      	adds	r3, #93	@ 0x5d
 800202c:	b299      	uxth	r1, r3
 800202e:	4b5e      	ldr	r3, [pc, #376]	@ (80021a8 <DisplayWeather+0x71c>)
 8002030:	2200      	movs	r2, #0
 8002032:	9202      	str	r2, [sp, #8]
 8002034:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002038:	9201      	str	r2, [sp, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	9200      	str	r2, [sp, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a5e      	ldr	r2, [pc, #376]	@ (80021bc <DisplayWeather+0x730>)
 8002042:	2078      	movs	r0, #120	@ 0x78
 8002044:	f7ff fa4a 	bl	80014dc <ILI9341_WriteString>

							sprintf(rx_buffer, "%d%%",data_receive.humidi[t][n]);
 8002048:	4958      	ldr	r1, [pc, #352]	@ (80021ac <DisplayWeather+0x720>)
 800204a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002056:	4413      	add	r3, r2
 8002058:	33bc      	adds	r3, #188	@ 0xbc
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	461a      	mov	r2, r3
 8002062:	4957      	ldr	r1, [pc, #348]	@ (80021c0 <DisplayWeather+0x734>)
 8002064:	4853      	ldr	r0, [pc, #332]	@ (80021b4 <DisplayWeather+0x728>)
 8002066:	f006 f8cf 	bl	8008208 <siprintf>
							ILI9341_WriteString(179, 30*t + 97, rx_buffer, Font_7x10, WHITE, BLACK);
 800206a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800206c:	b29b      	uxth	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	0112      	lsls	r2, r2, #4
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	b29b      	uxth	r3, r3
 8002078:	3361      	adds	r3, #97	@ 0x61
 800207a:	b299      	uxth	r1, r3
 800207c:	4b4a      	ldr	r3, [pc, #296]	@ (80021a8 <DisplayWeather+0x71c>)
 800207e:	2200      	movs	r2, #0
 8002080:	9202      	str	r2, [sp, #8]
 8002082:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002086:	9201      	str	r2, [sp, #4]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	9200      	str	r2, [sp, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a49      	ldr	r2, [pc, #292]	@ (80021b4 <DisplayWeather+0x728>)
 8002090:	20b3      	movs	r0, #179	@ 0xb3
 8002092:	f7ff fa23 	bl	80014dc <ILI9341_WriteString>
							if(data_receive.Rain[t][n] == 0){
 8002096:	4945      	ldr	r1, [pc, #276]	@ (80021ac <DisplayWeather+0x720>)
 8002098:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020a4:	4413      	add	r3, r2
 80020a6:	33b3      	adds	r3, #179	@ 0xb3
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	f7fe fc76 	bl	80009a8 <__aeabi_dcmpeq>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d010      	beq.n	80020e4 <DisplayWeather+0x658>
								ILI9341_DrawImage(55, 30*t + 92, 16, 16, Image_Sun_16);
 80020c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	461a      	mov	r2, r3
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	335c      	adds	r3, #92	@ 0x5c
 80020d2:	b299      	uxth	r1, r3
 80020d4:	4b3b      	ldr	r3, [pc, #236]	@ (80021c4 <DisplayWeather+0x738>)
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	2310      	movs	r3, #16
 80020da:	2210      	movs	r2, #16
 80020dc:	2037      	movs	r0, #55	@ 0x37
 80020de:	f7ff fabf 	bl	8001660 <ILI9341_DrawImage>
 80020e2:	e00f      	b.n	8002104 <DisplayWeather+0x678>
							}
							else{
								ILI9341_DrawImage(55, 30*t + 92, 16, 16, Image_rain_16);
 80020e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	335c      	adds	r3, #92	@ 0x5c
 80020f4:	b299      	uxth	r1, r3
 80020f6:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <DisplayWeather+0x73c>)
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2310      	movs	r3, #16
 80020fc:	2210      	movs	r2, #16
 80020fe:	2037      	movs	r0, #55	@ 0x37
 8002100:	f7ff faae 	bl	8001660 <ILI9341_DrawImage>
							}
							ILI9341_DrawImage(155, 30*t + 92, 16, 16, Image_humidity_16);
 8002104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002106:	b29b      	uxth	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	0112      	lsls	r2, r2, #4
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	b29b      	uxth	r3, r3
 8002112:	335c      	adds	r3, #92	@ 0x5c
 8002114:	b299      	uxth	r1, r3
 8002116:	4b2d      	ldr	r3, [pc, #180]	@ (80021cc <DisplayWeather+0x740>)
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2310      	movs	r3, #16
 800211c:	2210      	movs	r2, #16
 800211e:	209b      	movs	r0, #155	@ 0x9b
 8002120:	f7ff fa9e 	bl	8001660 <ILI9341_DrawImage>
				for(int t = 0;t < 7;t++){
 8002124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002126:	3301      	adds	r3, #1
 8002128:	643b      	str	r3, [r7, #64]	@ 0x40
 800212a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800212c:	2b06      	cmp	r3, #6
 800212e:	f77f ada9 	ble.w	8001c84 <DisplayWeather+0x1f8>
						}
					}
				HAL_Delay(2000);
 8002132:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002136:	f001 ffeb 	bl	8004110 <HAL_Delay>

				if (ILI9341_TouchGetCoordinates(&x, &y)) {
 800213a:	1d3a      	adds	r2, r7, #4
 800213c:	1dbb      	adds	r3, r7, #6
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f001 fea9 	bl	8003e98 <ILI9341_TouchGetCoordinates>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d057      	beq.n	80021fc <DisplayWeather+0x770>
					if(x >= 4 && x <= 20 && y >= 284 && y <= 320){
 800214c:	88fb      	ldrh	r3, [r7, #6]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d90f      	bls.n	8002172 <DisplayWeather+0x6e6>
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	2b14      	cmp	r3, #20
 8002156:	d80c      	bhi.n	8002172 <DisplayWeather+0x6e6>
 8002158:	88bb      	ldrh	r3, [r7, #4]
 800215a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800215e:	d308      	bcc.n	8002172 <DisplayWeather+0x6e6>
 8002160:	88bb      	ldrh	r3, [r7, #4]
 8002162:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002166:	d804      	bhi.n	8002172 <DisplayWeather+0x6e6>
						state = 1;
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <DisplayWeather+0x744>)
 800216a:	2201      	movs	r2, #1
 800216c:	601a      	str	r2, [r3, #0]
						while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY) {
						     // Chờ UART truyền xong
						__HAL_UART_FLUSH_DRREGISTER(&huart1); // Xóa thanh ghi dữ liệu UART
						Hue.flagSend = 0;
						HAL_UART_Transmit(&huart1, (uint8_t *)&Hue, sizeof(HaNoi),1000);*/
						return;
 800216e:	f001 b914 	b.w	800339a <DisplayWeather+0x190e>
						}
					//next
					else if (x >= 64 && x <= 83 && y >= 269 && y <= 318) {
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	2b3f      	cmp	r3, #63	@ 0x3f
 8002176:	d92d      	bls.n	80021d4 <DisplayWeather+0x748>
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	2b53      	cmp	r3, #83	@ 0x53
 800217c:	d82a      	bhi.n	80021d4 <DisplayWeather+0x748>
 800217e:	88bb      	ldrh	r3, [r7, #4]
 8002180:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8002184:	d926      	bls.n	80021d4 <DisplayWeather+0x748>
 8002186:	88bb      	ldrh	r3, [r7, #4]
 8002188:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800218c:	d822      	bhi.n	80021d4 <DisplayWeather+0x748>
						if (count + 1 <= 24) {
 800218e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002190:	2b17      	cmp	r3, #23
 8002192:	dc33      	bgt.n	80021fc <DisplayWeather+0x770>
							count++;
 8002194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002196:	3301      	adds	r3, #1
 8002198:	647b      	str	r3, [r7, #68]	@ 0x44
						if (count + 1 <= 24) {
 800219a:	e02f      	b.n	80021fc <DisplayWeather+0x770>
 800219c:	2000004c 	.word	0x2000004c
 80021a0:	0800a534 	.word	0x0800a534
 80021a4:	20001720 	.word	0x20001720
 80021a8:	20000004 	.word	0x20000004
 80021ac:	20000260 	.word	0x20000260
 80021b0:	0800a53c 	.word	0x0800a53c
 80021b4:	20000f20 	.word	0x20000f20
 80021b8:	0800a540 	.word	0x0800a540
 80021bc:	20001320 	.word	0x20001320
 80021c0:	0800a544 	.word	0x0800a544
 80021c4:	0800ef9c 	.word	0x0800ef9c
 80021c8:	0800f19c 	.word	0x0800f19c
 80021cc:	0800ed9c 	.word	0x0800ed9c
 80021d0:	20001b24 	.word	0x20001b24
						}
					}
					// back
					else if (x >= 64 && x <= 80 && y >= 49 && y <= 68) {
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80021d8:	d910      	bls.n	80021fc <DisplayWeather+0x770>
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	2b50      	cmp	r3, #80	@ 0x50
 80021de:	d80d      	bhi.n	80021fc <DisplayWeather+0x770>
 80021e0:	88bb      	ldrh	r3, [r7, #4]
 80021e2:	2b30      	cmp	r3, #48	@ 0x30
 80021e4:	d90a      	bls.n	80021fc <DisplayWeather+0x770>
 80021e6:	88bb      	ldrh	r3, [r7, #4]
 80021e8:	2b44      	cmp	r3, #68	@ 0x44
 80021ea:	d807      	bhi.n	80021fc <DisplayWeather+0x770>
						if (count - 1 > n) {
 80021ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021f2:	429a      	cmp	r2, r3
 80021f4:	da02      	bge.n	80021fc <DisplayWeather+0x770>
							count--;
 80021f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021f8:	3b01      	subs	r3, #1
 80021fa:	647b      	str	r3, [r7, #68]	@ 0x44
			while(state != 1){
 80021fc:	4b6b      	ldr	r3, [pc, #428]	@ (80023ac <DisplayWeather+0x920>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	f47f ad0e 	bne.w	8001c22 <DisplayWeather+0x196>
		{
 8002206:	f001 b8c8 	b.w	800339a <DisplayWeather+0x190e>
					}
				}
			}
		}

		else if((x >= 77 && x <= 99) && (y >= 9 && y <= 318))
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	2b4c      	cmp	r3, #76	@ 0x4c
 800220e:	f240 83aa 	bls.w	8002966 <DisplayWeather+0xeda>
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	2b63      	cmp	r3, #99	@ 0x63
 8002216:	f200 83a6 	bhi.w	8002966 <DisplayWeather+0xeda>
 800221a:	88bb      	ldrh	r3, [r7, #4]
 800221c:	2b08      	cmp	r3, #8
 800221e:	f240 83a2 	bls.w	8002966 <DisplayWeather+0xeda>
 8002222:	88bb      	ldrh	r3, [r7, #4]
 8002224:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002228:	f200 839d 	bhi.w	8002966 <DisplayWeather+0xeda>
		{
			HoChiMinh.flagSend = 1;
 800222c:	4b60      	ldr	r3, [pc, #384]	@ (80023b0 <DisplayWeather+0x924>)
 800222e:	2201      	movs	r2, #1
 8002230:	60da      	str	r2, [r3, #12]
			HAL_UART_Transmit(&huart1, (uint8_t *)&HoChiMinh, sizeof(HoChiMinh),1000);
 8002232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002236:	2210      	movs	r2, #16
 8002238:	495d      	ldr	r1, [pc, #372]	@ (80023b0 <DisplayWeather+0x924>)
 800223a:	485e      	ldr	r0, [pc, #376]	@ (80023b4 <DisplayWeather+0x928>)
 800223c:	f004 fcac 	bl	8006b98 <HAL_UART_Transmit>
			HoChiMinh.flagSend = 0;
 8002240:	4b5b      	ldr	r3, [pc, #364]	@ (80023b0 <DisplayWeather+0x924>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
			HAL_UART_Transmit(&huart1, (uint8_t *)&HoChiMinh, sizeof(HoChiMinh),1000);
 8002246:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800224a:	2210      	movs	r2, #16
 800224c:	4958      	ldr	r1, [pc, #352]	@ (80023b0 <DisplayWeather+0x924>)
 800224e:	4859      	ldr	r0, [pc, #356]	@ (80023b4 <DisplayWeather+0x928>)
 8002250:	f004 fca2 	bl	8006b98 <HAL_UART_Transmit>
			while(data_receive.receiveNumber != 1 || data_receive.receiveNumber == 2 || data_receive.receiveNumber == 3){
 8002254:	e026      	b.n	80022a4 <DisplayWeather+0x818>
				HoChiMinh.flagSend = 1;
 8002256:	4b56      	ldr	r3, [pc, #344]	@ (80023b0 <DisplayWeather+0x924>)
 8002258:	2201      	movs	r2, #1
 800225a:	60da      	str	r2, [r3, #12]
				HAL_UART_Transmit(&huart1, (uint8_t *)&HoChiMinh, sizeof(HoChiMinh),1000);
 800225c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002260:	2210      	movs	r2, #16
 8002262:	4953      	ldr	r1, [pc, #332]	@ (80023b0 <DisplayWeather+0x924>)
 8002264:	4853      	ldr	r0, [pc, #332]	@ (80023b4 <DisplayWeather+0x928>)
 8002266:	f004 fc97 	bl	8006b98 <HAL_UART_Transmit>
				HoChiMinh.flagSend = 0;
 800226a:	4b51      	ldr	r3, [pc, #324]	@ (80023b0 <DisplayWeather+0x924>)
 800226c:	2200      	movs	r2, #0
 800226e:	60da      	str	r2, [r3, #12]
				HAL_UART_Transmit(&huart1, (uint8_t *)&HoChiMinh, sizeof(HoChiMinh),1000);
 8002270:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002274:	2210      	movs	r2, #16
 8002276:	494e      	ldr	r1, [pc, #312]	@ (80023b0 <DisplayWeather+0x924>)
 8002278:	484e      	ldr	r0, [pc, #312]	@ (80023b4 <DisplayWeather+0x928>)
 800227a:	f004 fc8d 	bl	8006b98 <HAL_UART_Transmit>
				ILI9341_FillScreen(ILI9341_COLOR565(0, 204, 204));
 800227e:	f240 6079 	movw	r0, #1657	@ 0x679
 8002282:	f7ff f9d3 	bl	800162c <ILI9341_FillScreen>
				ILI9341_WriteString(40, 147, "Loading...", Font_16x26, ILI9341_COLOR565(102, 51, 255),ILI9341_COLOR565(0, 204, 204) );
 8002286:	4b4c      	ldr	r3, [pc, #304]	@ (80023b8 <DisplayWeather+0x92c>)
 8002288:	f240 6279 	movw	r2, #1657	@ 0x679
 800228c:	9202      	str	r2, [sp, #8]
 800228e:	f246 129f 	movw	r2, #24991	@ 0x619f
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	9200      	str	r2, [sp, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a48      	ldr	r2, [pc, #288]	@ (80023bc <DisplayWeather+0x930>)
 800229c:	2193      	movs	r1, #147	@ 0x93
 800229e:	2028      	movs	r0, #40	@ 0x28
 80022a0:	f7ff f91c 	bl	80014dc <ILI9341_WriteString>
			while(data_receive.receiveNumber != 1 || data_receive.receiveNumber == 2 || data_receive.receiveNumber == 3){
 80022a4:	4b46      	ldr	r3, [pc, #280]	@ (80023c0 <DisplayWeather+0x934>)
 80022a6:	f8d3 3adc 	ldr.w	r3, [r3, #2780]	@ 0xadc
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d1d3      	bne.n	8002256 <DisplayWeather+0x7ca>
 80022ae:	4b44      	ldr	r3, [pc, #272]	@ (80023c0 <DisplayWeather+0x934>)
 80022b0:	f8d3 3adc 	ldr.w	r3, [r3, #2780]	@ 0xadc
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d0ce      	beq.n	8002256 <DisplayWeather+0x7ca>
 80022b8:	4b41      	ldr	r3, [pc, #260]	@ (80023c0 <DisplayWeather+0x934>)
 80022ba:	f8d3 3adc 	ldr.w	r3, [r3, #2780]	@ 0xadc
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d0c9      	beq.n	8002256 <DisplayWeather+0x7ca>
			}
				ILI9341_FillScreen(BLACK);
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7ff f9b2 	bl	800162c <ILI9341_FillScreen>
				ILI9341_WriteString(50, 1, "Ho Chi Minh", Font_11x18, ILI9341_COLOR565(255, 51, 0), BLACK);
 80022c8:	4b3e      	ldr	r3, [pc, #248]	@ (80023c4 <DisplayWeather+0x938>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	9202      	str	r2, [sp, #8]
 80022ce:	f64f 1280 	movw	r2, #63872	@ 0xf980
 80022d2:	9201      	str	r2, [sp, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	9200      	str	r2, [sp, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a3b      	ldr	r2, [pc, #236]	@ (80023c8 <DisplayWeather+0x93c>)
 80022dc:	2101      	movs	r1, #1
 80022de:	2032      	movs	r0, #50	@ 0x32
 80022e0:	f7ff f8fc 	bl	80014dc <ILI9341_WriteString>
				ILI9341_DrawImage(206, 1, 24, 24, button_back_Image);
 80022e4:	4b39      	ldr	r3, [pc, #228]	@ (80023cc <DisplayWeather+0x940>)
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2318      	movs	r3, #24
 80022ea:	2218      	movs	r2, #24
 80022ec:	2101      	movs	r1, #1
 80022ee:	20ce      	movs	r0, #206	@ 0xce
 80022f0:	f7ff f9b6 	bl	8001660 <ILI9341_DrawImage>

				ILI9341_FillRectangle(38, 80, 22, 22, ILI9341_COLOR565(64, 160, 240));
 80022f4:	f244 531e 	movw	r3, #17694	@ 0x451e
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	2316      	movs	r3, #22
 80022fc:	2216      	movs	r2, #22
 80022fe:	2150      	movs	r1, #80	@ 0x50
 8002300:	2026      	movs	r0, #38	@ 0x26
 8002302:	f7ff f93f 	bl	8001584 <ILI9341_FillRectangle>
				sprintf(rx_letter, "%s","<");
 8002306:	4a32      	ldr	r2, [pc, #200]	@ (80023d0 <DisplayWeather+0x944>)
 8002308:	4932      	ldr	r1, [pc, #200]	@ (80023d4 <DisplayWeather+0x948>)
 800230a:	4833      	ldr	r0, [pc, #204]	@ (80023d8 <DisplayWeather+0x94c>)
 800230c:	f005 ff7c 	bl	8008208 <siprintf>
				ILI9341_WriteString(43, 82, rx_letter, Font_11x18, WHITE, ILI9341_COLOR565(64, 160, 240));
 8002310:	4b2c      	ldr	r3, [pc, #176]	@ (80023c4 <DisplayWeather+0x938>)
 8002312:	f244 521e 	movw	r2, #17694	@ 0x451e
 8002316:	9202      	str	r2, [sp, #8]
 8002318:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800231c:	9201      	str	r2, [sp, #4]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	9200      	str	r2, [sp, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2c      	ldr	r2, [pc, #176]	@ (80023d8 <DisplayWeather+0x94c>)
 8002326:	2152      	movs	r1, #82	@ 0x52
 8002328:	202b      	movs	r0, #43	@ 0x2b
 800232a:	f7ff f8d7 	bl	80014dc <ILI9341_WriteString>
				ILI9341_FillRectangle(187, 80, 22, 22, ILI9341_COLOR565(64, 160, 240));
 800232e:	f244 531e 	movw	r3, #17694	@ 0x451e
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	2316      	movs	r3, #22
 8002336:	2216      	movs	r2, #22
 8002338:	2150      	movs	r1, #80	@ 0x50
 800233a:	20bb      	movs	r0, #187	@ 0xbb
 800233c:	f7ff f922 	bl	8001584 <ILI9341_FillRectangle>
				sprintf(rx_letter, "%s",">");
 8002340:	4a26      	ldr	r2, [pc, #152]	@ (80023dc <DisplayWeather+0x950>)
 8002342:	4924      	ldr	r1, [pc, #144]	@ (80023d4 <DisplayWeather+0x948>)
 8002344:	4824      	ldr	r0, [pc, #144]	@ (80023d8 <DisplayWeather+0x94c>)
 8002346:	f005 ff5f 	bl	8008208 <siprintf>
				ILI9341_WriteString(194, 82, rx_letter, Font_11x18, WHITE, ILI9341_COLOR565(64, 160, 240));
 800234a:	4b1e      	ldr	r3, [pc, #120]	@ (80023c4 <DisplayWeather+0x938>)
 800234c:	f244 521e 	movw	r2, #17694	@ 0x451e
 8002350:	9202      	str	r2, [sp, #8]
 8002352:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002356:	9201      	str	r2, [sp, #4]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	9200      	str	r2, [sp, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a1e      	ldr	r2, [pc, #120]	@ (80023d8 <DisplayWeather+0x94c>)
 8002360:	2152      	movs	r1, #82	@ 0x52
 8002362:	20c2      	movs	r0, #194	@ 0xc2
 8002364:	f7ff f8ba 	bl	80014dc <ILI9341_WriteString>

				int count = data_receive.gioHT + 1;
 8002368:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <DisplayWeather+0x934>)
 800236a:	f8d3 3ad8 	ldr.w	r3, [r3, #2776]	@ 0xad8
 800236e:	3301      	adds	r3, #1
 8002370:	63fb      	str	r3, [r7, #60]	@ 0x3c
				int timeCurrent;
				int n = data_receive.gioHT;
 8002372:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <DisplayWeather+0x934>)
 8002374:	f8d3 3ad8 	ldr.w	r3, [r3, #2776]	@ 0xad8
 8002378:	623b      	str	r3, [r7, #32]

			while(state != 2){
 800237a:	e2ed      	b.n	8002958 <DisplayWeather+0xecc>
				HoChiMinh.flagSend = 1;
 800237c:	4b0c      	ldr	r3, [pc, #48]	@ (80023b0 <DisplayWeather+0x924>)
 800237e:	2201      	movs	r2, #1
 8002380:	60da      	str	r2, [r3, #12]
				HAL_UART_Transmit(&huart1, (uint8_t *)&HoChiMinh, sizeof(HoChiMinh),1000);
 8002382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002386:	2210      	movs	r2, #16
 8002388:	4909      	ldr	r1, [pc, #36]	@ (80023b0 <DisplayWeather+0x924>)
 800238a:	480a      	ldr	r0, [pc, #40]	@ (80023b4 <DisplayWeather+0x928>)
 800238c:	f004 fc04 	bl	8006b98 <HAL_UART_Transmit>
				HoChiMinh.flagSend = 0;
 8002390:	4b07      	ldr	r3, [pc, #28]	@ (80023b0 <DisplayWeather+0x924>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
				HAL_UART_Transmit(&huart1, (uint8_t *)&HoChiMinh, sizeof(HoChiMinh),1000);
 8002396:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800239a:	2210      	movs	r2, #16
 800239c:	4904      	ldr	r1, [pc, #16]	@ (80023b0 <DisplayWeather+0x924>)
 800239e:	4805      	ldr	r0, [pc, #20]	@ (80023b4 <DisplayWeather+0x928>)
 80023a0:	f004 fbfa 	bl	8006b98 <HAL_UART_Transmit>

				for(int t = 0;t < 7;t++){
 80023a4:	2300      	movs	r3, #0
 80023a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023a8:	e26d      	b.n	8002886 <DisplayWeather+0xdfa>
 80023aa:	bf00      	nop
 80023ac:	20001b24 	.word	0x20001b24
 80023b0:	2000001c 	.word	0x2000001c
 80023b4:	20000e98 	.word	0x20000e98
 80023b8:	20000014 	.word	0x20000014
 80023bc:	0800a524 	.word	0x0800a524
 80023c0:	20000260 	.word	0x20000260
 80023c4:	2000000c 	.word	0x2000000c
 80023c8:	0800a4f8 	.word	0x0800a4f8
 80023cc:	0800f39c 	.word	0x0800f39c
 80023d0:	0800a530 	.word	0x0800a530
 80023d4:	0800a534 	.word	0x0800a534
 80023d8:	20001320 	.word	0x20001320
 80023dc:	0800a538 	.word	0x0800a538
					int currentDay = (data_receive.numberDay[t] + i) % 7;
 80023e0:	4a94      	ldr	r2, [pc, #592]	@ (8002634 <DisplayWeather+0xba8>)
 80023e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e4:	33a8      	adds	r3, #168	@ 0xa8
 80023e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023ea:	4b93      	ldr	r3, [pc, #588]	@ (8002638 <DisplayWeather+0xbac>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	441a      	add	r2, r3
 80023f0:	4b92      	ldr	r3, [pc, #584]	@ (800263c <DisplayWeather+0xbb0>)
 80023f2:	fb83 1302 	smull	r1, r3, r3, r2
 80023f6:	4413      	add	r3, r2
 80023f8:	1099      	asrs	r1, r3, #2
 80023fa:	17d3      	asrs	r3, r2, #31
 80023fc:	1ac9      	subs	r1, r1, r3
 80023fe:	460b      	mov	r3, r1
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	1a5b      	subs	r3, r3, r1
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	61fb      	str	r3, [r7, #28]
					if(t == 0){
 8002408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 8134 	bne.w	8002678 <DisplayWeather+0xbec>
						sprintf(rx_Day, "%s",day_char[currentDay]);
 8002410:	4a8b      	ldr	r2, [pc, #556]	@ (8002640 <DisplayWeather+0xbb4>)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002418:	461a      	mov	r2, r3
 800241a:	498a      	ldr	r1, [pc, #552]	@ (8002644 <DisplayWeather+0xbb8>)
 800241c:	488a      	ldr	r0, [pc, #552]	@ (8002648 <DisplayWeather+0xbbc>)
 800241e:	f005 fef3 	bl	8008208 <siprintf>
						ILI9341_WriteString(5, 30, rx_Day, Font_11x18, WHITE, BLACK);
 8002422:	4b8a      	ldr	r3, [pc, #552]	@ (800264c <DisplayWeather+0xbc0>)
 8002424:	2200      	movs	r2, #0
 8002426:	9202      	str	r2, [sp, #8]
 8002428:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800242c:	9201      	str	r2, [sp, #4]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	9200      	str	r2, [sp, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a84      	ldr	r2, [pc, #528]	@ (8002648 <DisplayWeather+0xbbc>)
 8002436:	211e      	movs	r1, #30
 8002438:	2005      	movs	r0, #5
 800243a:	f7ff f84f 	bl	80014dc <ILI9341_WriteString>

						sprintf(rx_buffer, "%d",data_receive.tempCurrent[t][n]);
 800243e:	497d      	ldr	r1, [pc, #500]	@ (8002634 <DisplayWeather+0xba8>)
 8002440:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	6a3a      	ldr	r2, [r7, #32]
 800244c:	4413      	add	r3, r2
 800244e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002452:	461a      	mov	r2, r3
 8002454:	497e      	ldr	r1, [pc, #504]	@ (8002650 <DisplayWeather+0xbc4>)
 8002456:	487f      	ldr	r0, [pc, #508]	@ (8002654 <DisplayWeather+0xbc8>)
 8002458:	f005 fed6 	bl	8008208 <siprintf>
						ILI9341_WriteString(60, 30, rx_buffer, Font_11x18, WHITE, BLACK);
 800245c:	4b7b      	ldr	r3, [pc, #492]	@ (800264c <DisplayWeather+0xbc0>)
 800245e:	2200      	movs	r2, #0
 8002460:	9202      	str	r2, [sp, #8]
 8002462:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002466:	9201      	str	r2, [sp, #4]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	9200      	str	r2, [sp, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a79      	ldr	r2, [pc, #484]	@ (8002654 <DisplayWeather+0xbc8>)
 8002470:	211e      	movs	r1, #30
 8002472:	203c      	movs	r0, #60	@ 0x3c
 8002474:	f7ff f832 	bl	80014dc <ILI9341_WriteString>
						sprintf(rx_letter, "%s","o");
 8002478:	4a77      	ldr	r2, [pc, #476]	@ (8002658 <DisplayWeather+0xbcc>)
 800247a:	4972      	ldr	r1, [pc, #456]	@ (8002644 <DisplayWeather+0xbb8>)
 800247c:	4877      	ldr	r0, [pc, #476]	@ (800265c <DisplayWeather+0xbd0>)
 800247e:	f005 fec3 	bl	8008208 <siprintf>
						ILI9341_WriteString(83, 30, rx_letter, Font_7x10, WHITE, BLACK);
 8002482:	4b77      	ldr	r3, [pc, #476]	@ (8002660 <DisplayWeather+0xbd4>)
 8002484:	2200      	movs	r2, #0
 8002486:	9202      	str	r2, [sp, #8]
 8002488:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800248c:	9201      	str	r2, [sp, #4]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	9200      	str	r2, [sp, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a71      	ldr	r2, [pc, #452]	@ (800265c <DisplayWeather+0xbd0>)
 8002496:	211e      	movs	r1, #30
 8002498:	2053      	movs	r0, #83	@ 0x53
 800249a:	f7ff f81f 	bl	80014dc <ILI9341_WriteString>

						sprintf(rx_buffer, "%d%%",data_receive.humidi[t][n]);
 800249e:	4965      	ldr	r1, [pc, #404]	@ (8002634 <DisplayWeather+0xba8>)
 80024a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	6a3a      	ldr	r2, [r7, #32]
 80024ac:	4413      	add	r3, r2
 80024ae:	33bc      	adds	r3, #188	@ 0xbc
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	461a      	mov	r2, r3
 80024b8:	496a      	ldr	r1, [pc, #424]	@ (8002664 <DisplayWeather+0xbd8>)
 80024ba:	4866      	ldr	r0, [pc, #408]	@ (8002654 <DisplayWeather+0xbc8>)
 80024bc:	f005 fea4 	bl	8008208 <siprintf>
						ILI9341_WriteString(60, 50, rx_buffer, Font_11x18, WHITE, BLACK);
 80024c0:	4b62      	ldr	r3, [pc, #392]	@ (800264c <DisplayWeather+0xbc0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	9202      	str	r2, [sp, #8]
 80024c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024ca:	9201      	str	r2, [sp, #4]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	9200      	str	r2, [sp, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a60      	ldr	r2, [pc, #384]	@ (8002654 <DisplayWeather+0xbc8>)
 80024d4:	2132      	movs	r1, #50	@ 0x32
 80024d6:	203c      	movs	r0, #60	@ 0x3c
 80024d8:	f7ff f800 	bl	80014dc <ILI9341_WriteString>
						if(data_receive.Rain[t][n] == 0){
 80024dc:	4955      	ldr	r1, [pc, #340]	@ (8002634 <DisplayWeather+0xba8>)
 80024de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	6a3a      	ldr	r2, [r7, #32]
 80024ea:	4413      	add	r3, r2
 80024ec:	33b3      	adds	r3, #179	@ 0xb3
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	440b      	add	r3, r1
 80024f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	f7fe fa53 	bl	80009a8 <__aeabi_dcmpeq>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <DisplayWeather+0xa8e>
							ILI9341_DrawImage(134, 30, 32, 32, Image_Sun);
 8002508:	4b57      	ldr	r3, [pc, #348]	@ (8002668 <DisplayWeather+0xbdc>)
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2320      	movs	r3, #32
 800250e:	2220      	movs	r2, #32
 8002510:	211e      	movs	r1, #30
 8002512:	2086      	movs	r0, #134	@ 0x86
 8002514:	f7ff f8a4 	bl	8001660 <ILI9341_DrawImage>
 8002518:	e007      	b.n	800252a <DisplayWeather+0xa9e>
						}
						else{
							ILI9341_DrawImage(134, 30, 32, 32, Image_Rain);
 800251a:	4b54      	ldr	r3, [pc, #336]	@ (800266c <DisplayWeather+0xbe0>)
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2320      	movs	r3, #32
 8002520:	2220      	movs	r2, #32
 8002522:	211e      	movs	r1, #30
 8002524:	2086      	movs	r0, #134	@ 0x86
 8002526:	f7ff f89b 	bl	8001660 <ILI9341_DrawImage>
						}

						// next current hour
						if(count > 12)
 800252a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800252c:	2b0c      	cmp	r3, #12
 800252e:	dd1e      	ble.n	800256e <DisplayWeather+0xae2>
						{
							ILI9341_FillRectangle(80, 82, 44, 18,BLACK);
 8002530:	2300      	movs	r3, #0
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2312      	movs	r3, #18
 8002536:	222c      	movs	r2, #44	@ 0x2c
 8002538:	2152      	movs	r1, #82	@ 0x52
 800253a:	2050      	movs	r0, #80	@ 0x50
 800253c:	f7ff f822 	bl	8001584 <ILI9341_FillRectangle>
							timeCurrent = count - 12;
 8002540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002542:	3b0c      	subs	r3, #12
 8002544:	61bb      	str	r3, [r7, #24]
							sprintf(rx_buffer, "%dPM", timeCurrent);
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4949      	ldr	r1, [pc, #292]	@ (8002670 <DisplayWeather+0xbe4>)
 800254a:	4842      	ldr	r0, [pc, #264]	@ (8002654 <DisplayWeather+0xbc8>)
 800254c:	f005 fe5c 	bl	8008208 <siprintf>
							ILI9341_WriteString(80, 82, rx_buffer, Font_11x18, ILI9341_COLOR565(248, 248, 255), BLACK);
 8002550:	4b3e      	ldr	r3, [pc, #248]	@ (800264c <DisplayWeather+0xbc0>)
 8002552:	2200      	movs	r2, #0
 8002554:	9202      	str	r2, [sp, #8]
 8002556:	f64f 72df 	movw	r2, #65503	@ 0xffdf
 800255a:	9201      	str	r2, [sp, #4]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	9200      	str	r2, [sp, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a3c      	ldr	r2, [pc, #240]	@ (8002654 <DisplayWeather+0xbc8>)
 8002564:	2152      	movs	r1, #82	@ 0x52
 8002566:	2050      	movs	r0, #80	@ 0x50
 8002568:	f7fe ffb8 	bl	80014dc <ILI9341_WriteString>
 800256c:	e012      	b.n	8002594 <DisplayWeather+0xb08>
						}
						else{
							sprintf(rx_buffer, "%dAM", count);
 800256e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002570:	4940      	ldr	r1, [pc, #256]	@ (8002674 <DisplayWeather+0xbe8>)
 8002572:	4838      	ldr	r0, [pc, #224]	@ (8002654 <DisplayWeather+0xbc8>)
 8002574:	f005 fe48 	bl	8008208 <siprintf>
							ILI9341_WriteString(80, 82, rx_buffer, Font_11x18, ILI9341_COLOR565(248, 248, 255), BLACK);
 8002578:	4b34      	ldr	r3, [pc, #208]	@ (800264c <DisplayWeather+0xbc0>)
 800257a:	2200      	movs	r2, #0
 800257c:	9202      	str	r2, [sp, #8]
 800257e:	f64f 72df 	movw	r2, #65503	@ 0xffdf
 8002582:	9201      	str	r2, [sp, #4]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	9200      	str	r2, [sp, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a32      	ldr	r2, [pc, #200]	@ (8002654 <DisplayWeather+0xbc8>)
 800258c:	2152      	movs	r1, #82	@ 0x52
 800258e:	2050      	movs	r0, #80	@ 0x50
 8002590:	f7fe ffa4 	bl	80014dc <ILI9341_WriteString>
						}
						sprintf(rx_buffer, "%d", data_receive.tempCurrent[t][count]);
 8002594:	4927      	ldr	r1, [pc, #156]	@ (8002634 <DisplayWeather+0xba8>)
 8002596:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025a2:	4413      	add	r3, r2
 80025a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025a8:	461a      	mov	r2, r3
 80025aa:	4929      	ldr	r1, [pc, #164]	@ (8002650 <DisplayWeather+0xbc4>)
 80025ac:	4829      	ldr	r0, [pc, #164]	@ (8002654 <DisplayWeather+0xbc8>)
 80025ae:	f005 fe2b 	bl	8008208 <siprintf>
						ILI9341_WriteString(135, 82, rx_buffer, Font_7x10, WHITE, BLACK);
 80025b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002660 <DisplayWeather+0xbd4>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	9202      	str	r2, [sp, #8]
 80025b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025bc:	9201      	str	r2, [sp, #4]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	9200      	str	r2, [sp, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a23      	ldr	r2, [pc, #140]	@ (8002654 <DisplayWeather+0xbc8>)
 80025c6:	2152      	movs	r1, #82	@ 0x52
 80025c8:	2087      	movs	r0, #135	@ 0x87
 80025ca:	f7fe ff87 	bl	80014dc <ILI9341_WriteString>
						sprintf(rx_letter, "%s", "o");
 80025ce:	4a22      	ldr	r2, [pc, #136]	@ (8002658 <DisplayWeather+0xbcc>)
 80025d0:	491c      	ldr	r1, [pc, #112]	@ (8002644 <DisplayWeather+0xbb8>)
 80025d2:	4822      	ldr	r0, [pc, #136]	@ (800265c <DisplayWeather+0xbd0>)
 80025d4:	f005 fe18 	bl	8008208 <siprintf>
						ILI9341_WriteString(150, 79, rx_letter, Font_7x10, WHITE, BLACK);
 80025d8:	4b21      	ldr	r3, [pc, #132]	@ (8002660 <DisplayWeather+0xbd4>)
 80025da:	2200      	movs	r2, #0
 80025dc:	9202      	str	r2, [sp, #8]
 80025de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025e2:	9201      	str	r2, [sp, #4]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	9200      	str	r2, [sp, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1c      	ldr	r2, [pc, #112]	@ (800265c <DisplayWeather+0xbd0>)
 80025ec:	214f      	movs	r1, #79	@ 0x4f
 80025ee:	2096      	movs	r0, #150	@ 0x96
 80025f0:	f7fe ff74 	bl	80014dc <ILI9341_WriteString>

						sprintf(rx_buffer, "%d%%", data_receive.humidi[t][count]);
 80025f4:	490f      	ldr	r1, [pc, #60]	@ (8002634 <DisplayWeather+0xba8>)
 80025f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002602:	4413      	add	r3, r2
 8002604:	33bc      	adds	r3, #188	@ 0xbc
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	461a      	mov	r2, r3
 800260e:	4915      	ldr	r1, [pc, #84]	@ (8002664 <DisplayWeather+0xbd8>)
 8002610:	4810      	ldr	r0, [pc, #64]	@ (8002654 <DisplayWeather+0xbc8>)
 8002612:	f005 fdf9 	bl	8008208 <siprintf>
						ILI9341_WriteString(135, 93, rx_buffer, Font_7x10, WHITE, BLACK);
 8002616:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <DisplayWeather+0xbd4>)
 8002618:	2200      	movs	r2, #0
 800261a:	9202      	str	r2, [sp, #8]
 800261c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002620:	9201      	str	r2, [sp, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	9200      	str	r2, [sp, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0a      	ldr	r2, [pc, #40]	@ (8002654 <DisplayWeather+0xbc8>)
 800262a:	215d      	movs	r1, #93	@ 0x5d
 800262c:	2087      	movs	r0, #135	@ 0x87
 800262e:	f7fe ff55 	bl	80014dc <ILI9341_WriteString>
 8002632:	e125      	b.n	8002880 <DisplayWeather+0xdf4>
 8002634:	20000260 	.word	0x20000260
 8002638:	20001b20 	.word	0x20001b20
 800263c:	92492493 	.word	0x92492493
 8002640:	2000004c 	.word	0x2000004c
 8002644:	0800a534 	.word	0x0800a534
 8002648:	20001720 	.word	0x20001720
 800264c:	2000000c 	.word	0x2000000c
 8002650:	0800a53c 	.word	0x0800a53c
 8002654:	20000f20 	.word	0x20000f20
 8002658:	0800a540 	.word	0x0800a540
 800265c:	20001320 	.word	0x20001320
 8002660:	20000004 	.word	0x20000004
 8002664:	0800a544 	.word	0x0800a544
 8002668:	0800cd9c 	.word	0x0800cd9c
 800266c:	0800d59c 	.word	0x0800d59c
 8002670:	0800a54c 	.word	0x0800a54c
 8002674:	0800a554 	.word	0x0800a554

					}

					else{
						sprintf(rx_Day, "%s",day_char[currentDay]);
 8002678:	4a9f      	ldr	r2, [pc, #636]	@ (80028f8 <DisplayWeather+0xe6c>)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	461a      	mov	r2, r3
 8002682:	499e      	ldr	r1, [pc, #632]	@ (80028fc <DisplayWeather+0xe70>)
 8002684:	489e      	ldr	r0, [pc, #632]	@ (8002900 <DisplayWeather+0xe74>)
 8002686:	f005 fdbf 	bl	8008208 <siprintf>
						ILI9341_WriteString(20,30*t + 97 , rx_Day, Font_7x10, WHITE, BLACK);
 800268a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800268c:	b29b      	uxth	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	0112      	lsls	r2, r2, #4
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	b29b      	uxth	r3, r3
 8002698:	3361      	adds	r3, #97	@ 0x61
 800269a:	b299      	uxth	r1, r3
 800269c:	4b99      	ldr	r3, [pc, #612]	@ (8002904 <DisplayWeather+0xe78>)
 800269e:	2200      	movs	r2, #0
 80026a0:	9202      	str	r2, [sp, #8]
 80026a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026a6:	9201      	str	r2, [sp, #4]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	9200      	str	r2, [sp, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a94      	ldr	r2, [pc, #592]	@ (8002900 <DisplayWeather+0xe74>)
 80026b0:	2014      	movs	r0, #20
 80026b2:	f7fe ff13 	bl	80014dc <ILI9341_WriteString>

						sprintf(rx_buffer, "%d",data_receive.tempMax[t]);
 80026b6:	4a94      	ldr	r2, [pc, #592]	@ (8002908 <DisplayWeather+0xe7c>)
 80026b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ba:	33ae      	adds	r3, #174	@ 0xae
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4991      	ldr	r1, [pc, #580]	@ (800290c <DisplayWeather+0xe80>)
 80026c6:	4892      	ldr	r0, [pc, #584]	@ (8002910 <DisplayWeather+0xe84>)
 80026c8:	f005 fd9e 	bl	8008208 <siprintf>
						ILI9341_WriteString(75, 30*t + 97, rx_buffer, Font_7x10, WHITE, BLACK);
 80026cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	461a      	mov	r2, r3
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3361      	adds	r3, #97	@ 0x61
 80026dc:	b299      	uxth	r1, r3
 80026de:	4b89      	ldr	r3, [pc, #548]	@ (8002904 <DisplayWeather+0xe78>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	9202      	str	r2, [sp, #8]
 80026e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026e8:	9201      	str	r2, [sp, #4]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	9200      	str	r2, [sp, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a87      	ldr	r2, [pc, #540]	@ (8002910 <DisplayWeather+0xe84>)
 80026f2:	204b      	movs	r0, #75	@ 0x4b
 80026f4:	f7fe fef2 	bl	80014dc <ILI9341_WriteString>
						sprintf(rx_letter, "%s","o");
 80026f8:	4a86      	ldr	r2, [pc, #536]	@ (8002914 <DisplayWeather+0xe88>)
 80026fa:	4980      	ldr	r1, [pc, #512]	@ (80028fc <DisplayWeather+0xe70>)
 80026fc:	4886      	ldr	r0, [pc, #536]	@ (8002918 <DisplayWeather+0xe8c>)
 80026fe:	f005 fd83 	bl	8008208 <siprintf>
						ILI9341_WriteString(90, 30*t + 93, rx_letter, Font_7x10, WHITE, BLACK);
 8002702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002704:	b29b      	uxth	r3, r3
 8002706:	461a      	mov	r2, r3
 8002708:	0112      	lsls	r2, r2, #4
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	b29b      	uxth	r3, r3
 8002710:	335d      	adds	r3, #93	@ 0x5d
 8002712:	b299      	uxth	r1, r3
 8002714:	4b7b      	ldr	r3, [pc, #492]	@ (8002904 <DisplayWeather+0xe78>)
 8002716:	2200      	movs	r2, #0
 8002718:	9202      	str	r2, [sp, #8]
 800271a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800271e:	9201      	str	r2, [sp, #4]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	9200      	str	r2, [sp, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a7c      	ldr	r2, [pc, #496]	@ (8002918 <DisplayWeather+0xe8c>)
 8002728:	205a      	movs	r0, #90	@ 0x5a
 800272a:	f7fe fed7 	bl	80014dc <ILI9341_WriteString>

						sprintf(rx_buffer, "%d",data_receive.tempMin[t]);
 800272e:	4a76      	ldr	r2, [pc, #472]	@ (8002908 <DisplayWeather+0xe7c>)
 8002730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002732:	33b6      	adds	r3, #182	@ 0xb6
 8002734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002738:	461a      	mov	r2, r3
 800273a:	4974      	ldr	r1, [pc, #464]	@ (800290c <DisplayWeather+0xe80>)
 800273c:	4874      	ldr	r0, [pc, #464]	@ (8002910 <DisplayWeather+0xe84>)
 800273e:	f005 fd63 	bl	8008208 <siprintf>
						ILI9341_WriteString(105, 30*t + 97, rx_buffer, Font_7x10, WHITE, BLACK);
 8002742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002744:	b29b      	uxth	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	0112      	lsls	r2, r2, #4
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	b29b      	uxth	r3, r3
 8002750:	3361      	adds	r3, #97	@ 0x61
 8002752:	b299      	uxth	r1, r3
 8002754:	4b6b      	ldr	r3, [pc, #428]	@ (8002904 <DisplayWeather+0xe78>)
 8002756:	2200      	movs	r2, #0
 8002758:	9202      	str	r2, [sp, #8]
 800275a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800275e:	9201      	str	r2, [sp, #4]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	9200      	str	r2, [sp, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a6a      	ldr	r2, [pc, #424]	@ (8002910 <DisplayWeather+0xe84>)
 8002768:	2069      	movs	r0, #105	@ 0x69
 800276a:	f7fe feb7 	bl	80014dc <ILI9341_WriteString>
						sprintf(rx_letter, "%s","o");
 800276e:	4a69      	ldr	r2, [pc, #420]	@ (8002914 <DisplayWeather+0xe88>)
 8002770:	4962      	ldr	r1, [pc, #392]	@ (80028fc <DisplayWeather+0xe70>)
 8002772:	4869      	ldr	r0, [pc, #420]	@ (8002918 <DisplayWeather+0xe8c>)
 8002774:	f005 fd48 	bl	8008208 <siprintf>
						ILI9341_WriteString(120, 30*t + 93, rx_letter, Font_7x10, WHITE, BLACK);
 8002778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	b29b      	uxth	r3, r3
 8002786:	335d      	adds	r3, #93	@ 0x5d
 8002788:	b299      	uxth	r1, r3
 800278a:	4b5e      	ldr	r3, [pc, #376]	@ (8002904 <DisplayWeather+0xe78>)
 800278c:	2200      	movs	r2, #0
 800278e:	9202      	str	r2, [sp, #8]
 8002790:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002794:	9201      	str	r2, [sp, #4]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	9200      	str	r2, [sp, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a5e      	ldr	r2, [pc, #376]	@ (8002918 <DisplayWeather+0xe8c>)
 800279e:	2078      	movs	r0, #120	@ 0x78
 80027a0:	f7fe fe9c 	bl	80014dc <ILI9341_WriteString>

						sprintf(rx_buffer, "%d%%",data_receive.humidi[t][n]);
 80027a4:	4958      	ldr	r1, [pc, #352]	@ (8002908 <DisplayWeather+0xe7c>)
 80027a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	6a3a      	ldr	r2, [r7, #32]
 80027b2:	4413      	add	r3, r2
 80027b4:	33bc      	adds	r3, #188	@ 0xbc
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	461a      	mov	r2, r3
 80027be:	4957      	ldr	r1, [pc, #348]	@ (800291c <DisplayWeather+0xe90>)
 80027c0:	4853      	ldr	r0, [pc, #332]	@ (8002910 <DisplayWeather+0xe84>)
 80027c2:	f005 fd21 	bl	8008208 <siprintf>
						ILI9341_WriteString(179, 30*t + 97, rx_buffer, Font_7x10, WHITE, BLACK);
 80027c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	0112      	lsls	r2, r2, #4
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3361      	adds	r3, #97	@ 0x61
 80027d6:	b299      	uxth	r1, r3
 80027d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002904 <DisplayWeather+0xe78>)
 80027da:	2200      	movs	r2, #0
 80027dc:	9202      	str	r2, [sp, #8]
 80027de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027e2:	9201      	str	r2, [sp, #4]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	9200      	str	r2, [sp, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a49      	ldr	r2, [pc, #292]	@ (8002910 <DisplayWeather+0xe84>)
 80027ec:	20b3      	movs	r0, #179	@ 0xb3
 80027ee:	f7fe fe75 	bl	80014dc <ILI9341_WriteString>
						if(data_receive.Rain[t][n] == 0){
 80027f2:	4945      	ldr	r1, [pc, #276]	@ (8002908 <DisplayWeather+0xe7c>)
 80027f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	6a3a      	ldr	r2, [r7, #32]
 8002800:	4413      	add	r3, r2
 8002802:	33b3      	adds	r3, #179	@ 0xb3
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	440b      	add	r3, r1
 8002808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	f7fe f8c8 	bl	80009a8 <__aeabi_dcmpeq>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d010      	beq.n	8002840 <DisplayWeather+0xdb4>
							ILI9341_DrawImage(55, 30*t + 92, 16, 16, Image_Sun_16);
 800281e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002820:	b29b      	uxth	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	0112      	lsls	r2, r2, #4
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	b29b      	uxth	r3, r3
 800282c:	335c      	adds	r3, #92	@ 0x5c
 800282e:	b299      	uxth	r1, r3
 8002830:	4b3b      	ldr	r3, [pc, #236]	@ (8002920 <DisplayWeather+0xe94>)
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2310      	movs	r3, #16
 8002836:	2210      	movs	r2, #16
 8002838:	2037      	movs	r0, #55	@ 0x37
 800283a:	f7fe ff11 	bl	8001660 <ILI9341_DrawImage>
 800283e:	e00f      	b.n	8002860 <DisplayWeather+0xdd4>
						}
						else{
							ILI9341_DrawImage(55, 30*t + 92, 16, 16, Image_rain_16);
 8002840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	0112      	lsls	r2, r2, #4
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	b29b      	uxth	r3, r3
 800284e:	335c      	adds	r3, #92	@ 0x5c
 8002850:	b299      	uxth	r1, r3
 8002852:	4b34      	ldr	r3, [pc, #208]	@ (8002924 <DisplayWeather+0xe98>)
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2310      	movs	r3, #16
 8002858:	2210      	movs	r2, #16
 800285a:	2037      	movs	r0, #55	@ 0x37
 800285c:	f7fe ff00 	bl	8001660 <ILI9341_DrawImage>
						}
						ILI9341_DrawImage(155, 30*t + 92, 16, 16, Image_humidity_16);
 8002860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002862:	b29b      	uxth	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	0112      	lsls	r2, r2, #4
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	b29b      	uxth	r3, r3
 800286e:	335c      	adds	r3, #92	@ 0x5c
 8002870:	b299      	uxth	r1, r3
 8002872:	4b2d      	ldr	r3, [pc, #180]	@ (8002928 <DisplayWeather+0xe9c>)
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2310      	movs	r3, #16
 8002878:	2210      	movs	r2, #16
 800287a:	209b      	movs	r0, #155	@ 0x9b
 800287c:	f7fe fef0 	bl	8001660 <ILI9341_DrawImage>
				for(int t = 0;t < 7;t++){
 8002880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002882:	3301      	adds	r3, #1
 8002884:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002888:	2b06      	cmp	r3, #6
 800288a:	f77f ada9 	ble.w	80023e0 <DisplayWeather+0x954>
					}
				}
				HAL_Delay(2000);
 800288e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002892:	f001 fc3d 	bl	8004110 <HAL_Delay>
				if (ILI9341_TouchGetCoordinates(&x, &y)) {
 8002896:	1d3a      	adds	r2, r7, #4
 8002898:	1dbb      	adds	r3, r7, #6
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f001 fafb 	bl	8003e98 <ILI9341_TouchGetCoordinates>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d057      	beq.n	8002958 <DisplayWeather+0xecc>
					if(x >= 4 && x <= 20 && y >= 284 && y <= 320){
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d90f      	bls.n	80028ce <DisplayWeather+0xe42>
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	2b14      	cmp	r3, #20
 80028b2:	d80c      	bhi.n	80028ce <DisplayWeather+0xe42>
 80028b4:	88bb      	ldrh	r3, [r7, #4]
 80028b6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80028ba:	d308      	bcc.n	80028ce <DisplayWeather+0xe42>
 80028bc:	88bb      	ldrh	r3, [r7, #4]
 80028be:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80028c2:	d804      	bhi.n	80028ce <DisplayWeather+0xe42>
						state = 2;
 80028c4:	4b19      	ldr	r3, [pc, #100]	@ (800292c <DisplayWeather+0xea0>)
 80028c6:	2202      	movs	r2, #2
 80028c8:	601a      	str	r2, [r3, #0]
						while (HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY) {
							// Chờ UART truyền xong
						__HAL_UART_FLUSH_DRREGISTER(&huart1); // Xóa thanh ghi dữ liệu UART
						HoChiMinh.flagSend = 0;
						HAL_UART_Transmit(&huart1, (uint8_t *)&HoChiMinh, sizeof(HoChiMinh),1000);*/
						return;
 80028ca:	f000 bd66 	b.w	800339a <DisplayWeather+0x190e>
						 }
					//next
					else if (x >= 64 && x <= 83 && y >= 269 && y <= 318) {
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80028d2:	d92d      	bls.n	8002930 <DisplayWeather+0xea4>
 80028d4:	88fb      	ldrh	r3, [r7, #6]
 80028d6:	2b53      	cmp	r3, #83	@ 0x53
 80028d8:	d82a      	bhi.n	8002930 <DisplayWeather+0xea4>
 80028da:	88bb      	ldrh	r3, [r7, #4]
 80028dc:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 80028e0:	d926      	bls.n	8002930 <DisplayWeather+0xea4>
 80028e2:	88bb      	ldrh	r3, [r7, #4]
 80028e4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80028e8:	d822      	bhi.n	8002930 <DisplayWeather+0xea4>
						if (count + 1 <= 24) {
 80028ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ec:	2b17      	cmp	r3, #23
 80028ee:	dc33      	bgt.n	8002958 <DisplayWeather+0xecc>
							count++;
 80028f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f2:	3301      	adds	r3, #1
 80028f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
						if (count + 1 <= 24) {
 80028f6:	e02f      	b.n	8002958 <DisplayWeather+0xecc>
 80028f8:	2000004c 	.word	0x2000004c
 80028fc:	0800a534 	.word	0x0800a534
 8002900:	20001720 	.word	0x20001720
 8002904:	20000004 	.word	0x20000004
 8002908:	20000260 	.word	0x20000260
 800290c:	0800a53c 	.word	0x0800a53c
 8002910:	20000f20 	.word	0x20000f20
 8002914:	0800a540 	.word	0x0800a540
 8002918:	20001320 	.word	0x20001320
 800291c:	0800a544 	.word	0x0800a544
 8002920:	0800ef9c 	.word	0x0800ef9c
 8002924:	0800f19c 	.word	0x0800f19c
 8002928:	0800ed9c 	.word	0x0800ed9c
 800292c:	20001b24 	.word	0x20001b24
						}
					}
					// back
					else if (x >= 64 && x <= 80 && y >= 49 && y <= 68) {
 8002930:	88fb      	ldrh	r3, [r7, #6]
 8002932:	2b3f      	cmp	r3, #63	@ 0x3f
 8002934:	d910      	bls.n	8002958 <DisplayWeather+0xecc>
 8002936:	88fb      	ldrh	r3, [r7, #6]
 8002938:	2b50      	cmp	r3, #80	@ 0x50
 800293a:	d80d      	bhi.n	8002958 <DisplayWeather+0xecc>
 800293c:	88bb      	ldrh	r3, [r7, #4]
 800293e:	2b30      	cmp	r3, #48	@ 0x30
 8002940:	d90a      	bls.n	8002958 <DisplayWeather+0xecc>
 8002942:	88bb      	ldrh	r3, [r7, #4]
 8002944:	2b44      	cmp	r3, #68	@ 0x44
 8002946:	d807      	bhi.n	8002958 <DisplayWeather+0xecc>
						if (count - 1 > n) {
 8002948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800294a:	3b01      	subs	r3, #1
 800294c:	6a3a      	ldr	r2, [r7, #32]
 800294e:	429a      	cmp	r2, r3
 8002950:	da02      	bge.n	8002958 <DisplayWeather+0xecc>
							count --;
 8002952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002954:	3b01      	subs	r3, #1
 8002956:	63fb      	str	r3, [r7, #60]	@ 0x3c
			while(state != 2){
 8002958:	4b6b      	ldr	r3, [pc, #428]	@ (8002b08 <DisplayWeather+0x107c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b02      	cmp	r3, #2
 800295e:	f47f ad0d 	bne.w	800237c <DisplayWeather+0x8f0>
		{
 8002962:	f000 bd1a 	b.w	800339a <DisplayWeather+0x190e>
					}
				}
			}
		}

		else if((x >= 116 && x <= 185) && (y >= 9 && y <= 318))
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	2b73      	cmp	r3, #115	@ 0x73
 800296a:	f240 83ad 	bls.w	80030c8 <DisplayWeather+0x163c>
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	2bb9      	cmp	r3, #185	@ 0xb9
 8002972:	f200 83a9 	bhi.w	80030c8 <DisplayWeather+0x163c>
 8002976:	88bb      	ldrh	r3, [r7, #4]
 8002978:	2b08      	cmp	r3, #8
 800297a:	f240 83a5 	bls.w	80030c8 <DisplayWeather+0x163c>
 800297e:	88bb      	ldrh	r3, [r7, #4]
 8002980:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002984:	f200 83a0 	bhi.w	80030c8 <DisplayWeather+0x163c>
		{
			HaNoi.flagSend = 1;
 8002988:	4b60      	ldr	r3, [pc, #384]	@ (8002b0c <DisplayWeather+0x1080>)
 800298a:	2201      	movs	r2, #1
 800298c:	60da      	str	r2, [r3, #12]
			HAL_UART_Transmit(&huart1, (uint8_t *)&HaNoi, sizeof(HaNoi),1000);
 800298e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002992:	2210      	movs	r2, #16
 8002994:	495d      	ldr	r1, [pc, #372]	@ (8002b0c <DisplayWeather+0x1080>)
 8002996:	485e      	ldr	r0, [pc, #376]	@ (8002b10 <DisplayWeather+0x1084>)
 8002998:	f004 f8fe 	bl	8006b98 <HAL_UART_Transmit>
			HaNoi.flagSend = 0;
 800299c:	4b5b      	ldr	r3, [pc, #364]	@ (8002b0c <DisplayWeather+0x1080>)
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
			HAL_UART_Transmit(&huart1, (uint8_t *)&HaNoi, sizeof(HaNoi),1000);
 80029a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029a6:	2210      	movs	r2, #16
 80029a8:	4958      	ldr	r1, [pc, #352]	@ (8002b0c <DisplayWeather+0x1080>)
 80029aa:	4859      	ldr	r0, [pc, #356]	@ (8002b10 <DisplayWeather+0x1084>)
 80029ac:	f004 f8f4 	bl	8006b98 <HAL_UART_Transmit>
			while(data_receive.receiveNumber != 3 || data_receive.receiveNumber == 2 || data_receive.receiveNumber == 1){
 80029b0:	e026      	b.n	8002a00 <DisplayWeather+0xf74>
				HaNoi.flagSend = 1;
 80029b2:	4b56      	ldr	r3, [pc, #344]	@ (8002b0c <DisplayWeather+0x1080>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	60da      	str	r2, [r3, #12]
				HAL_UART_Transmit(&huart1, (uint8_t *)&HaNoi, sizeof(HaNoi),1000);
 80029b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029bc:	2210      	movs	r2, #16
 80029be:	4953      	ldr	r1, [pc, #332]	@ (8002b0c <DisplayWeather+0x1080>)
 80029c0:	4853      	ldr	r0, [pc, #332]	@ (8002b10 <DisplayWeather+0x1084>)
 80029c2:	f004 f8e9 	bl	8006b98 <HAL_UART_Transmit>
				HaNoi.flagSend = 0;
 80029c6:	4b51      	ldr	r3, [pc, #324]	@ (8002b0c <DisplayWeather+0x1080>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	60da      	str	r2, [r3, #12]
				HAL_UART_Transmit(&huart1, (uint8_t *)&HaNoi, sizeof(HaNoi),1000);
 80029cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029d0:	2210      	movs	r2, #16
 80029d2:	494e      	ldr	r1, [pc, #312]	@ (8002b0c <DisplayWeather+0x1080>)
 80029d4:	484e      	ldr	r0, [pc, #312]	@ (8002b10 <DisplayWeather+0x1084>)
 80029d6:	f004 f8df 	bl	8006b98 <HAL_UART_Transmit>
				ILI9341_FillScreen(ILI9341_COLOR565(0, 204, 204));
 80029da:	f240 6079 	movw	r0, #1657	@ 0x679
 80029de:	f7fe fe25 	bl	800162c <ILI9341_FillScreen>
				ILI9341_WriteString(40, 147, "Loading...", Font_16x26, ILI9341_COLOR565(102, 51, 255),ILI9341_COLOR565(0, 204, 204) );
 80029e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002b14 <DisplayWeather+0x1088>)
 80029e4:	f240 6279 	movw	r2, #1657	@ 0x679
 80029e8:	9202      	str	r2, [sp, #8]
 80029ea:	f246 129f 	movw	r2, #24991	@ 0x619f
 80029ee:	9201      	str	r2, [sp, #4]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	9200      	str	r2, [sp, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a48      	ldr	r2, [pc, #288]	@ (8002b18 <DisplayWeather+0x108c>)
 80029f8:	2193      	movs	r1, #147	@ 0x93
 80029fa:	2028      	movs	r0, #40	@ 0x28
 80029fc:	f7fe fd6e 	bl	80014dc <ILI9341_WriteString>
			while(data_receive.receiveNumber != 3 || data_receive.receiveNumber == 2 || data_receive.receiveNumber == 1){
 8002a00:	4b46      	ldr	r3, [pc, #280]	@ (8002b1c <DisplayWeather+0x1090>)
 8002a02:	f8d3 3adc 	ldr.w	r3, [r3, #2780]	@ 0xadc
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d1d3      	bne.n	80029b2 <DisplayWeather+0xf26>
 8002a0a:	4b44      	ldr	r3, [pc, #272]	@ (8002b1c <DisplayWeather+0x1090>)
 8002a0c:	f8d3 3adc 	ldr.w	r3, [r3, #2780]	@ 0xadc
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d0ce      	beq.n	80029b2 <DisplayWeather+0xf26>
 8002a14:	4b41      	ldr	r3, [pc, #260]	@ (8002b1c <DisplayWeather+0x1090>)
 8002a16:	f8d3 3adc 	ldr.w	r3, [r3, #2780]	@ 0xadc
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d0c9      	beq.n	80029b2 <DisplayWeather+0xf26>
			}
			ILI9341_FillScreen(BLACK);
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fe fe04 	bl	800162c <ILI9341_FillScreen>
			ILI9341_WriteString(87, 1, "Ha Noi", Font_11x18, ILI9341_COLOR565(255, 51, 0), BLACK);
 8002a24:	4b3e      	ldr	r3, [pc, #248]	@ (8002b20 <DisplayWeather+0x1094>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	9202      	str	r2, [sp, #8]
 8002a2a:	f64f 1280 	movw	r2, #63872	@ 0xf980
 8002a2e:	9201      	str	r2, [sp, #4]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	9200      	str	r2, [sp, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a3b      	ldr	r2, [pc, #236]	@ (8002b24 <DisplayWeather+0x1098>)
 8002a38:	2101      	movs	r1, #1
 8002a3a:	2057      	movs	r0, #87	@ 0x57
 8002a3c:	f7fe fd4e 	bl	80014dc <ILI9341_WriteString>
			ILI9341_DrawImage(206, 1, 24, 24, button_back_Image);
 8002a40:	4b39      	ldr	r3, [pc, #228]	@ (8002b28 <DisplayWeather+0x109c>)
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2318      	movs	r3, #24
 8002a46:	2218      	movs	r2, #24
 8002a48:	2101      	movs	r1, #1
 8002a4a:	20ce      	movs	r0, #206	@ 0xce
 8002a4c:	f7fe fe08 	bl	8001660 <ILI9341_DrawImage>

			ILI9341_FillRectangle(38, 80, 22, 22, ILI9341_COLOR565(64, 160, 240));
 8002a50:	f244 531e 	movw	r3, #17694	@ 0x451e
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2316      	movs	r3, #22
 8002a58:	2216      	movs	r2, #22
 8002a5a:	2150      	movs	r1, #80	@ 0x50
 8002a5c:	2026      	movs	r0, #38	@ 0x26
 8002a5e:	f7fe fd91 	bl	8001584 <ILI9341_FillRectangle>
			sprintf(rx_letter, "%s","<");
 8002a62:	4a32      	ldr	r2, [pc, #200]	@ (8002b2c <DisplayWeather+0x10a0>)
 8002a64:	4932      	ldr	r1, [pc, #200]	@ (8002b30 <DisplayWeather+0x10a4>)
 8002a66:	4833      	ldr	r0, [pc, #204]	@ (8002b34 <DisplayWeather+0x10a8>)
 8002a68:	f005 fbce 	bl	8008208 <siprintf>
			ILI9341_WriteString(43, 82, rx_letter, Font_11x18, WHITE, ILI9341_COLOR565(64, 160, 240));
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b20 <DisplayWeather+0x1094>)
 8002a6e:	f244 521e 	movw	r2, #17694	@ 0x451e
 8002a72:	9202      	str	r2, [sp, #8]
 8002a74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a78:	9201      	str	r2, [sp, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	9200      	str	r2, [sp, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a2c      	ldr	r2, [pc, #176]	@ (8002b34 <DisplayWeather+0x10a8>)
 8002a82:	2152      	movs	r1, #82	@ 0x52
 8002a84:	202b      	movs	r0, #43	@ 0x2b
 8002a86:	f7fe fd29 	bl	80014dc <ILI9341_WriteString>
			ILI9341_FillRectangle(187, 80, 22, 22, ILI9341_COLOR565(64, 160, 240));
 8002a8a:	f244 531e 	movw	r3, #17694	@ 0x451e
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2316      	movs	r3, #22
 8002a92:	2216      	movs	r2, #22
 8002a94:	2150      	movs	r1, #80	@ 0x50
 8002a96:	20bb      	movs	r0, #187	@ 0xbb
 8002a98:	f7fe fd74 	bl	8001584 <ILI9341_FillRectangle>
			sprintf(rx_letter, "%s",">");
 8002a9c:	4a26      	ldr	r2, [pc, #152]	@ (8002b38 <DisplayWeather+0x10ac>)
 8002a9e:	4924      	ldr	r1, [pc, #144]	@ (8002b30 <DisplayWeather+0x10a4>)
 8002aa0:	4824      	ldr	r0, [pc, #144]	@ (8002b34 <DisplayWeather+0x10a8>)
 8002aa2:	f005 fbb1 	bl	8008208 <siprintf>
			ILI9341_WriteString(194, 82, rx_letter, Font_11x18, WHITE, ILI9341_COLOR565(64, 160, 240));
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b20 <DisplayWeather+0x1094>)
 8002aa8:	f244 521e 	movw	r2, #17694	@ 0x451e
 8002aac:	9202      	str	r2, [sp, #8]
 8002aae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ab2:	9201      	str	r2, [sp, #4]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	9200      	str	r2, [sp, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1e      	ldr	r2, [pc, #120]	@ (8002b34 <DisplayWeather+0x10a8>)
 8002abc:	2152      	movs	r1, #82	@ 0x52
 8002abe:	20c2      	movs	r0, #194	@ 0xc2
 8002ac0:	f7fe fd0c 	bl	80014dc <ILI9341_WriteString>

			int count = data_receive.gioHT + 1;
 8002ac4:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <DisplayWeather+0x1090>)
 8002ac6:	f8d3 3ad8 	ldr.w	r3, [r3, #2776]	@ 0xad8
 8002aca:	3301      	adds	r3, #1
 8002acc:	637b      	str	r3, [r7, #52]	@ 0x34
			int timeCurrent;
			int n = data_receive.gioHT;
 8002ace:	4b13      	ldr	r3, [pc, #76]	@ (8002b1c <DisplayWeather+0x1090>)
 8002ad0:	f8d3 3ad8 	ldr.w	r3, [r3, #2776]	@ 0xad8
 8002ad4:	617b      	str	r3, [r7, #20]

			while(state != 3){
 8002ad6:	e2f1      	b.n	80030bc <DisplayWeather+0x1630>
				HaNoi.flagSend = 1;
 8002ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <DisplayWeather+0x1080>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	60da      	str	r2, [r3, #12]
				HAL_UART_Transmit(&huart1, (uint8_t *)&HaNoi, sizeof(HaNoi),1000);
 8002ade:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	4909      	ldr	r1, [pc, #36]	@ (8002b0c <DisplayWeather+0x1080>)
 8002ae6:	480a      	ldr	r0, [pc, #40]	@ (8002b10 <DisplayWeather+0x1084>)
 8002ae8:	f004 f856 	bl	8006b98 <HAL_UART_Transmit>
				HaNoi.flagSend = 0;
 8002aec:	4b07      	ldr	r3, [pc, #28]	@ (8002b0c <DisplayWeather+0x1080>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
				HAL_UART_Transmit(&huart1, (uint8_t *)&HaNoi, sizeof(HaNoi),1000);
 8002af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002af6:	2210      	movs	r2, #16
 8002af8:	4904      	ldr	r1, [pc, #16]	@ (8002b0c <DisplayWeather+0x1080>)
 8002afa:	4805      	ldr	r0, [pc, #20]	@ (8002b10 <DisplayWeather+0x1084>)
 8002afc:	f004 f84c 	bl	8006b98 <HAL_UART_Transmit>
				for(int t = 0;t < 7;t++){
 8002b00:	2300      	movs	r3, #0
 8002b02:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b04:	e271      	b.n	8002fea <DisplayWeather+0x155e>
 8002b06:	bf00      	nop
 8002b08:	20001b24 	.word	0x20001b24
 8002b0c:	2000003c 	.word	0x2000003c
 8002b10:	20000e98 	.word	0x20000e98
 8002b14:	20000014 	.word	0x20000014
 8002b18:	0800a524 	.word	0x0800a524
 8002b1c:	20000260 	.word	0x20000260
 8002b20:	2000000c 	.word	0x2000000c
 8002b24:	0800a504 	.word	0x0800a504
 8002b28:	0800f39c 	.word	0x0800f39c
 8002b2c:	0800a530 	.word	0x0800a530
 8002b30:	0800a534 	.word	0x0800a534
 8002b34:	20001320 	.word	0x20001320
 8002b38:	0800a538 	.word	0x0800a538
					int currentDay = (data_receive.numberDay[t] + i) % 7;
 8002b3c:	4a96      	ldr	r2, [pc, #600]	@ (8002d98 <DisplayWeather+0x130c>)
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	33a8      	adds	r3, #168	@ 0xa8
 8002b42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b46:	4b95      	ldr	r3, [pc, #596]	@ (8002d9c <DisplayWeather+0x1310>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	441a      	add	r2, r3
 8002b4c:	4b94      	ldr	r3, [pc, #592]	@ (8002da0 <DisplayWeather+0x1314>)
 8002b4e:	fb83 1302 	smull	r1, r3, r3, r2
 8002b52:	4413      	add	r3, r2
 8002b54:	1099      	asrs	r1, r3, #2
 8002b56:	17d3      	asrs	r3, r2, #31
 8002b58:	1ac9      	subs	r1, r1, r3
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	1a5b      	subs	r3, r3, r1
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	613b      	str	r3, [r7, #16]
					int n = data_receive.gioHT;
 8002b64:	4b8c      	ldr	r3, [pc, #560]	@ (8002d98 <DisplayWeather+0x130c>)
 8002b66:	f8d3 3ad8 	ldr.w	r3, [r3, #2776]	@ 0xad8
 8002b6a:	60fb      	str	r3, [r7, #12]
					if(t == 0){
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 8134 	bne.w	8002ddc <DisplayWeather+0x1350>
						sprintf(rx_Day, "%s",day_char[currentDay]);
 8002b74:	4a8b      	ldr	r2, [pc, #556]	@ (8002da4 <DisplayWeather+0x1318>)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	498a      	ldr	r1, [pc, #552]	@ (8002da8 <DisplayWeather+0x131c>)
 8002b80:	488a      	ldr	r0, [pc, #552]	@ (8002dac <DisplayWeather+0x1320>)
 8002b82:	f005 fb41 	bl	8008208 <siprintf>
						ILI9341_WriteString(5, 30, rx_Day, Font_11x18, WHITE, BLACK);
 8002b86:	4b8a      	ldr	r3, [pc, #552]	@ (8002db0 <DisplayWeather+0x1324>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	9202      	str	r2, [sp, #8]
 8002b8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b90:	9201      	str	r2, [sp, #4]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	9200      	str	r2, [sp, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a84      	ldr	r2, [pc, #528]	@ (8002dac <DisplayWeather+0x1320>)
 8002b9a:	211e      	movs	r1, #30
 8002b9c:	2005      	movs	r0, #5
 8002b9e:	f7fe fc9d 	bl	80014dc <ILI9341_WriteString>
						sprintf(rx_buffer, "%d",data_receive.tempCurrent[t][n]);
 8002ba2:	497d      	ldr	r1, [pc, #500]	@ (8002d98 <DisplayWeather+0x130c>)
 8002ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	497e      	ldr	r1, [pc, #504]	@ (8002db4 <DisplayWeather+0x1328>)
 8002bba:	487f      	ldr	r0, [pc, #508]	@ (8002db8 <DisplayWeather+0x132c>)
 8002bbc:	f005 fb24 	bl	8008208 <siprintf>
						ILI9341_WriteString(60, 30, rx_buffer, Font_11x18, WHITE, BLACK);
 8002bc0:	4b7b      	ldr	r3, [pc, #492]	@ (8002db0 <DisplayWeather+0x1324>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	9202      	str	r2, [sp, #8]
 8002bc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bca:	9201      	str	r2, [sp, #4]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	9200      	str	r2, [sp, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a79      	ldr	r2, [pc, #484]	@ (8002db8 <DisplayWeather+0x132c>)
 8002bd4:	211e      	movs	r1, #30
 8002bd6:	203c      	movs	r0, #60	@ 0x3c
 8002bd8:	f7fe fc80 	bl	80014dc <ILI9341_WriteString>
						sprintf(rx_letter, "%s","o");
 8002bdc:	4a77      	ldr	r2, [pc, #476]	@ (8002dbc <DisplayWeather+0x1330>)
 8002bde:	4972      	ldr	r1, [pc, #456]	@ (8002da8 <DisplayWeather+0x131c>)
 8002be0:	4877      	ldr	r0, [pc, #476]	@ (8002dc0 <DisplayWeather+0x1334>)
 8002be2:	f005 fb11 	bl	8008208 <siprintf>
						ILI9341_WriteString(83, 30, rx_letter, Font_7x10, WHITE, BLACK);
 8002be6:	4b77      	ldr	r3, [pc, #476]	@ (8002dc4 <DisplayWeather+0x1338>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	9202      	str	r2, [sp, #8]
 8002bec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bf0:	9201      	str	r2, [sp, #4]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	9200      	str	r2, [sp, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a71      	ldr	r2, [pc, #452]	@ (8002dc0 <DisplayWeather+0x1334>)
 8002bfa:	211e      	movs	r1, #30
 8002bfc:	2053      	movs	r0, #83	@ 0x53
 8002bfe:	f7fe fc6d 	bl	80014dc <ILI9341_WriteString>

						sprintf(rx_buffer, "%d%%",data_receive.humidi[t][n]);
 8002c02:	4965      	ldr	r1, [pc, #404]	@ (8002d98 <DisplayWeather+0x130c>)
 8002c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4413      	add	r3, r2
 8002c12:	33bc      	adds	r3, #188	@ 0xbc
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	496a      	ldr	r1, [pc, #424]	@ (8002dc8 <DisplayWeather+0x133c>)
 8002c1e:	4866      	ldr	r0, [pc, #408]	@ (8002db8 <DisplayWeather+0x132c>)
 8002c20:	f005 faf2 	bl	8008208 <siprintf>
						ILI9341_WriteString(60, 50, rx_buffer, Font_11x18, WHITE, BLACK);
 8002c24:	4b62      	ldr	r3, [pc, #392]	@ (8002db0 <DisplayWeather+0x1324>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	9202      	str	r2, [sp, #8]
 8002c2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c2e:	9201      	str	r2, [sp, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	9200      	str	r2, [sp, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a60      	ldr	r2, [pc, #384]	@ (8002db8 <DisplayWeather+0x132c>)
 8002c38:	2132      	movs	r1, #50	@ 0x32
 8002c3a:	203c      	movs	r0, #60	@ 0x3c
 8002c3c:	f7fe fc4e 	bl	80014dc <ILI9341_WriteString>
						if(data_receive.Rain[t][n] == 0){
 8002c40:	4955      	ldr	r1, [pc, #340]	@ (8002d98 <DisplayWeather+0x130c>)
 8002c42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	33b3      	adds	r3, #179	@ 0xb3
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	f7fd fea1 	bl	80009a8 <__aeabi_dcmpeq>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <DisplayWeather+0x11f2>
							ILI9341_DrawImage(134, 30, 32, 32, Image_Sun);
 8002c6c:	4b57      	ldr	r3, [pc, #348]	@ (8002dcc <DisplayWeather+0x1340>)
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	2320      	movs	r3, #32
 8002c72:	2220      	movs	r2, #32
 8002c74:	211e      	movs	r1, #30
 8002c76:	2086      	movs	r0, #134	@ 0x86
 8002c78:	f7fe fcf2 	bl	8001660 <ILI9341_DrawImage>
 8002c7c:	e007      	b.n	8002c8e <DisplayWeather+0x1202>
							}
						else{
							ILI9341_DrawImage(134, 30, 32, 32, Image_Rain);
 8002c7e:	4b54      	ldr	r3, [pc, #336]	@ (8002dd0 <DisplayWeather+0x1344>)
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	2320      	movs	r3, #32
 8002c84:	2220      	movs	r2, #32
 8002c86:	211e      	movs	r1, #30
 8002c88:	2086      	movs	r0, #134	@ 0x86
 8002c8a:	f7fe fce9 	bl	8001660 <ILI9341_DrawImage>
						}

						// next current hour
						if(count > 12)
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	dd1e      	ble.n	8002cd2 <DisplayWeather+0x1246>
						{
							ILI9341_FillRectangle(80, 82, 44, 18,BLACK);
 8002c94:	2300      	movs	r3, #0
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	2312      	movs	r3, #18
 8002c9a:	222c      	movs	r2, #44	@ 0x2c
 8002c9c:	2152      	movs	r1, #82	@ 0x52
 8002c9e:	2050      	movs	r0, #80	@ 0x50
 8002ca0:	f7fe fc70 	bl	8001584 <ILI9341_FillRectangle>
							timeCurrent = count - 12;
 8002ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca6:	3b0c      	subs	r3, #12
 8002ca8:	60bb      	str	r3, [r7, #8]
							sprintf(rx_buffer, "%dPM", timeCurrent);
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	4949      	ldr	r1, [pc, #292]	@ (8002dd4 <DisplayWeather+0x1348>)
 8002cae:	4842      	ldr	r0, [pc, #264]	@ (8002db8 <DisplayWeather+0x132c>)
 8002cb0:	f005 faaa 	bl	8008208 <siprintf>
							ILI9341_WriteString(80, 82, rx_buffer, Font_11x18, ILI9341_COLOR565(248, 248, 255), BLACK);
 8002cb4:	4b3e      	ldr	r3, [pc, #248]	@ (8002db0 <DisplayWeather+0x1324>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	9202      	str	r2, [sp, #8]
 8002cba:	f64f 72df 	movw	r2, #65503	@ 0xffdf
 8002cbe:	9201      	str	r2, [sp, #4]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	9200      	str	r2, [sp, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a3c      	ldr	r2, [pc, #240]	@ (8002db8 <DisplayWeather+0x132c>)
 8002cc8:	2152      	movs	r1, #82	@ 0x52
 8002cca:	2050      	movs	r0, #80	@ 0x50
 8002ccc:	f7fe fc06 	bl	80014dc <ILI9341_WriteString>
 8002cd0:	e012      	b.n	8002cf8 <DisplayWeather+0x126c>
						}
						else{
							sprintf(rx_buffer, "%dAM", count);
 8002cd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cd4:	4940      	ldr	r1, [pc, #256]	@ (8002dd8 <DisplayWeather+0x134c>)
 8002cd6:	4838      	ldr	r0, [pc, #224]	@ (8002db8 <DisplayWeather+0x132c>)
 8002cd8:	f005 fa96 	bl	8008208 <siprintf>
							ILI9341_WriteString(80, 82, rx_buffer, Font_11x18, ILI9341_COLOR565(248, 248, 255), BLACK);
 8002cdc:	4b34      	ldr	r3, [pc, #208]	@ (8002db0 <DisplayWeather+0x1324>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	9202      	str	r2, [sp, #8]
 8002ce2:	f64f 72df 	movw	r2, #65503	@ 0xffdf
 8002ce6:	9201      	str	r2, [sp, #4]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	9200      	str	r2, [sp, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a32      	ldr	r2, [pc, #200]	@ (8002db8 <DisplayWeather+0x132c>)
 8002cf0:	2152      	movs	r1, #82	@ 0x52
 8002cf2:	2050      	movs	r0, #80	@ 0x50
 8002cf4:	f7fe fbf2 	bl	80014dc <ILI9341_WriteString>
						}
						sprintf(rx_buffer, "%d", data_receive.tempCurrent[t][count]);
 8002cf8:	4927      	ldr	r1, [pc, #156]	@ (8002d98 <DisplayWeather+0x130c>)
 8002cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d06:	4413      	add	r3, r2
 8002d08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4929      	ldr	r1, [pc, #164]	@ (8002db4 <DisplayWeather+0x1328>)
 8002d10:	4829      	ldr	r0, [pc, #164]	@ (8002db8 <DisplayWeather+0x132c>)
 8002d12:	f005 fa79 	bl	8008208 <siprintf>
						ILI9341_WriteString(135, 82, rx_buffer, Font_7x10, WHITE, BLACK);
 8002d16:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc4 <DisplayWeather+0x1338>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	9202      	str	r2, [sp, #8]
 8002d1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d20:	9201      	str	r2, [sp, #4]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	9200      	str	r2, [sp, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a23      	ldr	r2, [pc, #140]	@ (8002db8 <DisplayWeather+0x132c>)
 8002d2a:	2152      	movs	r1, #82	@ 0x52
 8002d2c:	2087      	movs	r0, #135	@ 0x87
 8002d2e:	f7fe fbd5 	bl	80014dc <ILI9341_WriteString>
						sprintf(rx_letter, "%s", "o");
 8002d32:	4a22      	ldr	r2, [pc, #136]	@ (8002dbc <DisplayWeather+0x1330>)
 8002d34:	491c      	ldr	r1, [pc, #112]	@ (8002da8 <DisplayWeather+0x131c>)
 8002d36:	4822      	ldr	r0, [pc, #136]	@ (8002dc0 <DisplayWeather+0x1334>)
 8002d38:	f005 fa66 	bl	8008208 <siprintf>
						ILI9341_WriteString(150, 79, rx_letter, Font_7x10, WHITE, BLACK);
 8002d3c:	4b21      	ldr	r3, [pc, #132]	@ (8002dc4 <DisplayWeather+0x1338>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	9202      	str	r2, [sp, #8]
 8002d42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d46:	9201      	str	r2, [sp, #4]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	9200      	str	r2, [sp, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc0 <DisplayWeather+0x1334>)
 8002d50:	214f      	movs	r1, #79	@ 0x4f
 8002d52:	2096      	movs	r0, #150	@ 0x96
 8002d54:	f7fe fbc2 	bl	80014dc <ILI9341_WriteString>

						sprintf(rx_buffer, "%d%%", data_receive.humidi[t][count]);
 8002d58:	490f      	ldr	r1, [pc, #60]	@ (8002d98 <DisplayWeather+0x130c>)
 8002d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d66:	4413      	add	r3, r2
 8002d68:	33bc      	adds	r3, #188	@ 0xbc
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	461a      	mov	r2, r3
 8002d72:	4915      	ldr	r1, [pc, #84]	@ (8002dc8 <DisplayWeather+0x133c>)
 8002d74:	4810      	ldr	r0, [pc, #64]	@ (8002db8 <DisplayWeather+0x132c>)
 8002d76:	f005 fa47 	bl	8008208 <siprintf>
						ILI9341_WriteString(135, 93, rx_buffer, Font_7x10, WHITE, BLACK);
 8002d7a:	4b12      	ldr	r3, [pc, #72]	@ (8002dc4 <DisplayWeather+0x1338>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	9202      	str	r2, [sp, #8]
 8002d80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d84:	9201      	str	r2, [sp, #4]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	9200      	str	r2, [sp, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002db8 <DisplayWeather+0x132c>)
 8002d8e:	215d      	movs	r1, #93	@ 0x5d
 8002d90:	2087      	movs	r0, #135	@ 0x87
 8002d92:	f7fe fba3 	bl	80014dc <ILI9341_WriteString>
 8002d96:	e125      	b.n	8002fe4 <DisplayWeather+0x1558>
 8002d98:	20000260 	.word	0x20000260
 8002d9c:	20001b20 	.word	0x20001b20
 8002da0:	92492493 	.word	0x92492493
 8002da4:	2000004c 	.word	0x2000004c
 8002da8:	0800a534 	.word	0x0800a534
 8002dac:	20001720 	.word	0x20001720
 8002db0:	2000000c 	.word	0x2000000c
 8002db4:	0800a53c 	.word	0x0800a53c
 8002db8:	20000f20 	.word	0x20000f20
 8002dbc:	0800a540 	.word	0x0800a540
 8002dc0:	20001320 	.word	0x20001320
 8002dc4:	20000004 	.word	0x20000004
 8002dc8:	0800a544 	.word	0x0800a544
 8002dcc:	0800cd9c 	.word	0x0800cd9c
 8002dd0:	0800d59c 	.word	0x0800d59c
 8002dd4:	0800a54c 	.word	0x0800a54c
 8002dd8:	0800a554 	.word	0x0800a554

					}
					else{
						sprintf(rx_Day, "%s",day_char[currentDay]);
 8002ddc:	4a9f      	ldr	r2, [pc, #636]	@ (800305c <DisplayWeather+0x15d0>)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de4:	461a      	mov	r2, r3
 8002de6:	499e      	ldr	r1, [pc, #632]	@ (8003060 <DisplayWeather+0x15d4>)
 8002de8:	489e      	ldr	r0, [pc, #632]	@ (8003064 <DisplayWeather+0x15d8>)
 8002dea:	f005 fa0d 	bl	8008208 <siprintf>
						ILI9341_WriteString(20,30*t + 97 , rx_Day, Font_7x10, WHITE, BLACK);
 8002dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	0112      	lsls	r2, r2, #4
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3361      	adds	r3, #97	@ 0x61
 8002dfe:	b299      	uxth	r1, r3
 8002e00:	4b99      	ldr	r3, [pc, #612]	@ (8003068 <DisplayWeather+0x15dc>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	9202      	str	r2, [sp, #8]
 8002e06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e0a:	9201      	str	r2, [sp, #4]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	9200      	str	r2, [sp, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a94      	ldr	r2, [pc, #592]	@ (8003064 <DisplayWeather+0x15d8>)
 8002e14:	2014      	movs	r0, #20
 8002e16:	f7fe fb61 	bl	80014dc <ILI9341_WriteString>
						sprintf(rx_buffer, "%d",data_receive.tempMax[t]);
 8002e1a:	4a94      	ldr	r2, [pc, #592]	@ (800306c <DisplayWeather+0x15e0>)
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1e:	33ae      	adds	r3, #174	@ 0xae
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	461a      	mov	r2, r3
 8002e28:	4991      	ldr	r1, [pc, #580]	@ (8003070 <DisplayWeather+0x15e4>)
 8002e2a:	4892      	ldr	r0, [pc, #584]	@ (8003074 <DisplayWeather+0x15e8>)
 8002e2c:	f005 f9ec 	bl	8008208 <siprintf>
						ILI9341_WriteString(75, 30*t + 97, rx_buffer, Font_7x10, WHITE, BLACK);
 8002e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	0112      	lsls	r2, r2, #4
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3361      	adds	r3, #97	@ 0x61
 8002e40:	b299      	uxth	r1, r3
 8002e42:	4b89      	ldr	r3, [pc, #548]	@ (8003068 <DisplayWeather+0x15dc>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	9202      	str	r2, [sp, #8]
 8002e48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e4c:	9201      	str	r2, [sp, #4]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	9200      	str	r2, [sp, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a87      	ldr	r2, [pc, #540]	@ (8003074 <DisplayWeather+0x15e8>)
 8002e56:	204b      	movs	r0, #75	@ 0x4b
 8002e58:	f7fe fb40 	bl	80014dc <ILI9341_WriteString>
						sprintf(rx_letter, "%s","o");
 8002e5c:	4a86      	ldr	r2, [pc, #536]	@ (8003078 <DisplayWeather+0x15ec>)
 8002e5e:	4980      	ldr	r1, [pc, #512]	@ (8003060 <DisplayWeather+0x15d4>)
 8002e60:	4886      	ldr	r0, [pc, #536]	@ (800307c <DisplayWeather+0x15f0>)
 8002e62:	f005 f9d1 	bl	8008208 <siprintf>
						ILI9341_WriteString(90, 30*t + 93, rx_letter, Font_7x10, WHITE, BLACK);
 8002e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	0112      	lsls	r2, r2, #4
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	335d      	adds	r3, #93	@ 0x5d
 8002e76:	b299      	uxth	r1, r3
 8002e78:	4b7b      	ldr	r3, [pc, #492]	@ (8003068 <DisplayWeather+0x15dc>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	9202      	str	r2, [sp, #8]
 8002e7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e82:	9201      	str	r2, [sp, #4]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	9200      	str	r2, [sp, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a7c      	ldr	r2, [pc, #496]	@ (800307c <DisplayWeather+0x15f0>)
 8002e8c:	205a      	movs	r0, #90	@ 0x5a
 8002e8e:	f7fe fb25 	bl	80014dc <ILI9341_WriteString>

						sprintf(rx_buffer, "%d",data_receive.tempMin[t]);
 8002e92:	4a76      	ldr	r2, [pc, #472]	@ (800306c <DisplayWeather+0x15e0>)
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	33b6      	adds	r3, #182	@ 0xb6
 8002e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4974      	ldr	r1, [pc, #464]	@ (8003070 <DisplayWeather+0x15e4>)
 8002ea0:	4874      	ldr	r0, [pc, #464]	@ (8003074 <DisplayWeather+0x15e8>)
 8002ea2:	f005 f9b1 	bl	8008208 <siprintf>
						ILI9341_WriteString(105, 30*t + 97, rx_buffer, Font_7x10, WHITE, BLACK);
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	0112      	lsls	r2, r2, #4
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	3361      	adds	r3, #97	@ 0x61
 8002eb6:	b299      	uxth	r1, r3
 8002eb8:	4b6b      	ldr	r3, [pc, #428]	@ (8003068 <DisplayWeather+0x15dc>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	9202      	str	r2, [sp, #8]
 8002ebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ec2:	9201      	str	r2, [sp, #4]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	9200      	str	r2, [sp, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a6a      	ldr	r2, [pc, #424]	@ (8003074 <DisplayWeather+0x15e8>)
 8002ecc:	2069      	movs	r0, #105	@ 0x69
 8002ece:	f7fe fb05 	bl	80014dc <ILI9341_WriteString>
						sprintf(rx_letter, "%s","o");
 8002ed2:	4a69      	ldr	r2, [pc, #420]	@ (8003078 <DisplayWeather+0x15ec>)
 8002ed4:	4962      	ldr	r1, [pc, #392]	@ (8003060 <DisplayWeather+0x15d4>)
 8002ed6:	4869      	ldr	r0, [pc, #420]	@ (800307c <DisplayWeather+0x15f0>)
 8002ed8:	f005 f996 	bl	8008208 <siprintf>
						ILI9341_WriteString(120, 30*t + 93, rx_letter, Font_7x10, WHITE, BLACK);
 8002edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	0112      	lsls	r2, r2, #4
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	335d      	adds	r3, #93	@ 0x5d
 8002eec:	b299      	uxth	r1, r3
 8002eee:	4b5e      	ldr	r3, [pc, #376]	@ (8003068 <DisplayWeather+0x15dc>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	9202      	str	r2, [sp, #8]
 8002ef4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ef8:	9201      	str	r2, [sp, #4]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	9200      	str	r2, [sp, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a5e      	ldr	r2, [pc, #376]	@ (800307c <DisplayWeather+0x15f0>)
 8002f02:	2078      	movs	r0, #120	@ 0x78
 8002f04:	f7fe faea 	bl	80014dc <ILI9341_WriteString>

						sprintf(rx_buffer, "%d%%",data_receive.humidi[t][n]);
 8002f08:	4958      	ldr	r1, [pc, #352]	@ (800306c <DisplayWeather+0x15e0>)
 8002f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4413      	add	r3, r2
 8002f18:	33bc      	adds	r3, #188	@ 0xbc
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	461a      	mov	r2, r3
 8002f22:	4957      	ldr	r1, [pc, #348]	@ (8003080 <DisplayWeather+0x15f4>)
 8002f24:	4853      	ldr	r0, [pc, #332]	@ (8003074 <DisplayWeather+0x15e8>)
 8002f26:	f005 f96f 	bl	8008208 <siprintf>
						ILI9341_WriteString(179, 30*t + 97, rx_buffer, Font_7x10, WHITE, BLACK);
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	0112      	lsls	r2, r2, #4
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3361      	adds	r3, #97	@ 0x61
 8002f3a:	b299      	uxth	r1, r3
 8002f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8003068 <DisplayWeather+0x15dc>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	9202      	str	r2, [sp, #8]
 8002f42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f46:	9201      	str	r2, [sp, #4]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	9200      	str	r2, [sp, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a49      	ldr	r2, [pc, #292]	@ (8003074 <DisplayWeather+0x15e8>)
 8002f50:	20b3      	movs	r0, #179	@ 0xb3
 8002f52:	f7fe fac3 	bl	80014dc <ILI9341_WriteString>
						if(data_receive.Rain[t][n] == 0){
 8002f56:	4945      	ldr	r1, [pc, #276]	@ (800306c <DisplayWeather+0x15e0>)
 8002f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	4413      	add	r3, r2
 8002f66:	33b3      	adds	r3, #179	@ 0xb3
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	440b      	add	r3, r1
 8002f6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	f7fd fd16 	bl	80009a8 <__aeabi_dcmpeq>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <DisplayWeather+0x1518>
							ILI9341_DrawImage(55, 30*t + 92, 16, 16, Image_Sun_16);
 8002f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	0112      	lsls	r2, r2, #4
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	335c      	adds	r3, #92	@ 0x5c
 8002f92:	b299      	uxth	r1, r3
 8002f94:	4b3b      	ldr	r3, [pc, #236]	@ (8003084 <DisplayWeather+0x15f8>)
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	2310      	movs	r3, #16
 8002f9a:	2210      	movs	r2, #16
 8002f9c:	2037      	movs	r0, #55	@ 0x37
 8002f9e:	f7fe fb5f 	bl	8001660 <ILI9341_DrawImage>
 8002fa2:	e00f      	b.n	8002fc4 <DisplayWeather+0x1538>
						}
						else{
							ILI9341_DrawImage(55, 30*t + 92, 16, 16, Image_rain_16);
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	335c      	adds	r3, #92	@ 0x5c
 8002fb4:	b299      	uxth	r1, r3
 8002fb6:	4b34      	ldr	r3, [pc, #208]	@ (8003088 <DisplayWeather+0x15fc>)
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	2310      	movs	r3, #16
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	2037      	movs	r0, #55	@ 0x37
 8002fc0:	f7fe fb4e 	bl	8001660 <ILI9341_DrawImage>
						}
						ILI9341_DrawImage(155, 30*t + 92, 16, 16, Image_humidity_16);
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	0112      	lsls	r2, r2, #4
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	335c      	adds	r3, #92	@ 0x5c
 8002fd4:	b299      	uxth	r1, r3
 8002fd6:	4b2d      	ldr	r3, [pc, #180]	@ (800308c <DisplayWeather+0x1600>)
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	2310      	movs	r3, #16
 8002fdc:	2210      	movs	r2, #16
 8002fde:	209b      	movs	r0, #155	@ 0x9b
 8002fe0:	f7fe fb3e 	bl	8001660 <ILI9341_DrawImage>
				for(int t = 0;t < 7;t++){
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	f77f ada5 	ble.w	8002b3c <DisplayWeather+0x10b0>
						}
					}
					HAL_Delay(2000);
 8002ff2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ff6:	f001 f88b 	bl	8004110 <HAL_Delay>
					if (ILI9341_TouchGetCoordinates(&x, &y)) {
 8002ffa:	1d3a      	adds	r2, r7, #4
 8002ffc:	1dbb      	adds	r3, r7, #6
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f000 ff49 	bl	8003e98 <ILI9341_TouchGetCoordinates>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d057      	beq.n	80030bc <DisplayWeather+0x1630>
						if(x >= 4 && x <= 20 && y >= 284 && y <= 320){
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d90e      	bls.n	8003030 <DisplayWeather+0x15a4>
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	2b14      	cmp	r3, #20
 8003016:	d80b      	bhi.n	8003030 <DisplayWeather+0x15a4>
 8003018:	88bb      	ldrh	r3, [r7, #4]
 800301a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800301e:	d307      	bcc.n	8003030 <DisplayWeather+0x15a4>
 8003020:	88bb      	ldrh	r3, [r7, #4]
 8003022:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003026:	d803      	bhi.n	8003030 <DisplayWeather+0x15a4>
							state = 3;
 8003028:	4b19      	ldr	r3, [pc, #100]	@ (8003090 <DisplayWeather+0x1604>)
 800302a:	2203      	movs	r2, #3
 800302c:	601a      	str	r2, [r3, #0]
							//RCC->APB2RSTR |= RCC_APB2RSTR_USART1RST; // Reset UART
							//MX_USART1_UART_Init();
							//RCC->APB2RSTR &= ~RCC_APB2RSTR_USART1RST;
							HAL_UART_Transmit(&huart1, (uint8_t *)&HaNoi, sizeof(HaNoi),1000);
							*/
							return;
 800302e:	e1b4      	b.n	800339a <DisplayWeather+0x190e>
						}
						//next
						else if (x >= 64 && x <= 83 && y >= 269 && y <= 318) {
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	2b3f      	cmp	r3, #63	@ 0x3f
 8003034:	d92e      	bls.n	8003094 <DisplayWeather+0x1608>
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	2b53      	cmp	r3, #83	@ 0x53
 800303a:	d82b      	bhi.n	8003094 <DisplayWeather+0x1608>
 800303c:	88bb      	ldrh	r3, [r7, #4]
 800303e:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8003042:	d927      	bls.n	8003094 <DisplayWeather+0x1608>
 8003044:	88bb      	ldrh	r3, [r7, #4]
 8003046:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800304a:	d823      	bhi.n	8003094 <DisplayWeather+0x1608>
							if (count + 1 <= 24) {
 800304c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304e:	2b17      	cmp	r3, #23
 8003050:	dc34      	bgt.n	80030bc <DisplayWeather+0x1630>
								count++;
 8003052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003054:	3301      	adds	r3, #1
 8003056:	637b      	str	r3, [r7, #52]	@ 0x34
							if (count + 1 <= 24) {
 8003058:	e030      	b.n	80030bc <DisplayWeather+0x1630>
 800305a:	bf00      	nop
 800305c:	2000004c 	.word	0x2000004c
 8003060:	0800a534 	.word	0x0800a534
 8003064:	20001720 	.word	0x20001720
 8003068:	20000004 	.word	0x20000004
 800306c:	20000260 	.word	0x20000260
 8003070:	0800a53c 	.word	0x0800a53c
 8003074:	20000f20 	.word	0x20000f20
 8003078:	0800a540 	.word	0x0800a540
 800307c:	20001320 	.word	0x20001320
 8003080:	0800a544 	.word	0x0800a544
 8003084:	0800ef9c 	.word	0x0800ef9c
 8003088:	0800f19c 	.word	0x0800f19c
 800308c:	0800ed9c 	.word	0x0800ed9c
 8003090:	20001b24 	.word	0x20001b24
							}
						}
						// back
						else if (x >= 64 && x <= 80 && y >= 49 && y <= 68) {
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	2b3f      	cmp	r3, #63	@ 0x3f
 8003098:	d910      	bls.n	80030bc <DisplayWeather+0x1630>
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	2b50      	cmp	r3, #80	@ 0x50
 800309e:	d80d      	bhi.n	80030bc <DisplayWeather+0x1630>
 80030a0:	88bb      	ldrh	r3, [r7, #4]
 80030a2:	2b30      	cmp	r3, #48	@ 0x30
 80030a4:	d90a      	bls.n	80030bc <DisplayWeather+0x1630>
 80030a6:	88bb      	ldrh	r3, [r7, #4]
 80030a8:	2b44      	cmp	r3, #68	@ 0x44
 80030aa:	d807      	bhi.n	80030bc <DisplayWeather+0x1630>
							if (count - 1 > n) {
 80030ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ae:	3b01      	subs	r3, #1
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	da02      	bge.n	80030bc <DisplayWeather+0x1630>
								count --;
 80030b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030b8:	3b01      	subs	r3, #1
 80030ba:	637b      	str	r3, [r7, #52]	@ 0x34
			while(state != 3){
 80030bc:	4b27      	ldr	r3, [pc, #156]	@ (800315c <DisplayWeather+0x16d0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	f47f ad09 	bne.w	8002ad8 <DisplayWeather+0x104c>
		{
 80030c6:	e168      	b.n	800339a <DisplayWeather+0x190e>
						}
					}
				}
			}

		else if(x >= 202 && x <= 231 && y >= 9 && y <= 318){
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	2bc9      	cmp	r3, #201	@ 0xc9
 80030cc:	f240 8165 	bls.w	800339a <DisplayWeather+0x190e>
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	2be7      	cmp	r3, #231	@ 0xe7
 80030d4:	f200 8161 	bhi.w	800339a <DisplayWeather+0x190e>
 80030d8:	88bb      	ldrh	r3, [r7, #4]
 80030da:	2b08      	cmp	r3, #8
 80030dc:	f240 815d 	bls.w	800339a <DisplayWeather+0x190e>
 80030e0:	88bb      	ldrh	r3, [r7, #4]
 80030e2:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80030e6:	f200 8158 	bhi.w	800339a <DisplayWeather+0x190e>
			ILI9341_FillScreen(BLACK);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fe fa9e 	bl	800162c <ILI9341_FillScreen>
			ILI9341_DrawImage(206, 1, 24, 24, button_back_Image);
 80030f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003160 <DisplayWeather+0x16d4>)
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2318      	movs	r3, #24
 80030f6:	2218      	movs	r2, #24
 80030f8:	2101      	movs	r1, #1
 80030fa:	20ce      	movs	r0, #206	@ 0xce
 80030fc:	f7fe fab0 	bl	8001660 <ILI9341_DrawImage>
			ILI9341_WriteString(32, 93, "Temperature", Font_16x26, WHITE, BLACK);
 8003100:	4b18      	ldr	r3, [pc, #96]	@ (8003164 <DisplayWeather+0x16d8>)
 8003102:	2200      	movs	r2, #0
 8003104:	9202      	str	r2, [sp, #8]
 8003106:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800310a:	9201      	str	r2, [sp, #4]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	9200      	str	r2, [sp, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a15      	ldr	r2, [pc, #84]	@ (8003168 <DisplayWeather+0x16dc>)
 8003114:	215d      	movs	r1, #93	@ 0x5d
 8003116:	2020      	movs	r0, #32
 8003118:	f7fe f9e0 	bl	80014dc <ILI9341_WriteString>
			ILI9341_DrawImage(46, 129, 32, 32, Image_Temp);
 800311c:	4b13      	ldr	r3, [pc, #76]	@ (800316c <DisplayWeather+0x16e0>)
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2320      	movs	r3, #32
 8003122:	2220      	movs	r2, #32
 8003124:	2181      	movs	r1, #129	@ 0x81
 8003126:	202e      	movs	r0, #46	@ 0x2e
 8003128:	f7fe fa9a 	bl	8001660 <ILI9341_DrawImage>
			ILI9341_WriteString(56, 175, "Humidity", Font_16x26, WHITE, BLACK);
 800312c:	4b0d      	ldr	r3, [pc, #52]	@ (8003164 <DisplayWeather+0x16d8>)
 800312e:	2200      	movs	r2, #0
 8003130:	9202      	str	r2, [sp, #8]
 8003132:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003136:	9201      	str	r2, [sp, #4]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	9200      	str	r2, [sp, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a0c      	ldr	r2, [pc, #48]	@ (8003170 <DisplayWeather+0x16e4>)
 8003140:	21af      	movs	r1, #175	@ 0xaf
 8003142:	2038      	movs	r0, #56	@ 0x38
 8003144:	f7fe f9ca 	bl	80014dc <ILI9341_WriteString>
			ILI9341_DrawImage(46, 211, 32, 32, Image_Humidity);
 8003148:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <DisplayWeather+0x16e8>)
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2320      	movs	r3, #32
 800314e:	2220      	movs	r2, #32
 8003150:	21d3      	movs	r1, #211	@ 0xd3
 8003152:	202e      	movs	r0, #46	@ 0x2e
 8003154:	f7fe fa84 	bl	8001660 <ILI9341_DrawImage>
			while(state != 4){
 8003158:	e11a      	b.n	8003390 <DisplayWeather+0x1904>
 800315a:	bf00      	nop
 800315c:	20001b24 	.word	0x20001b24
 8003160:	0800f39c 	.word	0x0800f39c
 8003164:	20000014 	.word	0x20000014
 8003168:	0800a55c 	.word	0x0800a55c
 800316c:	0800e59c 	.word	0x0800e59c
 8003170:	0800a568 	.word	0x0800a568
 8003174:	0800dd9c 	.word	0x0800dd9c
				if(DHT11_Start()){
 8003178:	f7fe fae0 	bl	800173c <DHT11_Start>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 80eb 	beq.w	800335a <DisplayWeather+0x18ce>
					RHI = DHT11_Read();
 8003184:	f7fe fb50 	bl	8001828 <DHT11_Read>
 8003188:	4603      	mov	r3, r0
 800318a:	461a      	mov	r2, r3
 800318c:	4b84      	ldr	r3, [pc, #528]	@ (80033a0 <DisplayWeather+0x1914>)
 800318e:	701a      	strb	r2, [r3, #0]
					RHD = DHT11_Read();
 8003190:	f7fe fb4a 	bl	8001828 <DHT11_Read>
 8003194:	4603      	mov	r3, r0
 8003196:	461a      	mov	r2, r3
 8003198:	4b82      	ldr	r3, [pc, #520]	@ (80033a4 <DisplayWeather+0x1918>)
 800319a:	701a      	strb	r2, [r3, #0]
					TCI = DHT11_Read();
 800319c:	f7fe fb44 	bl	8001828 <DHT11_Read>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b80      	ldr	r3, [pc, #512]	@ (80033a8 <DisplayWeather+0x191c>)
 80031a6:	701a      	strb	r2, [r3, #0]
					TCD = DHT11_Read();
 80031a8:	f7fe fb3e 	bl	8001828 <DHT11_Read>
 80031ac:	4603      	mov	r3, r0
 80031ae:	461a      	mov	r2, r3
 80031b0:	4b7e      	ldr	r3, [pc, #504]	@ (80033ac <DisplayWeather+0x1920>)
 80031b2:	701a      	strb	r2, [r3, #0]
					sum = DHT11_Read();
 80031b4:	f7fe fb38 	bl	8001828 <DHT11_Read>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b7c      	ldr	r3, [pc, #496]	@ (80033b0 <DisplayWeather+0x1924>)
 80031be:	701a      	strb	r2, [r3, #0]
					// Kiểm tra tổng(checksum)
					if( RHI + RHD + TCI + TCD == sum)
 80031c0:	4b77      	ldr	r3, [pc, #476]	@ (80033a0 <DisplayWeather+0x1914>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b77      	ldr	r3, [pc, #476]	@ (80033a4 <DisplayWeather+0x1918>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	4413      	add	r3, r2
 80031cc:	4a76      	ldr	r2, [pc, #472]	@ (80033a8 <DisplayWeather+0x191c>)
 80031ce:	7812      	ldrb	r2, [r2, #0]
 80031d0:	4413      	add	r3, r2
 80031d2:	4a76      	ldr	r2, [pc, #472]	@ (80033ac <DisplayWeather+0x1920>)
 80031d4:	7812      	ldrb	r2, [r2, #0]
 80031d6:	4413      	add	r3, r2
 80031d8:	4a75      	ldr	r2, [pc, #468]	@ (80033b0 <DisplayWeather+0x1924>)
 80031da:	7812      	ldrb	r2, [r2, #0]
 80031dc:	4293      	cmp	r3, r2
 80031de:	f040 80bc 	bne.w	800335a <DisplayWeather+0x18ce>
					{
						// Tính toán nhiệt độ và độ ẩm
						fCelsius = (float)TCI + (float)(TCD/10.0);
 80031e2:	4b71      	ldr	r3, [pc, #452]	@ (80033a8 <DisplayWeather+0x191c>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd fd54 	bl	8000c94 <__aeabi_ui2f>
 80031ec:	4604      	mov	r4, r0
 80031ee:	4b6f      	ldr	r3, [pc, #444]	@ (80033ac <DisplayWeather+0x1920>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd f906 	bl	8000404 <__aeabi_i2d>
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	4b6d      	ldr	r3, [pc, #436]	@ (80033b4 <DisplayWeather+0x1928>)
 80031fe:	f7fd fa95 	bl	800072c <__aeabi_ddiv>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4610      	mov	r0, r2
 8003208:	4619      	mov	r1, r3
 800320a:	f7fd fc3d 	bl	8000a88 <__aeabi_d2f>
 800320e:	4603      	mov	r3, r0
 8003210:	4619      	mov	r1, r3
 8003212:	4620      	mov	r0, r4
 8003214:	f7fd fc8e 	bl	8000b34 <__addsf3>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	4b66      	ldr	r3, [pc, #408]	@ (80033b8 <DisplayWeather+0x192c>)
 800321e:	601a      	str	r2, [r3, #0]
						fFahrenheit = fCelsius * 9/5 + 32;
 8003220:	4b65      	ldr	r3, [pc, #404]	@ (80033b8 <DisplayWeather+0x192c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4965      	ldr	r1, [pc, #404]	@ (80033bc <DisplayWeather+0x1930>)
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd fd8c 	bl	8000d44 <__aeabi_fmul>
 800322c:	4603      	mov	r3, r0
 800322e:	4964      	ldr	r1, [pc, #400]	@ (80033c0 <DisplayWeather+0x1934>)
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd fe3b 	bl	8000eac <__aeabi_fdiv>
 8003236:	4603      	mov	r3, r0
 8003238:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd fc79 	bl	8000b34 <__addsf3>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	4b5f      	ldr	r3, [pc, #380]	@ (80033c4 <DisplayWeather+0x1938>)
 8003248:	601a      	str	r2, [r3, #0]
						RH = (float)RHI + (float)(RHD/10.0);
 800324a:	4b55      	ldr	r3, [pc, #340]	@ (80033a0 <DisplayWeather+0x1914>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd fd20 	bl	8000c94 <__aeabi_ui2f>
 8003254:	4604      	mov	r4, r0
 8003256:	4b53      	ldr	r3, [pc, #332]	@ (80033a4 <DisplayWeather+0x1918>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd f8d2 	bl	8000404 <__aeabi_i2d>
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	4b53      	ldr	r3, [pc, #332]	@ (80033b4 <DisplayWeather+0x1928>)
 8003266:	f7fd fa61 	bl	800072c <__aeabi_ddiv>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	f7fd fc09 	bl	8000a88 <__aeabi_d2f>
 8003276:	4603      	mov	r3, r0
 8003278:	4619      	mov	r1, r3
 800327a:	4620      	mov	r0, r4
 800327c:	f7fd fc5a 	bl	8000b34 <__addsf3>
 8003280:	4603      	mov	r3, r0
 8003282:	461a      	mov	r2, r3
 8003284:	4b50      	ldr	r3, [pc, #320]	@ (80033c8 <DisplayWeather+0x193c>)
 8003286:	601a      	str	r2, [r3, #0]
						// Can use tCelsius, tFahrenheit and RH for any purposes
						TFI = fFahrenheit;  // Fahrenheit integral
 8003288:	4b4e      	ldr	r3, [pc, #312]	@ (80033c4 <DisplayWeather+0x1938>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd fea9 	bl	8000fe4 <__aeabi_f2uiz>
 8003292:	4603      	mov	r3, r0
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4b4d      	ldr	r3, [pc, #308]	@ (80033cc <DisplayWeather+0x1940>)
 8003298:	701a      	strb	r2, [r3, #0]
						TFD = fFahrenheit * 10 - TFI * 10; // Fahrenheit decimal
 800329a:	4b4a      	ldr	r3, [pc, #296]	@ (80033c4 <DisplayWeather+0x1938>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	494c      	ldr	r1, [pc, #304]	@ (80033d0 <DisplayWeather+0x1944>)
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd fd4f 	bl	8000d44 <__aeabi_fmul>
 80032a6:	4603      	mov	r3, r0
 80032a8:	461c      	mov	r4, r3
 80032aa:	4b48      	ldr	r3, [pc, #288]	@ (80033cc <DisplayWeather+0x1940>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd fcef 	bl	8000c9c <__aeabi_i2f>
 80032be:	4603      	mov	r3, r0
 80032c0:	4619      	mov	r1, r3
 80032c2:	4620      	mov	r0, r4
 80032c4:	f7fd fc34 	bl	8000b30 <__aeabi_fsub>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd fe8a 	bl	8000fe4 <__aeabi_f2uiz>
 80032d0:	4603      	mov	r3, r0
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	4b3f      	ldr	r3, [pc, #252]	@ (80033d4 <DisplayWeather+0x1948>)
 80032d6:	701a      	strb	r2, [r3, #0]
						// hiển thị nhiệt độ
						sprintf(strCopy, "%d.%d", TCI, TCD);
 80032d8:	4b33      	ldr	r3, [pc, #204]	@ (80033a8 <DisplayWeather+0x191c>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	461a      	mov	r2, r3
 80032de:	4b33      	ldr	r3, [pc, #204]	@ (80033ac <DisplayWeather+0x1920>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	493d      	ldr	r1, [pc, #244]	@ (80033d8 <DisplayWeather+0x194c>)
 80032e4:	483d      	ldr	r0, [pc, #244]	@ (80033dc <DisplayWeather+0x1950>)
 80032e6:	f004 ff8f 	bl	8008208 <siprintf>
						ILI9341_WriteString(88, 131, strCopy, Font_16x26, WHITE, BLACK);
 80032ea:	4b3d      	ldr	r3, [pc, #244]	@ (80033e0 <DisplayWeather+0x1954>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	9202      	str	r2, [sp, #8]
 80032f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032f4:	9201      	str	r2, [sp, #4]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	9200      	str	r2, [sp, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a37      	ldr	r2, [pc, #220]	@ (80033dc <DisplayWeather+0x1950>)
 80032fe:	2183      	movs	r1, #131	@ 0x83
 8003300:	2058      	movs	r0, #88	@ 0x58
 8003302:	f7fe f8eb 	bl	80014dc <ILI9341_WriteString>
						sprintf(rx_letter, "%s","o");
 8003306:	4a37      	ldr	r2, [pc, #220]	@ (80033e4 <DisplayWeather+0x1958>)
 8003308:	4937      	ldr	r1, [pc, #220]	@ (80033e8 <DisplayWeather+0x195c>)
 800330a:	4838      	ldr	r0, [pc, #224]	@ (80033ec <DisplayWeather+0x1960>)
 800330c:	f004 ff7c 	bl	8008208 <siprintf>
						ILI9341_WriteString(169, 128, rx_letter, Font_11x18, WHITE, BLACK);
 8003310:	4b37      	ldr	r3, [pc, #220]	@ (80033f0 <DisplayWeather+0x1964>)
 8003312:	2200      	movs	r2, #0
 8003314:	9202      	str	r2, [sp, #8]
 8003316:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800331a:	9201      	str	r2, [sp, #4]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	9200      	str	r2, [sp, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a32      	ldr	r2, [pc, #200]	@ (80033ec <DisplayWeather+0x1960>)
 8003324:	2180      	movs	r1, #128	@ 0x80
 8003326:	20a9      	movs	r0, #169	@ 0xa9
 8003328:	f7fe f8d8 	bl	80014dc <ILI9341_WriteString>
						// hiển thị độ ẩm
						sprintf(strCopy, "%d.%d %%", RHI, RHD);
 800332c:	4b1c      	ldr	r3, [pc, #112]	@ (80033a0 <DisplayWeather+0x1914>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	4b1c      	ldr	r3, [pc, #112]	@ (80033a4 <DisplayWeather+0x1918>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	492f      	ldr	r1, [pc, #188]	@ (80033f4 <DisplayWeather+0x1968>)
 8003338:	4828      	ldr	r0, [pc, #160]	@ (80033dc <DisplayWeather+0x1950>)
 800333a:	f004 ff65 	bl	8008208 <siprintf>
						ILI9341_WriteString(88, 220, strCopy, Font_16x26, WHITE, BLACK);
 800333e:	4b28      	ldr	r3, [pc, #160]	@ (80033e0 <DisplayWeather+0x1954>)
 8003340:	2200      	movs	r2, #0
 8003342:	9202      	str	r2, [sp, #8]
 8003344:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003348:	9201      	str	r2, [sp, #4]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	9200      	str	r2, [sp, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a22      	ldr	r2, [pc, #136]	@ (80033dc <DisplayWeather+0x1950>)
 8003352:	21dc      	movs	r1, #220	@ 0xdc
 8003354:	2058      	movs	r0, #88	@ 0x58
 8003356:	f7fe f8c1 	bl	80014dc <ILI9341_WriteString>
					}
				}
				if (ILI9341_TouchGetCoordinates(&x, &y)) {
 800335a:	1d3a      	adds	r2, r7, #4
 800335c:	1dbb      	adds	r3, r7, #6
 800335e:	4611      	mov	r1, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fd99 	bl	8003e98 <ILI9341_TouchGetCoordinates>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d011      	beq.n	8003390 <DisplayWeather+0x1904>
					if(x >= 4 && x <= 20 && y >= 284 && y <= 320){
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	2b03      	cmp	r3, #3
 8003370:	d90e      	bls.n	8003390 <DisplayWeather+0x1904>
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	2b14      	cmp	r3, #20
 8003376:	d80b      	bhi.n	8003390 <DisplayWeather+0x1904>
 8003378:	88bb      	ldrh	r3, [r7, #4]
 800337a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800337e:	d307      	bcc.n	8003390 <DisplayWeather+0x1904>
 8003380:	88bb      	ldrh	r3, [r7, #4]
 8003382:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003386:	d803      	bhi.n	8003390 <DisplayWeather+0x1904>
						state = 4;
 8003388:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <DisplayWeather+0x196c>)
 800338a:	2204      	movs	r2, #4
 800338c:	601a      	str	r2, [r3, #0]
						return;
 800338e:	e004      	b.n	800339a <DisplayWeather+0x190e>
			while(state != 4){
 8003390:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <DisplayWeather+0x196c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b04      	cmp	r3, #4
 8003396:	f47f aeef 	bne.w	8003178 <DisplayWeather+0x16ec>
					}
				}
			}
		}
	}
}
 800339a:	374c      	adds	r7, #76	@ 0x4c
 800339c:	46bd      	mov	sp, r7
 800339e:	bd90      	pop	{r4, r7, pc}
 80033a0:	20000ee0 	.word	0x20000ee0
 80033a4:	20000ee1 	.word	0x20000ee1
 80033a8:	20000ee2 	.word	0x20000ee2
 80033ac:	20000ee3 	.word	0x20000ee3
 80033b0:	20000ee4 	.word	0x20000ee4
 80033b4:	40240000 	.word	0x40240000
 80033b8:	20000ef0 	.word	0x20000ef0
 80033bc:	41100000 	.word	0x41100000
 80033c0:	40a00000 	.word	0x40a00000
 80033c4:	20000ef4 	.word	0x20000ef4
 80033c8:	20000ef8 	.word	0x20000ef8
 80033cc:	20000efc 	.word	0x20000efc
 80033d0:	41200000 	.word	0x41200000
 80033d4:	20000efd 	.word	0x20000efd
 80033d8:	0800a574 	.word	0x0800a574
 80033dc:	20000f00 	.word	0x20000f00
 80033e0:	20000014 	.word	0x20000014
 80033e4:	0800a540 	.word	0x0800a540
 80033e8:	0800a534 	.word	0x0800a534
 80033ec:	20001320 	.word	0x20001320
 80033f0:	2000000c 	.word	0x2000000c
 80033f4:	0800a57c 	.word	0x0800a57c
 80033f8:	20001b24 	.word	0x20001b24

080033fc <ReturnBack>:

void ReturnBack(){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
	uint16_t x, y;
	if(ILI9341_TouchGetCoordinates(&x, &y)){
 8003402:	1d3a      	adds	r2, r7, #4
 8003404:	1dbb      	adds	r3, r7, #6
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fd45 	bl	8003e98 <ILI9341_TouchGetCoordinates>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d027      	beq.n	8003464 <ReturnBack+0x68>
		if((x >= 4 && x <= 20 && y >= 284 && y <= 320) && (state == 1 || state == 2 || state == 3 || state == 4)){
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	2b03      	cmp	r3, #3
 8003418:	d924      	bls.n	8003464 <ReturnBack+0x68>
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	2b14      	cmp	r3, #20
 800341e:	d821      	bhi.n	8003464 <ReturnBack+0x68>
 8003420:	88bb      	ldrh	r3, [r7, #4]
 8003422:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8003426:	d31d      	bcc.n	8003464 <ReturnBack+0x68>
 8003428:	88bb      	ldrh	r3, [r7, #4]
 800342a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800342e:	d819      	bhi.n	8003464 <ReturnBack+0x68>
 8003430:	4b0e      	ldr	r3, [pc, #56]	@ (800346c <ReturnBack+0x70>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d00b      	beq.n	8003450 <ReturnBack+0x54>
 8003438:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <ReturnBack+0x70>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d007      	beq.n	8003450 <ReturnBack+0x54>
 8003440:	4b0a      	ldr	r3, [pc, #40]	@ (800346c <ReturnBack+0x70>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d003      	beq.n	8003450 <ReturnBack+0x54>
 8003448:	4b08      	ldr	r3, [pc, #32]	@ (800346c <ReturnBack+0x70>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d109      	bne.n	8003464 <ReturnBack+0x68>
			ILI9341_FillScreen(ILI9341_COLOR565(255, 204, 0));
 8003450:	f64f 6060 	movw	r0, #65120	@ 0xfe60
 8003454:	f7fe f8ea 	bl	800162c <ILI9341_FillScreen>
			state = 0;
 8003458:	4b04      	ldr	r3, [pc, #16]	@ (800346c <ReturnBack+0x70>)
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
			isTitleDisplayed = 0;
 800345e:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <ReturnBack+0x74>)
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]

		}
	}
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20001b24 	.word	0x20001b24
 8003470:	20001b28 	.word	0x20001b28

08003474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003478:	f000 fde8 	bl	800404c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800347c:	f000 f83a 	bl	80034f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003480:	f000 f9e0 	bl	8003844 <MX_GPIO_Init>
  MX_DMA_Init();
 8003484:	f000 f9c0 	bl	8003808 <MX_DMA_Init>
  MX_SPI1_Init();
 8003488:	f000 f8d8 	bl	800363c <MX_SPI1_Init>
  MX_TIM1_Init();
 800348c:	f000 f942 	bl	8003714 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003490:	f000 f990 	bl	80037b4 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8003494:	f000 f908 	bl	80036a8 <MX_SPI2_Init>
  MX_RTC_Init();
 8003498:	f000 f886 	bl	80035a8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800349c:	4810      	ldr	r0, [pc, #64]	@ (80034e0 <main+0x6c>)
 800349e:	f003 f8b7 	bl	8006610 <HAL_TIM_Base_Start>
  ILI9341_Init();
 80034a2:	f7fd fe7b 	bl	800119c <ILI9341_Init>
  ILI9341_FillScreen(ILI9341_COLOR565(255, 204, 0));
 80034a6:	f64f 6060 	movw	r0, #65120	@ 0xfe60
 80034aa:	f7fe f8bf 	bl	800162c <ILI9341_FillScreen>
  HAL_UART_Receive_IT(&huart1,(uint8_t *)&data_receive, sizeof(data_receive));
 80034ae:	f640 22e8 	movw	r2, #2792	@ 0xae8
 80034b2:	490c      	ldr	r1, [pc, #48]	@ (80034e4 <main+0x70>)
 80034b4:	480c      	ldr	r0, [pc, #48]	@ (80034e8 <main+0x74>)
 80034b6:	f003 fbfa 	bl	8006cae <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(state == 0 && isTitleDisplayed == 0){
 80034ba:	4b0c      	ldr	r3, [pc, #48]	@ (80034ec <main+0x78>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d105      	bne.n	80034ce <main+0x5a>
 80034c2:	4b0b      	ldr	r3, [pc, #44]	@ (80034f0 <main+0x7c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <main+0x5a>
	  Title();
 80034ca:	f7fe fa43 	bl	8001954 <Title>
	  }
	  DisplayWeather();
 80034ce:	f7fe fadd 	bl	8001a8c <DisplayWeather>
	  ReturnBack();
 80034d2:	f7ff ff93 	bl	80033fc <ReturnBack>
	  HAL_Delay(500);
 80034d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80034da:	f000 fe19 	bl	8004110 <HAL_Delay>
	  if(state == 0 && isTitleDisplayed == 0){
 80034de:	e7ec      	b.n	80034ba <main+0x46>
 80034e0:	20000e50 	.word	0x20000e50
 80034e4:	20000260 	.word	0x20000260
 80034e8:	20000e98 	.word	0x20000e98
 80034ec:	20001b24 	.word	0x20001b24
 80034f0:	20001b28 	.word	0x20001b28

080034f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b094      	sub	sp, #80	@ 0x50
 80034f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034fe:	2228      	movs	r2, #40	@ 0x28
 8003500:	2100      	movs	r1, #0
 8003502:	4618      	mov	r0, r3
 8003504:	f004 fee3 	bl	80082ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003508:	f107 0314 	add.w	r3, r7, #20
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	60da      	str	r2, [r3, #12]
 8003516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003518:	1d3b      	adds	r3, r7, #4
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003524:	230a      	movs	r3, #10
 8003526:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003528:	2301      	movs	r3, #1
 800352a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800352c:	2310      	movs	r3, #16
 800352e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003530:	2301      	movs	r3, #1
 8003532:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003534:	2302      	movs	r3, #2
 8003536:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003538:	2300      	movs	r3, #0
 800353a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800353c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8003540:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003542:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003546:	4618      	mov	r0, r3
 8003548:	f001 fae8 	bl	8004b1c <HAL_RCC_OscConfig>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8003552:	f000 f9e3 	bl	800391c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003556:	230f      	movs	r3, #15
 8003558:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800355a:	2302      	movs	r3, #2
 800355c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003562:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003566:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003568:	2300      	movs	r3, #0
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	2102      	movs	r1, #2
 8003572:	4618      	mov	r0, r3
 8003574:	f001 fd54 	bl	8005020 <HAL_RCC_ClockConfig>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800357e:	f000 f9cd 	bl	800391c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003582:	2301      	movs	r3, #1
 8003584:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003586:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800358a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800358c:	1d3b      	adds	r3, r7, #4
 800358e:	4618      	mov	r0, r3
 8003590:	f001 fed4 	bl	800533c <HAL_RCCEx_PeriphCLKConfig>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800359a:	f000 f9bf 	bl	800391c <Error_Handler>
  }
}
 800359e:	bf00      	nop
 80035a0:	3750      	adds	r7, #80	@ 0x50
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80035ae:	1d3b      	adds	r3, r7, #4
 80035b0:	2100      	movs	r1, #0
 80035b2:	460a      	mov	r2, r1
 80035b4:	801a      	strh	r2, [r3, #0]
 80035b6:	460a      	mov	r2, r1
 80035b8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80035ba:	2300      	movs	r3, #0
 80035bc:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80035be:	4b1d      	ldr	r3, [pc, #116]	@ (8003634 <MX_RTC_Init+0x8c>)
 80035c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003638 <MX_RTC_Init+0x90>)
 80035c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80035c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003634 <MX_RTC_Init+0x8c>)
 80035c6:	f04f 32ff 	mov.w	r2, #4294967295
 80035ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80035cc:	4b19      	ldr	r3, [pc, #100]	@ (8003634 <MX_RTC_Init+0x8c>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80035d2:	4818      	ldr	r0, [pc, #96]	@ (8003634 <MX_RTC_Init+0x8c>)
 80035d4:	f002 f81e 	bl	8005614 <HAL_RTC_Init>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80035de:	f000 f99d 	bl	800391c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 80035e2:	230f      	movs	r3, #15
 80035e4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 28;
 80035e6:	231c      	movs	r3, #28
 80035e8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80035ee:	1d3b      	adds	r3, r7, #4
 80035f0:	2200      	movs	r2, #0
 80035f2:	4619      	mov	r1, r3
 80035f4:	480f      	ldr	r0, [pc, #60]	@ (8003634 <MX_RTC_Init+0x8c>)
 80035f6:	f002 f899 	bl	800572c <HAL_RTC_SetTime>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8003600:	f000 f98c 	bl	800391c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003604:	2301      	movs	r3, #1
 8003606:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_NOVEMBER;
 8003608:	2311      	movs	r3, #17
 800360a:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 18;
 800360c:	2312      	movs	r3, #18
 800360e:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 24;
 8003610:	2318      	movs	r3, #24
 8003612:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8003614:	463b      	mov	r3, r7
 8003616:	2200      	movs	r2, #0
 8003618:	4619      	mov	r1, r3
 800361a:	4806      	ldr	r0, [pc, #24]	@ (8003634 <MX_RTC_Init+0x8c>)
 800361c:	f002 f91e 	bl	800585c <HAL_RTC_SetDate>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8003626:	f000 f979 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000d48 	.word	0x20000d48
 8003638:	40002800 	.word	0x40002800

0800363c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003640:	4b17      	ldr	r3, [pc, #92]	@ (80036a0 <MX_SPI1_Init+0x64>)
 8003642:	4a18      	ldr	r2, [pc, #96]	@ (80036a4 <MX_SPI1_Init+0x68>)
 8003644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003646:	4b16      	ldr	r3, [pc, #88]	@ (80036a0 <MX_SPI1_Init+0x64>)
 8003648:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800364c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800364e:	4b14      	ldr	r3, [pc, #80]	@ (80036a0 <MX_SPI1_Init+0x64>)
 8003650:	2200      	movs	r2, #0
 8003652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003654:	4b12      	ldr	r3, [pc, #72]	@ (80036a0 <MX_SPI1_Init+0x64>)
 8003656:	2200      	movs	r2, #0
 8003658:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800365a:	4b11      	ldr	r3, [pc, #68]	@ (80036a0 <MX_SPI1_Init+0x64>)
 800365c:	2200      	movs	r2, #0
 800365e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003660:	4b0f      	ldr	r3, [pc, #60]	@ (80036a0 <MX_SPI1_Init+0x64>)
 8003662:	2200      	movs	r2, #0
 8003664:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003666:	4b0e      	ldr	r3, [pc, #56]	@ (80036a0 <MX_SPI1_Init+0x64>)
 8003668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800366c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800366e:	4b0c      	ldr	r3, [pc, #48]	@ (80036a0 <MX_SPI1_Init+0x64>)
 8003670:	2208      	movs	r2, #8
 8003672:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003674:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <MX_SPI1_Init+0x64>)
 8003676:	2200      	movs	r2, #0
 8003678:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800367a:	4b09      	ldr	r3, [pc, #36]	@ (80036a0 <MX_SPI1_Init+0x64>)
 800367c:	2200      	movs	r2, #0
 800367e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003680:	4b07      	ldr	r3, [pc, #28]	@ (80036a0 <MX_SPI1_Init+0x64>)
 8003682:	2200      	movs	r2, #0
 8003684:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003686:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <MX_SPI1_Init+0x64>)
 8003688:	220a      	movs	r2, #10
 800368a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800368c:	4804      	ldr	r0, [pc, #16]	@ (80036a0 <MX_SPI1_Init+0x64>)
 800368e:	f002 fb45 	bl	8005d1c <HAL_SPI_Init>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003698:	f000 f940 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800369c:	bf00      	nop
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20000d5c 	.word	0x20000d5c
 80036a4:	40013000 	.word	0x40013000

080036a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80036ac:	4b17      	ldr	r3, [pc, #92]	@ (800370c <MX_SPI2_Init+0x64>)
 80036ae:	4a18      	ldr	r2, [pc, #96]	@ (8003710 <MX_SPI2_Init+0x68>)
 80036b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80036b2:	4b16      	ldr	r3, [pc, #88]	@ (800370c <MX_SPI2_Init+0x64>)
 80036b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80036b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80036ba:	4b14      	ldr	r3, [pc, #80]	@ (800370c <MX_SPI2_Init+0x64>)
 80036bc:	2200      	movs	r2, #0
 80036be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036c0:	4b12      	ldr	r3, [pc, #72]	@ (800370c <MX_SPI2_Init+0x64>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036c6:	4b11      	ldr	r3, [pc, #68]	@ (800370c <MX_SPI2_Init+0x64>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036cc:	4b0f      	ldr	r3, [pc, #60]	@ (800370c <MX_SPI2_Init+0x64>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036d2:	4b0e      	ldr	r3, [pc, #56]	@ (800370c <MX_SPI2_Init+0x64>)
 80036d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80036da:	4b0c      	ldr	r3, [pc, #48]	@ (800370c <MX_SPI2_Init+0x64>)
 80036dc:	2208      	movs	r2, #8
 80036de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036e0:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <MX_SPI2_Init+0x64>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036e6:	4b09      	ldr	r3, [pc, #36]	@ (800370c <MX_SPI2_Init+0x64>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ec:	4b07      	ldr	r3, [pc, #28]	@ (800370c <MX_SPI2_Init+0x64>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80036f2:	4b06      	ldr	r3, [pc, #24]	@ (800370c <MX_SPI2_Init+0x64>)
 80036f4:	220a      	movs	r2, #10
 80036f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80036f8:	4804      	ldr	r0, [pc, #16]	@ (800370c <MX_SPI2_Init+0x64>)
 80036fa:	f002 fb0f 	bl	8005d1c <HAL_SPI_Init>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003704:	f000 f90a 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003708:	bf00      	nop
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000db4 	.word	0x20000db4
 8003710:	40003800 	.word	0x40003800

08003714 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800371a:	f107 0308 	add.w	r3, r7, #8
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	609a      	str	r2, [r3, #8]
 8003726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003728:	463b      	mov	r3, r7
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003730:	4b1e      	ldr	r3, [pc, #120]	@ (80037ac <MX_TIM1_Init+0x98>)
 8003732:	4a1f      	ldr	r2, [pc, #124]	@ (80037b0 <MX_TIM1_Init+0x9c>)
 8003734:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8003736:	4b1d      	ldr	r3, [pc, #116]	@ (80037ac <MX_TIM1_Init+0x98>)
 8003738:	2247      	movs	r2, #71	@ 0x47
 800373a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800373c:	4b1b      	ldr	r3, [pc, #108]	@ (80037ac <MX_TIM1_Init+0x98>)
 800373e:	2200      	movs	r2, #0
 8003740:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003742:	4b1a      	ldr	r3, [pc, #104]	@ (80037ac <MX_TIM1_Init+0x98>)
 8003744:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003748:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800374a:	4b18      	ldr	r3, [pc, #96]	@ (80037ac <MX_TIM1_Init+0x98>)
 800374c:	2200      	movs	r2, #0
 800374e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003750:	4b16      	ldr	r3, [pc, #88]	@ (80037ac <MX_TIM1_Init+0x98>)
 8003752:	2200      	movs	r2, #0
 8003754:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003756:	4b15      	ldr	r3, [pc, #84]	@ (80037ac <MX_TIM1_Init+0x98>)
 8003758:	2200      	movs	r2, #0
 800375a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800375c:	4813      	ldr	r0, [pc, #76]	@ (80037ac <MX_TIM1_Init+0x98>)
 800375e:	f002 ff08 	bl	8006572 <HAL_TIM_Base_Init>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003768:	f000 f8d8 	bl	800391c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800376c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003770:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003772:	f107 0308 	add.w	r3, r7, #8
 8003776:	4619      	mov	r1, r3
 8003778:	480c      	ldr	r0, [pc, #48]	@ (80037ac <MX_TIM1_Init+0x98>)
 800377a:	f002 ff93 	bl	80066a4 <HAL_TIM_ConfigClockSource>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003784:	f000 f8ca 	bl	800391c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003788:	2300      	movs	r3, #0
 800378a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800378c:	2300      	movs	r3, #0
 800378e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003790:	463b      	mov	r3, r7
 8003792:	4619      	mov	r1, r3
 8003794:	4805      	ldr	r0, [pc, #20]	@ (80037ac <MX_TIM1_Init+0x98>)
 8003796:	f003 f951 	bl	8006a3c <HAL_TIMEx_MasterConfigSynchronization>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80037a0:	f000 f8bc 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80037a4:	bf00      	nop
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000e50 	.word	0x20000e50
 80037b0:	40012c00 	.word	0x40012c00

080037b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037b8:	4b11      	ldr	r3, [pc, #68]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037ba:	4a12      	ldr	r2, [pc, #72]	@ (8003804 <MX_USART1_UART_Init+0x50>)
 80037bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80037be:	4b10      	ldr	r3, [pc, #64]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80037c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037d8:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037da:	220c      	movs	r2, #12
 80037dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037de:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037e4:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037ea:	4805      	ldr	r0, [pc, #20]	@ (8003800 <MX_USART1_UART_Init+0x4c>)
 80037ec:	f003 f984 	bl	8006af8 <HAL_UART_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80037f6:	f000 f891 	bl	800391c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000e98 	.word	0x20000e98
 8003804:	40013800 	.word	0x40013800

08003808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800380e:	4b0c      	ldr	r3, [pc, #48]	@ (8003840 <MX_DMA_Init+0x38>)
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	4a0b      	ldr	r2, [pc, #44]	@ (8003840 <MX_DMA_Init+0x38>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6153      	str	r3, [r2, #20]
 800381a:	4b09      	ldr	r3, [pc, #36]	@ (8003840 <MX_DMA_Init+0x38>)
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	607b      	str	r3, [r7, #4]
 8003824:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003826:	2200      	movs	r2, #0
 8003828:	2100      	movs	r1, #0
 800382a:	200d      	movs	r0, #13
 800382c:	f000 fd6b 	bl	8004306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003830:	200d      	movs	r0, #13
 8003832:	f000 fd84 	bl	800433e <HAL_NVIC_EnableIRQ>

}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000

08003844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800384a:	f107 0310 	add.w	r3, r7, #16
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003858:	4b2d      	ldr	r3, [pc, #180]	@ (8003910 <MX_GPIO_Init+0xcc>)
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	4a2c      	ldr	r2, [pc, #176]	@ (8003910 <MX_GPIO_Init+0xcc>)
 800385e:	f043 0320 	orr.w	r3, r3, #32
 8003862:	6193      	str	r3, [r2, #24]
 8003864:	4b2a      	ldr	r3, [pc, #168]	@ (8003910 <MX_GPIO_Init+0xcc>)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003870:	4b27      	ldr	r3, [pc, #156]	@ (8003910 <MX_GPIO_Init+0xcc>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	4a26      	ldr	r2, [pc, #152]	@ (8003910 <MX_GPIO_Init+0xcc>)
 8003876:	f043 0304 	orr.w	r3, r3, #4
 800387a:	6193      	str	r3, [r2, #24]
 800387c:	4b24      	ldr	r3, [pc, #144]	@ (8003910 <MX_GPIO_Init+0xcc>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003888:	4b21      	ldr	r3, [pc, #132]	@ (8003910 <MX_GPIO_Init+0xcc>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	4a20      	ldr	r2, [pc, #128]	@ (8003910 <MX_GPIO_Init+0xcc>)
 800388e:	f043 0308 	orr.w	r3, r3, #8
 8003892:	6193      	str	r3, [r2, #24]
 8003894:	4b1e      	ldr	r3, [pc, #120]	@ (8003910 <MX_GPIO_Init+0xcc>)
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80038a0:	2201      	movs	r2, #1
 80038a2:	2110      	movs	r1, #16
 80038a4:	481b      	ldr	r0, [pc, #108]	@ (8003914 <MX_GPIO_Init+0xd0>)
 80038a6:	f001 f914 	bl	8004ad2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);
 80038aa:	2200      	movs	r2, #0
 80038ac:	f240 6103 	movw	r1, #1539	@ 0x603
 80038b0:	4819      	ldr	r0, [pc, #100]	@ (8003918 <MX_GPIO_Init+0xd4>)
 80038b2:	f001 f90e 	bl	8004ad2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80038b6:	2308      	movs	r3, #8
 80038b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038c2:	f107 0310 	add.w	r3, r7, #16
 80038c6:	4619      	mov	r1, r3
 80038c8:	4812      	ldr	r0, [pc, #72]	@ (8003914 <MX_GPIO_Init+0xd0>)
 80038ca:	f000 ff67 	bl	800479c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80038ce:	2310      	movs	r3, #16
 80038d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038d2:	2301      	movs	r3, #1
 80038d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038da:	2302      	movs	r3, #2
 80038dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038de:	f107 0310 	add.w	r3, r7, #16
 80038e2:	4619      	mov	r1, r3
 80038e4:	480b      	ldr	r0, [pc, #44]	@ (8003914 <MX_GPIO_Init+0xd0>)
 80038e6:	f000 ff59 	bl	800479c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_9;
 80038ea:	f240 6303 	movw	r3, #1539	@ 0x603
 80038ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f0:	2301      	movs	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f8:	2302      	movs	r3, #2
 80038fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038fc:	f107 0310 	add.w	r3, r7, #16
 8003900:	4619      	mov	r1, r3
 8003902:	4805      	ldr	r0, [pc, #20]	@ (8003918 <MX_GPIO_Init+0xd4>)
 8003904:	f000 ff4a 	bl	800479c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003908:	bf00      	nop
 800390a:	3720      	adds	r7, #32
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	40010800 	.word	0x40010800
 8003918:	40010c00 	.word	0x40010c00

0800391c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003920:	b672      	cpsid	i
}
 8003922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003924:	bf00      	nop
 8003926:	e7fd      	b.n	8003924 <Error_Handler+0x8>

08003928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800392e:	4b15      	ldr	r3, [pc, #84]	@ (8003984 <HAL_MspInit+0x5c>)
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	4a14      	ldr	r2, [pc, #80]	@ (8003984 <HAL_MspInit+0x5c>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6193      	str	r3, [r2, #24]
 800393a:	4b12      	ldr	r3, [pc, #72]	@ (8003984 <HAL_MspInit+0x5c>)
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003946:	4b0f      	ldr	r3, [pc, #60]	@ (8003984 <HAL_MspInit+0x5c>)
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	4a0e      	ldr	r2, [pc, #56]	@ (8003984 <HAL_MspInit+0x5c>)
 800394c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003950:	61d3      	str	r3, [r2, #28]
 8003952:	4b0c      	ldr	r3, [pc, #48]	@ (8003984 <HAL_MspInit+0x5c>)
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800395a:	607b      	str	r3, [r7, #4]
 800395c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800395e:	4b0a      	ldr	r3, [pc, #40]	@ (8003988 <HAL_MspInit+0x60>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	4a04      	ldr	r2, [pc, #16]	@ (8003988 <HAL_MspInit+0x60>)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	40021000 	.word	0x40021000
 8003988:	40010000 	.word	0x40010000

0800398c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a0b      	ldr	r2, [pc, #44]	@ (80039c8 <HAL_RTC_MspInit+0x3c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d110      	bne.n	80039c0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800399e:	f001 f8b1 	bl	8004b04 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80039a2:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <HAL_RTC_MspInit+0x40>)
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	4a09      	ldr	r2, [pc, #36]	@ (80039cc <HAL_RTC_MspInit+0x40>)
 80039a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80039ac:	61d3      	str	r3, [r2, #28]
 80039ae:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <HAL_RTC_MspInit+0x40>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80039ba:	4b05      	ldr	r3, [pc, #20]	@ (80039d0 <HAL_RTC_MspInit+0x44>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80039c0:	bf00      	nop
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40002800 	.word	0x40002800
 80039cc:	40021000 	.word	0x40021000
 80039d0:	4242043c 	.word	0x4242043c

080039d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	@ 0x28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039dc:	f107 0318 	add.w	r3, r7, #24
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
 80039e6:	609a      	str	r2, [r3, #8]
 80039e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a4b      	ldr	r2, [pc, #300]	@ (8003b1c <HAL_SPI_MspInit+0x148>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d157      	bne.n	8003aa4 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003b20 <HAL_SPI_MspInit+0x14c>)
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	4a49      	ldr	r2, [pc, #292]	@ (8003b20 <HAL_SPI_MspInit+0x14c>)
 80039fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039fe:	6193      	str	r3, [r2, #24]
 8003a00:	4b47      	ldr	r3, [pc, #284]	@ (8003b20 <HAL_SPI_MspInit+0x14c>)
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a0c:	4b44      	ldr	r3, [pc, #272]	@ (8003b20 <HAL_SPI_MspInit+0x14c>)
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	4a43      	ldr	r2, [pc, #268]	@ (8003b20 <HAL_SPI_MspInit+0x14c>)
 8003a12:	f043 0304 	orr.w	r3, r3, #4
 8003a16:	6193      	str	r3, [r2, #24]
 8003a18:	4b41      	ldr	r3, [pc, #260]	@ (8003b20 <HAL_SPI_MspInit+0x14c>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003a24:	23a0      	movs	r3, #160	@ 0xa0
 8003a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a30:	f107 0318 	add.w	r3, r7, #24
 8003a34:	4619      	mov	r1, r3
 8003a36:	483b      	ldr	r0, [pc, #236]	@ (8003b24 <HAL_SPI_MspInit+0x150>)
 8003a38:	f000 feb0 	bl	800479c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a3c:	2340      	movs	r3, #64	@ 0x40
 8003a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a48:	f107 0318 	add.w	r3, r7, #24
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4835      	ldr	r0, [pc, #212]	@ (8003b24 <HAL_SPI_MspInit+0x150>)
 8003a50:	f000 fea4 	bl	800479c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003a54:	4b34      	ldr	r3, [pc, #208]	@ (8003b28 <HAL_SPI_MspInit+0x154>)
 8003a56:	4a35      	ldr	r2, [pc, #212]	@ (8003b2c <HAL_SPI_MspInit+0x158>)
 8003a58:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a5a:	4b33      	ldr	r3, [pc, #204]	@ (8003b28 <HAL_SPI_MspInit+0x154>)
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a60:	4b31      	ldr	r3, [pc, #196]	@ (8003b28 <HAL_SPI_MspInit+0x154>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a66:	4b30      	ldr	r3, [pc, #192]	@ (8003b28 <HAL_SPI_MspInit+0x154>)
 8003a68:	2280      	movs	r2, #128	@ 0x80
 8003a6a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a6c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b28 <HAL_SPI_MspInit+0x154>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a72:	4b2d      	ldr	r3, [pc, #180]	@ (8003b28 <HAL_SPI_MspInit+0x154>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003a78:	4b2b      	ldr	r3, [pc, #172]	@ (8003b28 <HAL_SPI_MspInit+0x154>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003b28 <HAL_SPI_MspInit+0x154>)
 8003a80:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003a84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003a86:	4828      	ldr	r0, [pc, #160]	@ (8003b28 <HAL_SPI_MspInit+0x154>)
 8003a88:	f000 fc74 	bl	8004374 <HAL_DMA_Init>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8003a92:	f7ff ff43 	bl	800391c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a23      	ldr	r2, [pc, #140]	@ (8003b28 <HAL_SPI_MspInit+0x154>)
 8003a9a:	649a      	str	r2, [r3, #72]	@ 0x48
 8003a9c:	4a22      	ldr	r2, [pc, #136]	@ (8003b28 <HAL_SPI_MspInit+0x154>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003aa2:	e036      	b.n	8003b12 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI2)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a21      	ldr	r2, [pc, #132]	@ (8003b30 <HAL_SPI_MspInit+0x15c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d131      	bne.n	8003b12 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003aae:	4b1c      	ldr	r3, [pc, #112]	@ (8003b20 <HAL_SPI_MspInit+0x14c>)
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b20 <HAL_SPI_MspInit+0x14c>)
 8003ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ab8:	61d3      	str	r3, [r2, #28]
 8003aba:	4b19      	ldr	r3, [pc, #100]	@ (8003b20 <HAL_SPI_MspInit+0x14c>)
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac6:	4b16      	ldr	r3, [pc, #88]	@ (8003b20 <HAL_SPI_MspInit+0x14c>)
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	4a15      	ldr	r2, [pc, #84]	@ (8003b20 <HAL_SPI_MspInit+0x14c>)
 8003acc:	f043 0308 	orr.w	r3, r3, #8
 8003ad0:	6193      	str	r3, [r2, #24]
 8003ad2:	4b13      	ldr	r3, [pc, #76]	@ (8003b20 <HAL_SPI_MspInit+0x14c>)
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003ade:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8003ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aec:	f107 0318 	add.w	r3, r7, #24
 8003af0:	4619      	mov	r1, r3
 8003af2:	4810      	ldr	r0, [pc, #64]	@ (8003b34 <HAL_SPI_MspInit+0x160>)
 8003af4:	f000 fe52 	bl	800479c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003af8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b06:	f107 0318 	add.w	r3, r7, #24
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4809      	ldr	r0, [pc, #36]	@ (8003b34 <HAL_SPI_MspInit+0x160>)
 8003b0e:	f000 fe45 	bl	800479c <HAL_GPIO_Init>
}
 8003b12:	bf00      	nop
 8003b14:	3728      	adds	r7, #40	@ 0x28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40013000 	.word	0x40013000
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40010800 	.word	0x40010800
 8003b28:	20000e0c 	.word	0x20000e0c
 8003b2c:	40020030 	.word	0x40020030
 8003b30:	40003800 	.word	0x40003800
 8003b34:	40010c00 	.word	0x40010c00

08003b38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a09      	ldr	r2, [pc, #36]	@ (8003b6c <HAL_TIM_Base_MspInit+0x34>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d10b      	bne.n	8003b62 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b4a:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <HAL_TIM_Base_MspInit+0x38>)
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	4a08      	ldr	r2, [pc, #32]	@ (8003b70 <HAL_TIM_Base_MspInit+0x38>)
 8003b50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b54:	6193      	str	r3, [r2, #24]
 8003b56:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <HAL_TIM_Base_MspInit+0x38>)
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40021000 	.word	0x40021000

08003b74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08a      	sub	sp, #40	@ 0x28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7c:	f107 0314 	add.w	r3, r7, #20
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a26      	ldr	r2, [pc, #152]	@ (8003c28 <HAL_UART_MspInit+0xb4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d145      	bne.n	8003c20 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b94:	4b25      	ldr	r3, [pc, #148]	@ (8003c2c <HAL_UART_MspInit+0xb8>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	4a24      	ldr	r2, [pc, #144]	@ (8003c2c <HAL_UART_MspInit+0xb8>)
 8003b9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b9e:	6193      	str	r3, [r2, #24]
 8003ba0:	4b22      	ldr	r3, [pc, #136]	@ (8003c2c <HAL_UART_MspInit+0xb8>)
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bac:	4b1f      	ldr	r3, [pc, #124]	@ (8003c2c <HAL_UART_MspInit+0xb8>)
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8003c2c <HAL_UART_MspInit+0xb8>)
 8003bb2:	f043 0308 	orr.w	r3, r3, #8
 8003bb6:	6193      	str	r3, [r2, #24]
 8003bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c2c <HAL_UART_MspInit+0xb8>)
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003bc4:	2340      	movs	r3, #64	@ 0x40
 8003bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4816      	ldr	r0, [pc, #88]	@ (8003c30 <HAL_UART_MspInit+0xbc>)
 8003bd8:	f000 fde0 	bl	800479c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003bdc:	2380      	movs	r3, #128	@ 0x80
 8003bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	4619      	mov	r1, r3
 8003bee:	4810      	ldr	r0, [pc, #64]	@ (8003c30 <HAL_UART_MspInit+0xbc>)
 8003bf0:	f000 fdd4 	bl	800479c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c34 <HAL_UART_MspInit+0xc0>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c04:	f043 0304 	orr.w	r3, r3, #4
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c34 <HAL_UART_MspInit+0xc0>)
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c10:	2200      	movs	r2, #0
 8003c12:	2100      	movs	r1, #0
 8003c14:	2025      	movs	r0, #37	@ 0x25
 8003c16:	f000 fb76 	bl	8004306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c1a:	2025      	movs	r0, #37	@ 0x25
 8003c1c:	f000 fb8f 	bl	800433e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003c20:	bf00      	nop
 8003c22:	3728      	adds	r7, #40	@ 0x28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40013800 	.word	0x40013800
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40010c00 	.word	0x40010c00
 8003c34:	40010000 	.word	0x40010000

08003c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c3c:	bf00      	nop
 8003c3e:	e7fd      	b.n	8003c3c <NMI_Handler+0x4>

08003c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c44:	bf00      	nop
 8003c46:	e7fd      	b.n	8003c44 <HardFault_Handler+0x4>

08003c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c4c:	bf00      	nop
 8003c4e:	e7fd      	b.n	8003c4c <MemManage_Handler+0x4>

08003c50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c54:	bf00      	nop
 8003c56:	e7fd      	b.n	8003c54 <BusFault_Handler+0x4>

08003c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c5c:	bf00      	nop
 8003c5e:	e7fd      	b.n	8003c5c <UsageFault_Handler+0x4>

08003c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr

08003c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c70:	bf00      	nop
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr

08003c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c88:	f000 fa26 	bl	80040d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c8c:	bf00      	nop
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003c94:	4802      	ldr	r0, [pc, #8]	@ (8003ca0 <DMA1_Channel3_IRQHandler+0x10>)
 8003c96:	f000 fc7b 	bl	8004590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000e0c 	.word	0x20000e0c

08003ca4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ca8:	4802      	ldr	r0, [pc, #8]	@ (8003cb4 <USART1_IRQHandler+0x10>)
 8003caa:	f003 f825 	bl	8006cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000e98 	.word	0x20000e98

08003cb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return 1;
 8003cbc:	2301      	movs	r3, #1
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr

08003cc6 <_kill>:

int _kill(int pid, int sig)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003cd0:	f004 fb50 	bl	8008374 <__errno>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2216      	movs	r2, #22
 8003cd8:	601a      	str	r2, [r3, #0]
  return -1;
 8003cda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <_exit>:

void _exit (int status)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003cee:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff ffe7 	bl	8003cc6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <_exit+0x12>

08003cfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	e00a      	b.n	8003d24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d0e:	f3af 8000 	nop.w
 8003d12:	4601      	mov	r1, r0
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	60ba      	str	r2, [r7, #8]
 8003d1a:	b2ca      	uxtb	r2, r1
 8003d1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	3301      	adds	r3, #1
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	dbf0      	blt.n	8003d0e <_read+0x12>
  }

  return len;
 8003d2c:	687b      	ldr	r3, [r7, #4]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b086      	sub	sp, #24
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	60f8      	str	r0, [r7, #12]
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	e009      	b.n	8003d5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	60ba      	str	r2, [r7, #8]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	dbf1      	blt.n	8003d48 <_write+0x12>
  }
  return len;
 8003d64:	687b      	ldr	r3, [r7, #4]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <_close>:

int _close(int file)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr

08003d84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d94:	605a      	str	r2, [r3, #4]
  return 0;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr

08003da2 <_isatty>:

int _isatty(int file)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003daa:	2301      	movs	r3, #1
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr

08003db6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b085      	sub	sp, #20
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
	...

08003dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003dd8:	4a14      	ldr	r2, [pc, #80]	@ (8003e2c <_sbrk+0x5c>)
 8003dda:	4b15      	ldr	r3, [pc, #84]	@ (8003e30 <_sbrk+0x60>)
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003de4:	4b13      	ldr	r3, [pc, #76]	@ (8003e34 <_sbrk+0x64>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d102      	bne.n	8003df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dec:	4b11      	ldr	r3, [pc, #68]	@ (8003e34 <_sbrk+0x64>)
 8003dee:	4a12      	ldr	r2, [pc, #72]	@ (8003e38 <_sbrk+0x68>)
 8003df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003df2:	4b10      	ldr	r3, [pc, #64]	@ (8003e34 <_sbrk+0x64>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d207      	bcs.n	8003e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e00:	f004 fab8 	bl	8008374 <__errno>
 8003e04:	4603      	mov	r3, r0
 8003e06:	220c      	movs	r2, #12
 8003e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0e:	e009      	b.n	8003e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e10:	4b08      	ldr	r3, [pc, #32]	@ (8003e34 <_sbrk+0x64>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e16:	4b07      	ldr	r3, [pc, #28]	@ (8003e34 <_sbrk+0x64>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	4a05      	ldr	r2, [pc, #20]	@ (8003e34 <_sbrk+0x64>)
 8003e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e22:	68fb      	ldr	r3, [r7, #12]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20005000 	.word	0x20005000
 8003e30:	00000400 	.word	0x00000400
 8003e34:	20001b2c 	.word	0x20001b2c
 8003e38:	20001c80 	.word	0x20001c80

08003e3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr

08003e48 <ILI9341_TouchSelect>:
#include "touch.h"

#define READ_X 0xD0
#define READ_Y 0x90

static void ILI9341_TouchSelect() {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TOUCH_CS_PORT, TOUCH_CS_PIN , GPIO_PIN_RESET);
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2110      	movs	r1, #16
 8003e50:	4802      	ldr	r0, [pc, #8]	@ (8003e5c <ILI9341_TouchSelect+0x14>)
 8003e52:	f000 fe3e 	bl	8004ad2 <HAL_GPIO_WritePin>
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40010800 	.word	0x40010800

08003e60 <ILI9341_TouchUnselect>:

void ILI9341_TouchUnselect() {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TOUCH_CS_PORT, TOUCH_CS_PIN , GPIO_PIN_SET);
 8003e64:	2201      	movs	r2, #1
 8003e66:	2110      	movs	r1, #16
 8003e68:	4802      	ldr	r0, [pc, #8]	@ (8003e74 <ILI9341_TouchUnselect+0x14>)
 8003e6a:	f000 fe32 	bl	8004ad2 <HAL_GPIO_WritePin>
}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40010800 	.word	0x40010800

08003e78 <ILI9341_TouchPressed>:

bool ILI9341_TouchPressed() {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(TOUCH_IRQ_PORT, TOUCH_IRQ_PIN) == GPIO_PIN_RESET;
 8003e7c:	2108      	movs	r1, #8
 8003e7e:	4805      	ldr	r0, [pc, #20]	@ (8003e94 <ILI9341_TouchPressed+0x1c>)
 8003e80:	f000 fe10 	bl	8004aa4 <HAL_GPIO_ReadPin>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bf0c      	ite	eq
 8003e8a:	2301      	moveq	r3, #1
 8003e8c:	2300      	movne	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40010800 	.word	0x40010800

08003e98 <ILI9341_TouchGetCoordinates>:

bool ILI9341_TouchGetCoordinates(uint16_t* x, uint16_t* y) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08c      	sub	sp, #48	@ 0x30
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

    ILI9341_TouchSelect();
 8003ea2:	f7ff ffd1 	bl	8003e48 <ILI9341_TouchSelect>

    uint32_t avg_x = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t avg_y = 0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	77fb      	strb	r3, [r7, #31]
    for(uint8_t i = 0; i < 16; i++) {
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	77bb      	strb	r3, [r7, #30]
 8003eb6:	e03f      	b.n	8003f38 <ILI9341_TouchGetCoordinates+0xa0>
        if(!ILI9341_TouchPressed())
 8003eb8:	f7ff ffde 	bl	8003e78 <ILI9341_TouchPressed>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f083 0301 	eor.w	r3, r3, #1
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d13b      	bne.n	8003f40 <ILI9341_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 8003ec8:	7ffb      	ldrb	r3, [r7, #31]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	77fb      	strb	r3, [r7, #31]

        HAL_SPI_Transmit(&hspi2, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	4944      	ldr	r1, [pc, #272]	@ (8003fe8 <ILI9341_TouchGetCoordinates+0x150>)
 8003ed6:	4845      	ldr	r0, [pc, #276]	@ (8003fec <ILI9341_TouchGetCoordinates+0x154>)
 8003ed8:	f001 ffa4 	bl	8005e24 <HAL_SPI_Transmit>
        uint8_t y_raw[2];
        HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 8003edc:	f107 0210 	add.w	r2, r7, #16
 8003ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	4941      	ldr	r1, [pc, #260]	@ (8003ff0 <ILI9341_TouchGetCoordinates+0x158>)
 8003eea:	4840      	ldr	r0, [pc, #256]	@ (8003fec <ILI9341_TouchGetCoordinates+0x154>)
 8003eec:	f002 f8de 	bl	80060ac <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&hspi2, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 8003ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	493f      	ldr	r1, [pc, #252]	@ (8003ff4 <ILI9341_TouchGetCoordinates+0x15c>)
 8003ef8:	483c      	ldr	r0, [pc, #240]	@ (8003fec <ILI9341_TouchGetCoordinates+0x154>)
 8003efa:	f001 ff93 	bl	8005e24 <HAL_SPI_Transmit>
        uint8_t x_raw[2];
        HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 8003efe:	f107 020c 	add.w	r2, r7, #12
 8003f02:	f04f 33ff 	mov.w	r3, #4294967295
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2302      	movs	r3, #2
 8003f0a:	4939      	ldr	r1, [pc, #228]	@ (8003ff0 <ILI9341_TouchGetCoordinates+0x158>)
 8003f0c:	4837      	ldr	r0, [pc, #220]	@ (8003fec <ILI9341_TouchGetCoordinates+0x154>)
 8003f0e:	f002 f8cd 	bl	80060ac <HAL_SPI_TransmitReceive>

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 8003f12:	7b3b      	ldrb	r3, [r7, #12]
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	7b7a      	ldrb	r2, [r7, #13]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	4413      	add	r3, r2
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 8003f22:	7c3b      	ldrb	r3, [r7, #16]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	7c7a      	ldrb	r2, [r7, #17]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	4413      	add	r3, r2
 8003f30:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++) {
 8003f32:	7fbb      	ldrb	r3, [r7, #30]
 8003f34:	3301      	adds	r3, #1
 8003f36:	77bb      	strb	r3, [r7, #30]
 8003f38:	7fbb      	ldrb	r3, [r7, #30]
 8003f3a:	2b0f      	cmp	r3, #15
 8003f3c:	d9bc      	bls.n	8003eb8 <ILI9341_TouchGetCoordinates+0x20>
 8003f3e:	e000      	b.n	8003f42 <ILI9341_TouchGetCoordinates+0xaa>
            break;
 8003f40:	bf00      	nop
    }

    ILI9341_TouchUnselect();
 8003f42:	f7ff ff8d 	bl	8003e60 <ILI9341_TouchUnselect>

    if(nsamples < 16)
 8003f46:	7ffb      	ldrb	r3, [r7, #31]
 8003f48:	2b0f      	cmp	r3, #15
 8003f4a:	d801      	bhi.n	8003f50 <ILI9341_TouchGetCoordinates+0xb8>
        return false;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e047      	b.n	8003fe0 <ILI9341_TouchGetCoordinates+0x148>

    uint32_t raw_x = (avg_x / 16);
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	61bb      	str	r3, [r7, #24]
    if(raw_x < ILI9341_TOUCH_MIN_RAW_X) raw_x = ILI9341_TOUCH_MIN_RAW_X;
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f240 52db 	movw	r2, #1499	@ 0x5db
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d802      	bhi.n	8003f66 <ILI9341_TouchGetCoordinates+0xce>
 8003f60:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8003f64:	61bb      	str	r3, [r7, #24]
    if(raw_x > ILI9341_TOUCH_MAX_RAW_X) raw_x = ILI9341_TOUCH_MAX_RAW_X;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	f647 1218 	movw	r2, #31000	@ 0x7918
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d902      	bls.n	8003f76 <ILI9341_TouchGetCoordinates+0xde>
 8003f70:	f647 1318 	movw	r3, #31000	@ 0x7918
 8003f74:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	617b      	str	r3, [r7, #20]
    if(raw_y < ILI9341_TOUCH_MIN_RAW_Y) raw_y = ILI9341_TOUCH_MIN_RAW_Y;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f640 42cb 	movw	r2, #3275	@ 0xccb
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d802      	bhi.n	8003f8c <ILI9341_TouchGetCoordinates+0xf4>
 8003f86:	f640 43cc 	movw	r3, #3276	@ 0xccc
 8003f8a:	617b      	str	r3, [r7, #20]
    if(raw_y > ILI9341_TOUCH_MAX_RAW_Y) raw_y = ILI9341_TOUCH_MAX_RAW_Y;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f247 529e 	movw	r2, #30110	@ 0x759e
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d902      	bls.n	8003f9c <ILI9341_TouchGetCoordinates+0x104>
 8003f96:	f247 539e 	movw	r3, #30110	@ 0x759e
 8003f9a:	617b      	str	r3, [r7, #20]

    // Uncomment this line to calibrate touchscreen:
    // UART_Printf("raw_x = %d, raw_y = %d\r\n", x, y);

    *x = (raw_x - ILI9341_TOUCH_MIN_RAW_X) * ILI9341_TOUCH_SCALE_X / (ILI9341_TOUCH_MAX_RAW_X - ILI9341_TOUCH_MIN_RAW_X);
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	f5a3 23af 	sub.w	r3, r3, #358400	@ 0x57800
 8003faa:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
 8003fae:	4a12      	ldr	r2, [pc, #72]	@ (8003ff8 <ILI9341_TouchGetCoordinates+0x160>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	0b9b      	lsrs	r3, r3, #14
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	801a      	strh	r2, [r3, #0]
    *y = (raw_y - ILI9341_TOUCH_MIN_RAW_Y) * ILI9341_TOUCH_SCALE_Y / (ILI9341_TOUCH_MAX_RAW_Y - ILI9341_TOUCH_MIN_RAW_Y);
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	019b      	lsls	r3, r3, #6
 8003fc6:	f5a3 237f 	sub.w	r3, r3, #1044480	@ 0xff000
 8003fca:	f5a3 6370 	sub.w	r3, r3, #3840	@ 0xf00
 8003fce:	085b      	lsrs	r3, r3, #1
 8003fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8003ffc <ILI9341_TouchGetCoordinates+0x164>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	0a9b      	lsrs	r3, r3, #10
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	801a      	strh	r2, [r3, #0]

    return true;
 8003fde:	2301      	movs	r3, #1
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3728      	adds	r7, #40	@ 0x28
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	0800f834 	.word	0x0800f834
 8003fec:	20000db4 	.word	0x20000db4
 8003ff0:	0800f838 	.word	0x0800f838
 8003ff4:	0800f83c 	.word	0x0800f83c
 8003ff8:	8e2e0727 	.word	0x8e2e0727
 8003ffc:	1389c755 	.word	0x1389c755

08004000 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004000:	f7ff ff1c 	bl	8003e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004004:	480b      	ldr	r0, [pc, #44]	@ (8004034 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004006:	490c      	ldr	r1, [pc, #48]	@ (8004038 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004008:	4a0c      	ldr	r2, [pc, #48]	@ (800403c <LoopFillZerobss+0x16>)
  movs r3, #0
 800400a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800400c:	e002      	b.n	8004014 <LoopCopyDataInit>

0800400e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800400e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004012:	3304      	adds	r3, #4

08004014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004018:	d3f9      	bcc.n	800400e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800401a:	4a09      	ldr	r2, [pc, #36]	@ (8004040 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800401c:	4c09      	ldr	r4, [pc, #36]	@ (8004044 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800401e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004020:	e001      	b.n	8004026 <LoopFillZerobss>

08004022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004024:	3204      	adds	r2, #4

08004026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004028:	d3fb      	bcc.n	8004022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800402a:	f004 f9a9 	bl	8008380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800402e:	f7ff fa21 	bl	8003474 <main>
  bx lr
 8004032:	4770      	bx	lr
  ldr r0, =_sdata
 8004034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004038:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 800403c:	0800fbe8 	.word	0x0800fbe8
  ldr r2, =_sbss
 8004040:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8004044:	20001c80 	.word	0x20001c80

08004048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004048:	e7fe      	b.n	8004048 <ADC1_2_IRQHandler>
	...

0800404c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004050:	4b08      	ldr	r3, [pc, #32]	@ (8004074 <HAL_Init+0x28>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a07      	ldr	r2, [pc, #28]	@ (8004074 <HAL_Init+0x28>)
 8004056:	f043 0310 	orr.w	r3, r3, #16
 800405a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800405c:	2003      	movs	r0, #3
 800405e:	f000 f947 	bl	80042f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004062:	200f      	movs	r0, #15
 8004064:	f000 f808 	bl	8004078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004068:	f7ff fc5e 	bl	8003928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40022000 	.word	0x40022000

08004078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004080:	4b12      	ldr	r3, [pc, #72]	@ (80040cc <HAL_InitTick+0x54>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b12      	ldr	r3, [pc, #72]	@ (80040d0 <HAL_InitTick+0x58>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	4619      	mov	r1, r3
 800408a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800408e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f95f 	bl	800435a <HAL_SYSTICK_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e00e      	b.n	80040c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b0f      	cmp	r3, #15
 80040aa:	d80a      	bhi.n	80040c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040ac:	2200      	movs	r2, #0
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295
 80040b4:	f000 f927 	bl	8004306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040b8:	4a06      	ldr	r2, [pc, #24]	@ (80040d4 <HAL_InitTick+0x5c>)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	e000      	b.n	80040c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000068 	.word	0x20000068
 80040d0:	20000070 	.word	0x20000070
 80040d4:	2000006c 	.word	0x2000006c

080040d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040dc:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <HAL_IncTick+0x1c>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <HAL_IncTick+0x20>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4413      	add	r3, r2
 80040e8:	4a03      	ldr	r2, [pc, #12]	@ (80040f8 <HAL_IncTick+0x20>)
 80040ea:	6013      	str	r3, [r2, #0]
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr
 80040f4:	20000070 	.word	0x20000070
 80040f8:	20001b30 	.word	0x20001b30

080040fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004100:	4b02      	ldr	r3, [pc, #8]	@ (800410c <HAL_GetTick+0x10>)
 8004102:	681b      	ldr	r3, [r3, #0]
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr
 800410c:	20001b30 	.word	0x20001b30

08004110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004118:	f7ff fff0 	bl	80040fc <HAL_GetTick>
 800411c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004128:	d005      	beq.n	8004136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800412a:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <HAL_Delay+0x44>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004136:	bf00      	nop
 8004138:	f7ff ffe0 	bl	80040fc <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	429a      	cmp	r2, r3
 8004146:	d8f7      	bhi.n	8004138 <HAL_Delay+0x28>
  {
  }
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	20000070 	.word	0x20000070

08004158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004168:	4b0c      	ldr	r3, [pc, #48]	@ (800419c <__NVIC_SetPriorityGrouping+0x44>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004174:	4013      	ands	r3, r2
 8004176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004180:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800418a:	4a04      	ldr	r2, [pc, #16]	@ (800419c <__NVIC_SetPriorityGrouping+0x44>)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	60d3      	str	r3, [r2, #12]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041a4:	4b04      	ldr	r3, [pc, #16]	@ (80041b8 <__NVIC_GetPriorityGrouping+0x18>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	0a1b      	lsrs	r3, r3, #8
 80041aa:	f003 0307 	and.w	r3, r3, #7
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	e000ed00 	.word	0xe000ed00

080041bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	db0b      	blt.n	80041e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ce:	79fb      	ldrb	r3, [r7, #7]
 80041d0:	f003 021f 	and.w	r2, r3, #31
 80041d4:	4906      	ldr	r1, [pc, #24]	@ (80041f0 <__NVIC_EnableIRQ+0x34>)
 80041d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	2001      	movs	r0, #1
 80041de:	fa00 f202 	lsl.w	r2, r0, r2
 80041e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr
 80041f0:	e000e100 	.word	0xe000e100

080041f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	6039      	str	r1, [r7, #0]
 80041fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004204:	2b00      	cmp	r3, #0
 8004206:	db0a      	blt.n	800421e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	b2da      	uxtb	r2, r3
 800420c:	490c      	ldr	r1, [pc, #48]	@ (8004240 <__NVIC_SetPriority+0x4c>)
 800420e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004212:	0112      	lsls	r2, r2, #4
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	440b      	add	r3, r1
 8004218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800421c:	e00a      	b.n	8004234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	b2da      	uxtb	r2, r3
 8004222:	4908      	ldr	r1, [pc, #32]	@ (8004244 <__NVIC_SetPriority+0x50>)
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	3b04      	subs	r3, #4
 800422c:	0112      	lsls	r2, r2, #4
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	440b      	add	r3, r1
 8004232:	761a      	strb	r2, [r3, #24]
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000e100 	.word	0xe000e100
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004248:	b480      	push	{r7}
 800424a:	b089      	sub	sp, #36	@ 0x24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	f1c3 0307 	rsb	r3, r3, #7
 8004262:	2b04      	cmp	r3, #4
 8004264:	bf28      	it	cs
 8004266:	2304      	movcs	r3, #4
 8004268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3304      	adds	r3, #4
 800426e:	2b06      	cmp	r3, #6
 8004270:	d902      	bls.n	8004278 <NVIC_EncodePriority+0x30>
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3b03      	subs	r3, #3
 8004276:	e000      	b.n	800427a <NVIC_EncodePriority+0x32>
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800427c:	f04f 32ff 	mov.w	r2, #4294967295
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43da      	mvns	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	401a      	ands	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004290:	f04f 31ff 	mov.w	r1, #4294967295
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	fa01 f303 	lsl.w	r3, r1, r3
 800429a:	43d9      	mvns	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a0:	4313      	orrs	r3, r2
         );
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3724      	adds	r7, #36	@ 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042bc:	d301      	bcc.n	80042c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042be:	2301      	movs	r3, #1
 80042c0:	e00f      	b.n	80042e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042c2:	4a0a      	ldr	r2, [pc, #40]	@ (80042ec <SysTick_Config+0x40>)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ca:	210f      	movs	r1, #15
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295
 80042d0:	f7ff ff90 	bl	80041f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042d4:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <SysTick_Config+0x40>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042da:	4b04      	ldr	r3, [pc, #16]	@ (80042ec <SysTick_Config+0x40>)
 80042dc:	2207      	movs	r2, #7
 80042de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	e000e010 	.word	0xe000e010

080042f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff ff2d 	bl	8004158 <__NVIC_SetPriorityGrouping>
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004306:	b580      	push	{r7, lr}
 8004308:	b086      	sub	sp, #24
 800430a:	af00      	add	r7, sp, #0
 800430c:	4603      	mov	r3, r0
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
 8004312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004318:	f7ff ff42 	bl	80041a0 <__NVIC_GetPriorityGrouping>
 800431c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	6978      	ldr	r0, [r7, #20]
 8004324:	f7ff ff90 	bl	8004248 <NVIC_EncodePriority>
 8004328:	4602      	mov	r2, r0
 800432a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff ff5f 	bl	80041f4 <__NVIC_SetPriority>
}
 8004336:	bf00      	nop
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	4603      	mov	r3, r0
 8004346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff ff35 	bl	80041bc <__NVIC_EnableIRQ>
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b082      	sub	sp, #8
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff ffa2 	bl	80042ac <SysTick_Config>
 8004368:	4603      	mov	r3, r0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800437c:	2300      	movs	r3, #0
 800437e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e043      	b.n	8004412 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	4b22      	ldr	r3, [pc, #136]	@ (800441c <HAL_DMA_Init+0xa8>)
 8004392:	4413      	add	r3, r2
 8004394:	4a22      	ldr	r2, [pc, #136]	@ (8004420 <HAL_DMA_Init+0xac>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	091b      	lsrs	r3, r3, #4
 800439c:	009a      	lsls	r2, r3, #2
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004424 <HAL_DMA_Init+0xb0>)
 80043a6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80043be:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80043c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80043cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	bffdfff8 	.word	0xbffdfff8
 8004420:	cccccccd 	.word	0xcccccccd
 8004424:	40020000 	.word	0x40020000

08004428 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d008      	beq.n	8004452 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2204      	movs	r2, #4
 8004444:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e020      	b.n	8004494 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 020e 	bic.w	r2, r2, #14
 8004460:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447a:	2101      	movs	r1, #1
 800447c:	fa01 f202 	lsl.w	r2, r1, r2
 8004480:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004492:	7bfb      	ldrb	r3, [r7, #15]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d005      	beq.n	80044c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2204      	movs	r2, #4
 80044bc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
 80044c2:	e051      	b.n	8004568 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 020e 	bic.w	r2, r2, #14
 80044d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0201 	bic.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a22      	ldr	r2, [pc, #136]	@ (8004574 <HAL_DMA_Abort_IT+0xd4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d029      	beq.n	8004542 <HAL_DMA_Abort_IT+0xa2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a21      	ldr	r2, [pc, #132]	@ (8004578 <HAL_DMA_Abort_IT+0xd8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d022      	beq.n	800453e <HAL_DMA_Abort_IT+0x9e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1f      	ldr	r2, [pc, #124]	@ (800457c <HAL_DMA_Abort_IT+0xdc>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01a      	beq.n	8004538 <HAL_DMA_Abort_IT+0x98>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1e      	ldr	r2, [pc, #120]	@ (8004580 <HAL_DMA_Abort_IT+0xe0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d012      	beq.n	8004532 <HAL_DMA_Abort_IT+0x92>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1c      	ldr	r2, [pc, #112]	@ (8004584 <HAL_DMA_Abort_IT+0xe4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00a      	beq.n	800452c <HAL_DMA_Abort_IT+0x8c>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1b      	ldr	r2, [pc, #108]	@ (8004588 <HAL_DMA_Abort_IT+0xe8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d102      	bne.n	8004526 <HAL_DMA_Abort_IT+0x86>
 8004520:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004524:	e00e      	b.n	8004544 <HAL_DMA_Abort_IT+0xa4>
 8004526:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800452a:	e00b      	b.n	8004544 <HAL_DMA_Abort_IT+0xa4>
 800452c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004530:	e008      	b.n	8004544 <HAL_DMA_Abort_IT+0xa4>
 8004532:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004536:	e005      	b.n	8004544 <HAL_DMA_Abort_IT+0xa4>
 8004538:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800453c:	e002      	b.n	8004544 <HAL_DMA_Abort_IT+0xa4>
 800453e:	2310      	movs	r3, #16
 8004540:	e000      	b.n	8004544 <HAL_DMA_Abort_IT+0xa4>
 8004542:	2301      	movs	r3, #1
 8004544:	4a11      	ldr	r2, [pc, #68]	@ (800458c <HAL_DMA_Abort_IT+0xec>)
 8004546:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	4798      	blx	r3
    } 
  }
  return status;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40020008 	.word	0x40020008
 8004578:	4002001c 	.word	0x4002001c
 800457c:	40020030 	.word	0x40020030
 8004580:	40020044 	.word	0x40020044
 8004584:	40020058 	.word	0x40020058
 8004588:	4002006c 	.word	0x4002006c
 800458c:	40020000 	.word	0x40020000

08004590 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ac:	2204      	movs	r2, #4
 80045ae:	409a      	lsls	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d04f      	beq.n	8004658 <HAL_DMA_IRQHandler+0xc8>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d04a      	beq.n	8004658 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d107      	bne.n	80045e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0204 	bic.w	r2, r2, #4
 80045de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a66      	ldr	r2, [pc, #408]	@ (8004780 <HAL_DMA_IRQHandler+0x1f0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d029      	beq.n	800463e <HAL_DMA_IRQHandler+0xae>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a65      	ldr	r2, [pc, #404]	@ (8004784 <HAL_DMA_IRQHandler+0x1f4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d022      	beq.n	800463a <HAL_DMA_IRQHandler+0xaa>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a63      	ldr	r2, [pc, #396]	@ (8004788 <HAL_DMA_IRQHandler+0x1f8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01a      	beq.n	8004634 <HAL_DMA_IRQHandler+0xa4>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a62      	ldr	r2, [pc, #392]	@ (800478c <HAL_DMA_IRQHandler+0x1fc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d012      	beq.n	800462e <HAL_DMA_IRQHandler+0x9e>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a60      	ldr	r2, [pc, #384]	@ (8004790 <HAL_DMA_IRQHandler+0x200>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00a      	beq.n	8004628 <HAL_DMA_IRQHandler+0x98>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a5f      	ldr	r2, [pc, #380]	@ (8004794 <HAL_DMA_IRQHandler+0x204>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d102      	bne.n	8004622 <HAL_DMA_IRQHandler+0x92>
 800461c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004620:	e00e      	b.n	8004640 <HAL_DMA_IRQHandler+0xb0>
 8004622:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004626:	e00b      	b.n	8004640 <HAL_DMA_IRQHandler+0xb0>
 8004628:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800462c:	e008      	b.n	8004640 <HAL_DMA_IRQHandler+0xb0>
 800462e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004632:	e005      	b.n	8004640 <HAL_DMA_IRQHandler+0xb0>
 8004634:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004638:	e002      	b.n	8004640 <HAL_DMA_IRQHandler+0xb0>
 800463a:	2340      	movs	r3, #64	@ 0x40
 800463c:	e000      	b.n	8004640 <HAL_DMA_IRQHandler+0xb0>
 800463e:	2304      	movs	r3, #4
 8004640:	4a55      	ldr	r2, [pc, #340]	@ (8004798 <HAL_DMA_IRQHandler+0x208>)
 8004642:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8094 	beq.w	8004776 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004656:	e08e      	b.n	8004776 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465c:	2202      	movs	r2, #2
 800465e:	409a      	lsls	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d056      	beq.n	8004716 <HAL_DMA_IRQHandler+0x186>
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d051      	beq.n	8004716 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 020a 	bic.w	r2, r2, #10
 800468e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a38      	ldr	r2, [pc, #224]	@ (8004780 <HAL_DMA_IRQHandler+0x1f0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d029      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x166>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a37      	ldr	r2, [pc, #220]	@ (8004784 <HAL_DMA_IRQHandler+0x1f4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d022      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x162>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a35      	ldr	r2, [pc, #212]	@ (8004788 <HAL_DMA_IRQHandler+0x1f8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d01a      	beq.n	80046ec <HAL_DMA_IRQHandler+0x15c>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a34      	ldr	r2, [pc, #208]	@ (800478c <HAL_DMA_IRQHandler+0x1fc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d012      	beq.n	80046e6 <HAL_DMA_IRQHandler+0x156>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a32      	ldr	r2, [pc, #200]	@ (8004790 <HAL_DMA_IRQHandler+0x200>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00a      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x150>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a31      	ldr	r2, [pc, #196]	@ (8004794 <HAL_DMA_IRQHandler+0x204>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d102      	bne.n	80046da <HAL_DMA_IRQHandler+0x14a>
 80046d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80046d8:	e00e      	b.n	80046f8 <HAL_DMA_IRQHandler+0x168>
 80046da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046de:	e00b      	b.n	80046f8 <HAL_DMA_IRQHandler+0x168>
 80046e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046e4:	e008      	b.n	80046f8 <HAL_DMA_IRQHandler+0x168>
 80046e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046ea:	e005      	b.n	80046f8 <HAL_DMA_IRQHandler+0x168>
 80046ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046f0:	e002      	b.n	80046f8 <HAL_DMA_IRQHandler+0x168>
 80046f2:	2320      	movs	r3, #32
 80046f4:	e000      	b.n	80046f8 <HAL_DMA_IRQHandler+0x168>
 80046f6:	2302      	movs	r3, #2
 80046f8:	4a27      	ldr	r2, [pc, #156]	@ (8004798 <HAL_DMA_IRQHandler+0x208>)
 80046fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004708:	2b00      	cmp	r3, #0
 800470a:	d034      	beq.n	8004776 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004714:	e02f      	b.n	8004776 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	2208      	movs	r2, #8
 800471c:	409a      	lsls	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4013      	ands	r3, r2
 8004722:	2b00      	cmp	r3, #0
 8004724:	d028      	beq.n	8004778 <HAL_DMA_IRQHandler+0x1e8>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d023      	beq.n	8004778 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 020e 	bic.w	r2, r2, #14
 800473e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004748:	2101      	movs	r1, #1
 800474a:	fa01 f202 	lsl.w	r2, r1, r2
 800474e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476a:	2b00      	cmp	r3, #0
 800476c:	d004      	beq.n	8004778 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	4798      	blx	r3
    }
  }
  return;
 8004776:	bf00      	nop
 8004778:	bf00      	nop
}
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40020008 	.word	0x40020008
 8004784:	4002001c 	.word	0x4002001c
 8004788:	40020030 	.word	0x40020030
 800478c:	40020044 	.word	0x40020044
 8004790:	40020058 	.word	0x40020058
 8004794:	4002006c 	.word	0x4002006c
 8004798:	40020000 	.word	0x40020000

0800479c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800479c:	b480      	push	{r7}
 800479e:	b08b      	sub	sp, #44	@ 0x2c
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047a6:	2300      	movs	r3, #0
 80047a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80047aa:	2300      	movs	r3, #0
 80047ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ae:	e169      	b.n	8004a84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80047b0:	2201      	movs	r2, #1
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	f040 8158 	bne.w	8004a7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	4a9a      	ldr	r2, [pc, #616]	@ (8004a3c <HAL_GPIO_Init+0x2a0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d05e      	beq.n	8004896 <HAL_GPIO_Init+0xfa>
 80047d8:	4a98      	ldr	r2, [pc, #608]	@ (8004a3c <HAL_GPIO_Init+0x2a0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d875      	bhi.n	80048ca <HAL_GPIO_Init+0x12e>
 80047de:	4a98      	ldr	r2, [pc, #608]	@ (8004a40 <HAL_GPIO_Init+0x2a4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d058      	beq.n	8004896 <HAL_GPIO_Init+0xfa>
 80047e4:	4a96      	ldr	r2, [pc, #600]	@ (8004a40 <HAL_GPIO_Init+0x2a4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d86f      	bhi.n	80048ca <HAL_GPIO_Init+0x12e>
 80047ea:	4a96      	ldr	r2, [pc, #600]	@ (8004a44 <HAL_GPIO_Init+0x2a8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d052      	beq.n	8004896 <HAL_GPIO_Init+0xfa>
 80047f0:	4a94      	ldr	r2, [pc, #592]	@ (8004a44 <HAL_GPIO_Init+0x2a8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d869      	bhi.n	80048ca <HAL_GPIO_Init+0x12e>
 80047f6:	4a94      	ldr	r2, [pc, #592]	@ (8004a48 <HAL_GPIO_Init+0x2ac>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d04c      	beq.n	8004896 <HAL_GPIO_Init+0xfa>
 80047fc:	4a92      	ldr	r2, [pc, #584]	@ (8004a48 <HAL_GPIO_Init+0x2ac>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d863      	bhi.n	80048ca <HAL_GPIO_Init+0x12e>
 8004802:	4a92      	ldr	r2, [pc, #584]	@ (8004a4c <HAL_GPIO_Init+0x2b0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d046      	beq.n	8004896 <HAL_GPIO_Init+0xfa>
 8004808:	4a90      	ldr	r2, [pc, #576]	@ (8004a4c <HAL_GPIO_Init+0x2b0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d85d      	bhi.n	80048ca <HAL_GPIO_Init+0x12e>
 800480e:	2b12      	cmp	r3, #18
 8004810:	d82a      	bhi.n	8004868 <HAL_GPIO_Init+0xcc>
 8004812:	2b12      	cmp	r3, #18
 8004814:	d859      	bhi.n	80048ca <HAL_GPIO_Init+0x12e>
 8004816:	a201      	add	r2, pc, #4	@ (adr r2, 800481c <HAL_GPIO_Init+0x80>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	08004897 	.word	0x08004897
 8004820:	08004871 	.word	0x08004871
 8004824:	08004883 	.word	0x08004883
 8004828:	080048c5 	.word	0x080048c5
 800482c:	080048cb 	.word	0x080048cb
 8004830:	080048cb 	.word	0x080048cb
 8004834:	080048cb 	.word	0x080048cb
 8004838:	080048cb 	.word	0x080048cb
 800483c:	080048cb 	.word	0x080048cb
 8004840:	080048cb 	.word	0x080048cb
 8004844:	080048cb 	.word	0x080048cb
 8004848:	080048cb 	.word	0x080048cb
 800484c:	080048cb 	.word	0x080048cb
 8004850:	080048cb 	.word	0x080048cb
 8004854:	080048cb 	.word	0x080048cb
 8004858:	080048cb 	.word	0x080048cb
 800485c:	080048cb 	.word	0x080048cb
 8004860:	08004879 	.word	0x08004879
 8004864:	0800488d 	.word	0x0800488d
 8004868:	4a79      	ldr	r2, [pc, #484]	@ (8004a50 <HAL_GPIO_Init+0x2b4>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800486e:	e02c      	b.n	80048ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	623b      	str	r3, [r7, #32]
          break;
 8004876:	e029      	b.n	80048cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	3304      	adds	r3, #4
 800487e:	623b      	str	r3, [r7, #32]
          break;
 8004880:	e024      	b.n	80048cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	3308      	adds	r3, #8
 8004888:	623b      	str	r3, [r7, #32]
          break;
 800488a:	e01f      	b.n	80048cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	330c      	adds	r3, #12
 8004892:	623b      	str	r3, [r7, #32]
          break;
 8004894:	e01a      	b.n	80048cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800489e:	2304      	movs	r3, #4
 80048a0:	623b      	str	r3, [r7, #32]
          break;
 80048a2:	e013      	b.n	80048cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d105      	bne.n	80048b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048ac:	2308      	movs	r3, #8
 80048ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	611a      	str	r2, [r3, #16]
          break;
 80048b6:	e009      	b.n	80048cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048b8:	2308      	movs	r3, #8
 80048ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	615a      	str	r2, [r3, #20]
          break;
 80048c2:	e003      	b.n	80048cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80048c4:	2300      	movs	r3, #0
 80048c6:	623b      	str	r3, [r7, #32]
          break;
 80048c8:	e000      	b.n	80048cc <HAL_GPIO_Init+0x130>
          break;
 80048ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2bff      	cmp	r3, #255	@ 0xff
 80048d0:	d801      	bhi.n	80048d6 <HAL_GPIO_Init+0x13a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	e001      	b.n	80048da <HAL_GPIO_Init+0x13e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3304      	adds	r3, #4
 80048da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2bff      	cmp	r3, #255	@ 0xff
 80048e0:	d802      	bhi.n	80048e8 <HAL_GPIO_Init+0x14c>
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	e002      	b.n	80048ee <HAL_GPIO_Init+0x152>
 80048e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ea:	3b08      	subs	r3, #8
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	210f      	movs	r1, #15
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	fa01 f303 	lsl.w	r3, r1, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	401a      	ands	r2, r3
 8004900:	6a39      	ldr	r1, [r7, #32]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	431a      	orrs	r2, r3
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80b1 	beq.w	8004a7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800491c:	4b4d      	ldr	r3, [pc, #308]	@ (8004a54 <HAL_GPIO_Init+0x2b8>)
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	4a4c      	ldr	r2, [pc, #304]	@ (8004a54 <HAL_GPIO_Init+0x2b8>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6193      	str	r3, [r2, #24]
 8004928:	4b4a      	ldr	r3, [pc, #296]	@ (8004a54 <HAL_GPIO_Init+0x2b8>)
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	60bb      	str	r3, [r7, #8]
 8004932:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004934:	4a48      	ldr	r2, [pc, #288]	@ (8004a58 <HAL_GPIO_Init+0x2bc>)
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	089b      	lsrs	r3, r3, #2
 800493a:	3302      	adds	r3, #2
 800493c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004940:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	220f      	movs	r2, #15
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4013      	ands	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a40      	ldr	r2, [pc, #256]	@ (8004a5c <HAL_GPIO_Init+0x2c0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d013      	beq.n	8004988 <HAL_GPIO_Init+0x1ec>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a3f      	ldr	r2, [pc, #252]	@ (8004a60 <HAL_GPIO_Init+0x2c4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00d      	beq.n	8004984 <HAL_GPIO_Init+0x1e8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a3e      	ldr	r2, [pc, #248]	@ (8004a64 <HAL_GPIO_Init+0x2c8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d007      	beq.n	8004980 <HAL_GPIO_Init+0x1e4>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a3d      	ldr	r2, [pc, #244]	@ (8004a68 <HAL_GPIO_Init+0x2cc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d101      	bne.n	800497c <HAL_GPIO_Init+0x1e0>
 8004978:	2303      	movs	r3, #3
 800497a:	e006      	b.n	800498a <HAL_GPIO_Init+0x1ee>
 800497c:	2304      	movs	r3, #4
 800497e:	e004      	b.n	800498a <HAL_GPIO_Init+0x1ee>
 8004980:	2302      	movs	r3, #2
 8004982:	e002      	b.n	800498a <HAL_GPIO_Init+0x1ee>
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <HAL_GPIO_Init+0x1ee>
 8004988:	2300      	movs	r3, #0
 800498a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800498c:	f002 0203 	and.w	r2, r2, #3
 8004990:	0092      	lsls	r2, r2, #2
 8004992:	4093      	lsls	r3, r2
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800499a:	492f      	ldr	r1, [pc, #188]	@ (8004a58 <HAL_GPIO_Init+0x2bc>)
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	089b      	lsrs	r3, r3, #2
 80049a0:	3302      	adds	r3, #2
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d006      	beq.n	80049c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80049b4:	4b2d      	ldr	r3, [pc, #180]	@ (8004a6c <HAL_GPIO_Init+0x2d0>)
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	492c      	ldr	r1, [pc, #176]	@ (8004a6c <HAL_GPIO_Init+0x2d0>)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	4313      	orrs	r3, r2
 80049be:	608b      	str	r3, [r1, #8]
 80049c0:	e006      	b.n	80049d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80049c2:	4b2a      	ldr	r3, [pc, #168]	@ (8004a6c <HAL_GPIO_Init+0x2d0>)
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	43db      	mvns	r3, r3
 80049ca:	4928      	ldr	r1, [pc, #160]	@ (8004a6c <HAL_GPIO_Init+0x2d0>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d006      	beq.n	80049ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80049dc:	4b23      	ldr	r3, [pc, #140]	@ (8004a6c <HAL_GPIO_Init+0x2d0>)
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	4922      	ldr	r1, [pc, #136]	@ (8004a6c <HAL_GPIO_Init+0x2d0>)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60cb      	str	r3, [r1, #12]
 80049e8:	e006      	b.n	80049f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80049ea:	4b20      	ldr	r3, [pc, #128]	@ (8004a6c <HAL_GPIO_Init+0x2d0>)
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	43db      	mvns	r3, r3
 80049f2:	491e      	ldr	r1, [pc, #120]	@ (8004a6c <HAL_GPIO_Init+0x2d0>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d006      	beq.n	8004a12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004a04:	4b19      	ldr	r3, [pc, #100]	@ (8004a6c <HAL_GPIO_Init+0x2d0>)
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	4918      	ldr	r1, [pc, #96]	@ (8004a6c <HAL_GPIO_Init+0x2d0>)
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	604b      	str	r3, [r1, #4]
 8004a10:	e006      	b.n	8004a20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004a12:	4b16      	ldr	r3, [pc, #88]	@ (8004a6c <HAL_GPIO_Init+0x2d0>)
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	4914      	ldr	r1, [pc, #80]	@ (8004a6c <HAL_GPIO_Init+0x2d0>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d021      	beq.n	8004a70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a6c <HAL_GPIO_Init+0x2d0>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	490e      	ldr	r1, [pc, #56]	@ (8004a6c <HAL_GPIO_Init+0x2d0>)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	600b      	str	r3, [r1, #0]
 8004a38:	e021      	b.n	8004a7e <HAL_GPIO_Init+0x2e2>
 8004a3a:	bf00      	nop
 8004a3c:	10320000 	.word	0x10320000
 8004a40:	10310000 	.word	0x10310000
 8004a44:	10220000 	.word	0x10220000
 8004a48:	10210000 	.word	0x10210000
 8004a4c:	10120000 	.word	0x10120000
 8004a50:	10110000 	.word	0x10110000
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40010000 	.word	0x40010000
 8004a5c:	40010800 	.word	0x40010800
 8004a60:	40010c00 	.word	0x40010c00
 8004a64:	40011000 	.word	0x40011000
 8004a68:	40011400 	.word	0x40011400
 8004a6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004a70:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <HAL_GPIO_Init+0x304>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	43db      	mvns	r3, r3
 8004a78:	4909      	ldr	r1, [pc, #36]	@ (8004aa0 <HAL_GPIO_Init+0x304>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	3301      	adds	r3, #1
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f47f ae8e 	bne.w	80047b0 <HAL_GPIO_Init+0x14>
  }
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	372c      	adds	r7, #44	@ 0x2c
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr
 8004aa0:	40010400 	.word	0x40010400

08004aa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	887b      	ldrh	r3, [r7, #2]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
 8004ac0:	e001      	b.n	8004ac6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr

08004ad2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b083      	sub	sp, #12
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
 8004ada:	460b      	mov	r3, r1
 8004adc:	807b      	strh	r3, [r7, #2]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ae2:	787b      	ldrb	r3, [r7, #1]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ae8:	887a      	ldrh	r2, [r7, #2]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004aee:	e003      	b.n	8004af8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004af0:	887b      	ldrh	r3, [r7, #2]
 8004af2:	041a      	lsls	r2, r3, #16
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	611a      	str	r2, [r3, #16]
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
	...

08004b04 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004b08:	4b03      	ldr	r3, [pc, #12]	@ (8004b18 <HAL_PWR_EnableBkUpAccess+0x14>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	420e0020 	.word	0x420e0020

08004b1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e272      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8087 	beq.w	8004c4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b3c:	4b92      	ldr	r3, [pc, #584]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 030c 	and.w	r3, r3, #12
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d00c      	beq.n	8004b62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b48:	4b8f      	ldr	r3, [pc, #572]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 030c 	and.w	r3, r3, #12
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d112      	bne.n	8004b7a <HAL_RCC_OscConfig+0x5e>
 8004b54:	4b8c      	ldr	r3, [pc, #560]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b60:	d10b      	bne.n	8004b7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b62:	4b89      	ldr	r3, [pc, #548]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d06c      	beq.n	8004c48 <HAL_RCC_OscConfig+0x12c>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d168      	bne.n	8004c48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e24c      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b82:	d106      	bne.n	8004b92 <HAL_RCC_OscConfig+0x76>
 8004b84:	4b80      	ldr	r3, [pc, #512]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a7f      	ldr	r2, [pc, #508]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	e02e      	b.n	8004bf0 <HAL_RCC_OscConfig+0xd4>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x98>
 8004b9a:	4b7b      	ldr	r3, [pc, #492]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a7a      	ldr	r2, [pc, #488]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	4b78      	ldr	r3, [pc, #480]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a77      	ldr	r2, [pc, #476]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004bac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	e01d      	b.n	8004bf0 <HAL_RCC_OscConfig+0xd4>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_RCC_OscConfig+0xbc>
 8004bbe:	4b72      	ldr	r3, [pc, #456]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a71      	ldr	r2, [pc, #452]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	4b6f      	ldr	r3, [pc, #444]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a6e      	ldr	r2, [pc, #440]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	e00b      	b.n	8004bf0 <HAL_RCC_OscConfig+0xd4>
 8004bd8:	4b6b      	ldr	r3, [pc, #428]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a6a      	ldr	r2, [pc, #424]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	4b68      	ldr	r3, [pc, #416]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a67      	ldr	r2, [pc, #412]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d013      	beq.n	8004c20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf8:	f7ff fa80 	bl	80040fc <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c00:	f7ff fa7c 	bl	80040fc <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b64      	cmp	r3, #100	@ 0x64
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e200      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c12:	4b5d      	ldr	r3, [pc, #372]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0xe4>
 8004c1e:	e014      	b.n	8004c4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c20:	f7ff fa6c 	bl	80040fc <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c28:	f7ff fa68 	bl	80040fc <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b64      	cmp	r3, #100	@ 0x64
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e1ec      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3a:	4b53      	ldr	r3, [pc, #332]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x10c>
 8004c46:	e000      	b.n	8004c4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d063      	beq.n	8004d1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c56:	4b4c      	ldr	r3, [pc, #304]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00b      	beq.n	8004c7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c62:	4b49      	ldr	r3, [pc, #292]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d11c      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x18c>
 8004c6e:	4b46      	ldr	r3, [pc, #280]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d116      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c7a:	4b43      	ldr	r3, [pc, #268]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <HAL_RCC_OscConfig+0x176>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d001      	beq.n	8004c92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e1c0      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c92:	4b3d      	ldr	r3, [pc, #244]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4939      	ldr	r1, [pc, #228]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ca6:	e03a      	b.n	8004d1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d020      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cb0:	4b36      	ldr	r3, [pc, #216]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb6:	f7ff fa21 	bl	80040fc <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cbe:	f7ff fa1d 	bl	80040fc <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e1a1      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0f0      	beq.n	8004cbe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	4927      	ldr	r1, [pc, #156]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	600b      	str	r3, [r1, #0]
 8004cf0:	e015      	b.n	8004d1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cf2:	4b26      	ldr	r3, [pc, #152]	@ (8004d8c <HAL_RCC_OscConfig+0x270>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf8:	f7ff fa00 	bl	80040fc <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d00:	f7ff f9fc 	bl	80040fc <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e180      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d12:	4b1d      	ldr	r3, [pc, #116]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0308 	and.w	r3, r3, #8
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d03a      	beq.n	8004da0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d019      	beq.n	8004d66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d32:	4b17      	ldr	r3, [pc, #92]	@ (8004d90 <HAL_RCC_OscConfig+0x274>)
 8004d34:	2201      	movs	r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d38:	f7ff f9e0 	bl	80040fc <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d40:	f7ff f9dc 	bl	80040fc <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e160      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d52:	4b0d      	ldr	r3, [pc, #52]	@ (8004d88 <HAL_RCC_OscConfig+0x26c>)
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d5e:	2001      	movs	r0, #1
 8004d60:	f000 face 	bl	8005300 <RCC_Delay>
 8004d64:	e01c      	b.n	8004da0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d66:	4b0a      	ldr	r3, [pc, #40]	@ (8004d90 <HAL_RCC_OscConfig+0x274>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6c:	f7ff f9c6 	bl	80040fc <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d72:	e00f      	b.n	8004d94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d74:	f7ff f9c2 	bl	80040fc <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d908      	bls.n	8004d94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e146      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
 8004d86:	bf00      	nop
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	42420000 	.word	0x42420000
 8004d90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d94:	4b92      	ldr	r3, [pc, #584]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e9      	bne.n	8004d74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80a6 	beq.w	8004efa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dae:	2300      	movs	r3, #0
 8004db0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004db2:	4b8b      	ldr	r3, [pc, #556]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10d      	bne.n	8004dda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dbe:	4b88      	ldr	r3, [pc, #544]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	4a87      	ldr	r2, [pc, #540]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dc8:	61d3      	str	r3, [r2, #28]
 8004dca:	4b85      	ldr	r3, [pc, #532]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dda:	4b82      	ldr	r3, [pc, #520]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d118      	bne.n	8004e18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004de6:	4b7f      	ldr	r3, [pc, #508]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a7e      	ldr	r2, [pc, #504]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c8>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df2:	f7ff f983 	bl	80040fc <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfa:	f7ff f97f 	bl	80040fc <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b64      	cmp	r3, #100	@ 0x64
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e103      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0c:	4b75      	ldr	r3, [pc, #468]	@ (8004fe4 <HAL_RCC_OscConfig+0x4c8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d106      	bne.n	8004e2e <HAL_RCC_OscConfig+0x312>
 8004e20:	4b6f      	ldr	r3, [pc, #444]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	4a6e      	ldr	r2, [pc, #440]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	6213      	str	r3, [r2, #32]
 8004e2c:	e02d      	b.n	8004e8a <HAL_RCC_OscConfig+0x36e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10c      	bne.n	8004e50 <HAL_RCC_OscConfig+0x334>
 8004e36:	4b6a      	ldr	r3, [pc, #424]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	4a69      	ldr	r2, [pc, #420]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004e3c:	f023 0301 	bic.w	r3, r3, #1
 8004e40:	6213      	str	r3, [r2, #32]
 8004e42:	4b67      	ldr	r3, [pc, #412]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	4a66      	ldr	r2, [pc, #408]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004e48:	f023 0304 	bic.w	r3, r3, #4
 8004e4c:	6213      	str	r3, [r2, #32]
 8004e4e:	e01c      	b.n	8004e8a <HAL_RCC_OscConfig+0x36e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b05      	cmp	r3, #5
 8004e56:	d10c      	bne.n	8004e72 <HAL_RCC_OscConfig+0x356>
 8004e58:	4b61      	ldr	r3, [pc, #388]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	4a60      	ldr	r2, [pc, #384]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004e5e:	f043 0304 	orr.w	r3, r3, #4
 8004e62:	6213      	str	r3, [r2, #32]
 8004e64:	4b5e      	ldr	r3, [pc, #376]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	4a5d      	ldr	r2, [pc, #372]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	6213      	str	r3, [r2, #32]
 8004e70:	e00b      	b.n	8004e8a <HAL_RCC_OscConfig+0x36e>
 8004e72:	4b5b      	ldr	r3, [pc, #364]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	4a5a      	ldr	r2, [pc, #360]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004e78:	f023 0301 	bic.w	r3, r3, #1
 8004e7c:	6213      	str	r3, [r2, #32]
 8004e7e:	4b58      	ldr	r3, [pc, #352]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	4a57      	ldr	r2, [pc, #348]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004e84:	f023 0304 	bic.w	r3, r3, #4
 8004e88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d015      	beq.n	8004ebe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e92:	f7ff f933 	bl	80040fc <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e98:	e00a      	b.n	8004eb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9a:	f7ff f92f 	bl	80040fc <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e0b1      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb0:	4b4b      	ldr	r3, [pc, #300]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0ee      	beq.n	8004e9a <HAL_RCC_OscConfig+0x37e>
 8004ebc:	e014      	b.n	8004ee8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ebe:	f7ff f91d 	bl	80040fc <HAL_GetTick>
 8004ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec4:	e00a      	b.n	8004edc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec6:	f7ff f919 	bl	80040fc <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e09b      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004edc:	4b40      	ldr	r3, [pc, #256]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1ee      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d105      	bne.n	8004efa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eee:	4b3c      	ldr	r3, [pc, #240]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	4a3b      	ldr	r2, [pc, #236]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004ef4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ef8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 8087 	beq.w	8005012 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f04:	4b36      	ldr	r3, [pc, #216]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f003 030c 	and.w	r3, r3, #12
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d061      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d146      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f18:	4b33      	ldr	r3, [pc, #204]	@ (8004fe8 <HAL_RCC_OscConfig+0x4cc>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1e:	f7ff f8ed 	bl	80040fc <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f26:	f7ff f8e9 	bl	80040fc <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e06d      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f38:	4b29      	ldr	r3, [pc, #164]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f0      	bne.n	8004f26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f4c:	d108      	bne.n	8004f60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f4e:	4b24      	ldr	r3, [pc, #144]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	4921      	ldr	r1, [pc, #132]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f60:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a19      	ldr	r1, [r3, #32]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	430b      	orrs	r3, r1
 8004f72:	491b      	ldr	r1, [pc, #108]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f78:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe8 <HAL_RCC_OscConfig+0x4cc>)
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7e:	f7ff f8bd 	bl	80040fc <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f86:	f7ff f8b9 	bl	80040fc <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e03d      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f98:	4b11      	ldr	r3, [pc, #68]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <HAL_RCC_OscConfig+0x46a>
 8004fa4:	e035      	b.n	8005012 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa6:	4b10      	ldr	r3, [pc, #64]	@ (8004fe8 <HAL_RCC_OscConfig+0x4cc>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fac:	f7ff f8a6 	bl	80040fc <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb4:	f7ff f8a2 	bl	80040fc <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e026      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fc6:	4b06      	ldr	r3, [pc, #24]	@ (8004fe0 <HAL_RCC_OscConfig+0x4c4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x498>
 8004fd2:	e01e      	b.n	8005012 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d107      	bne.n	8004fec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e019      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40007000 	.word	0x40007000
 8004fe8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fec:	4b0b      	ldr	r3, [pc, #44]	@ (800501c <HAL_RCC_OscConfig+0x500>)
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d106      	bne.n	800500e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500a:	429a      	cmp	r2, r3
 800500c:	d001      	beq.n	8005012 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40021000 	.word	0x40021000

08005020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0d0      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005034:	4b6a      	ldr	r3, [pc, #424]	@ (80051e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d910      	bls.n	8005064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005042:	4b67      	ldr	r3, [pc, #412]	@ (80051e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f023 0207 	bic.w	r2, r3, #7
 800504a:	4965      	ldr	r1, [pc, #404]	@ (80051e0 <HAL_RCC_ClockConfig+0x1c0>)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	4313      	orrs	r3, r2
 8005050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005052:	4b63      	ldr	r3, [pc, #396]	@ (80051e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0b8      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d020      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800507c:	4b59      	ldr	r3, [pc, #356]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	4a58      	ldr	r2, [pc, #352]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005082:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005086:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005094:	4b53      	ldr	r3, [pc, #332]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	4a52      	ldr	r2, [pc, #328]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 800509a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800509e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a0:	4b50      	ldr	r3, [pc, #320]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	494d      	ldr	r1, [pc, #308]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d040      	beq.n	8005140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d107      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c6:	4b47      	ldr	r3, [pc, #284]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d115      	bne.n	80050fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e07f      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050de:	4b41      	ldr	r3, [pc, #260]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e073      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ee:	4b3d      	ldr	r3, [pc, #244]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e06b      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050fe:	4b39      	ldr	r3, [pc, #228]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f023 0203 	bic.w	r2, r3, #3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	4936      	ldr	r1, [pc, #216]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 800510c:	4313      	orrs	r3, r2
 800510e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005110:	f7fe fff4 	bl	80040fc <HAL_GetTick>
 8005114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	e00a      	b.n	800512e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005118:	f7fe fff0 	bl	80040fc <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005126:	4293      	cmp	r3, r2
 8005128:	d901      	bls.n	800512e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e053      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512e:	4b2d      	ldr	r3, [pc, #180]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f003 020c 	and.w	r2, r3, #12
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	429a      	cmp	r2, r3
 800513e:	d1eb      	bne.n	8005118 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005140:	4b27      	ldr	r3, [pc, #156]	@ (80051e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d210      	bcs.n	8005170 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b24      	ldr	r3, [pc, #144]	@ (80051e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f023 0207 	bic.w	r2, r3, #7
 8005156:	4922      	ldr	r1, [pc, #136]	@ (80051e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	4313      	orrs	r3, r2
 800515c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800515e:	4b20      	ldr	r3, [pc, #128]	@ (80051e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d001      	beq.n	8005170 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e032      	b.n	80051d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800517c:	4b19      	ldr	r3, [pc, #100]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4916      	ldr	r1, [pc, #88]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 800518a:	4313      	orrs	r3, r2
 800518c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d009      	beq.n	80051ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800519a:	4b12      	ldr	r3, [pc, #72]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	490e      	ldr	r1, [pc, #56]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051ae:	f000 f821 	bl	80051f4 <HAL_RCC_GetSysClockFreq>
 80051b2:	4602      	mov	r2, r0
 80051b4:	4b0b      	ldr	r3, [pc, #44]	@ (80051e4 <HAL_RCC_ClockConfig+0x1c4>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	091b      	lsrs	r3, r3, #4
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	490a      	ldr	r1, [pc, #40]	@ (80051e8 <HAL_RCC_ClockConfig+0x1c8>)
 80051c0:	5ccb      	ldrb	r3, [r1, r3]
 80051c2:	fa22 f303 	lsr.w	r3, r2, r3
 80051c6:	4a09      	ldr	r2, [pc, #36]	@ (80051ec <HAL_RCC_ClockConfig+0x1cc>)
 80051c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051ca:	4b09      	ldr	r3, [pc, #36]	@ (80051f0 <HAL_RCC_ClockConfig+0x1d0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe ff52 	bl	8004078 <HAL_InitTick>

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40022000 	.word	0x40022000
 80051e4:	40021000 	.word	0x40021000
 80051e8:	0800f81c 	.word	0x0800f81c
 80051ec:	20000068 	.word	0x20000068
 80051f0:	2000006c 	.word	0x2000006c

080051f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	2300      	movs	r3, #0
 8005200:	60bb      	str	r3, [r7, #8]
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
 8005206:	2300      	movs	r3, #0
 8005208:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800520a:	2300      	movs	r3, #0
 800520c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800520e:	4b1e      	ldr	r3, [pc, #120]	@ (8005288 <HAL_RCC_GetSysClockFreq+0x94>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 030c 	and.w	r3, r3, #12
 800521a:	2b04      	cmp	r3, #4
 800521c:	d002      	beq.n	8005224 <HAL_RCC_GetSysClockFreq+0x30>
 800521e:	2b08      	cmp	r3, #8
 8005220:	d003      	beq.n	800522a <HAL_RCC_GetSysClockFreq+0x36>
 8005222:	e027      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005224:	4b19      	ldr	r3, [pc, #100]	@ (800528c <HAL_RCC_GetSysClockFreq+0x98>)
 8005226:	613b      	str	r3, [r7, #16]
      break;
 8005228:	e027      	b.n	800527a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	0c9b      	lsrs	r3, r3, #18
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	4a17      	ldr	r2, [pc, #92]	@ (8005290 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005234:	5cd3      	ldrb	r3, [r2, r3]
 8005236:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d010      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005242:	4b11      	ldr	r3, [pc, #68]	@ (8005288 <HAL_RCC_GetSysClockFreq+0x94>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	0c5b      	lsrs	r3, r3, #17
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	4a11      	ldr	r2, [pc, #68]	@ (8005294 <HAL_RCC_GetSysClockFreq+0xa0>)
 800524e:	5cd3      	ldrb	r3, [r2, r3]
 8005250:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a0d      	ldr	r2, [pc, #52]	@ (800528c <HAL_RCC_GetSysClockFreq+0x98>)
 8005256:	fb03 f202 	mul.w	r2, r3, r2
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	e004      	b.n	800526e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a0c      	ldr	r2, [pc, #48]	@ (8005298 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005268:	fb02 f303 	mul.w	r3, r2, r3
 800526c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	613b      	str	r3, [r7, #16]
      break;
 8005272:	e002      	b.n	800527a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005274:	4b05      	ldr	r3, [pc, #20]	@ (800528c <HAL_RCC_GetSysClockFreq+0x98>)
 8005276:	613b      	str	r3, [r7, #16]
      break;
 8005278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800527a:	693b      	ldr	r3, [r7, #16]
}
 800527c:	4618      	mov	r0, r3
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	40021000 	.word	0x40021000
 800528c:	007a1200 	.word	0x007a1200
 8005290:	0800f840 	.word	0x0800f840
 8005294:	0800f850 	.word	0x0800f850
 8005298:	003d0900 	.word	0x003d0900

0800529c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052a0:	4b02      	ldr	r3, [pc, #8]	@ (80052ac <HAL_RCC_GetHCLKFreq+0x10>)
 80052a2:	681b      	ldr	r3, [r3, #0]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr
 80052ac:	20000068 	.word	0x20000068

080052b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052b4:	f7ff fff2 	bl	800529c <HAL_RCC_GetHCLKFreq>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b05      	ldr	r3, [pc, #20]	@ (80052d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	4903      	ldr	r1, [pc, #12]	@ (80052d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052c6:	5ccb      	ldrb	r3, [r1, r3]
 80052c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40021000 	.word	0x40021000
 80052d4:	0800f82c 	.word	0x0800f82c

080052d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052dc:	f7ff ffde 	bl	800529c <HAL_RCC_GetHCLKFreq>
 80052e0:	4602      	mov	r2, r0
 80052e2:	4b05      	ldr	r3, [pc, #20]	@ (80052f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	0adb      	lsrs	r3, r3, #11
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	4903      	ldr	r1, [pc, #12]	@ (80052fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ee:	5ccb      	ldrb	r3, [r1, r3]
 80052f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40021000 	.word	0x40021000
 80052fc:	0800f82c 	.word	0x0800f82c

08005300 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005308:	4b0a      	ldr	r3, [pc, #40]	@ (8005334 <RCC_Delay+0x34>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a0a      	ldr	r2, [pc, #40]	@ (8005338 <RCC_Delay+0x38>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	0a5b      	lsrs	r3, r3, #9
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	fb02 f303 	mul.w	r3, r2, r3
 800531a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800531c:	bf00      	nop
  }
  while (Delay --);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1e5a      	subs	r2, r3, #1
 8005322:	60fa      	str	r2, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f9      	bne.n	800531c <RCC_Delay+0x1c>
}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr
 8005334:	20000068 	.word	0x20000068
 8005338:	10624dd3 	.word	0x10624dd3

0800533c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	2300      	movs	r3, #0
 800534a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d07d      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005358:	2300      	movs	r3, #0
 800535a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800535c:	4b4f      	ldr	r3, [pc, #316]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10d      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005368:	4b4c      	ldr	r3, [pc, #304]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	4a4b      	ldr	r2, [pc, #300]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800536e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005372:	61d3      	str	r3, [r2, #28]
 8005374:	4b49      	ldr	r3, [pc, #292]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005380:	2301      	movs	r3, #1
 8005382:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005384:	4b46      	ldr	r3, [pc, #280]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800538c:	2b00      	cmp	r3, #0
 800538e:	d118      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005390:	4b43      	ldr	r3, [pc, #268]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a42      	ldr	r2, [pc, #264]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800539a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800539c:	f7fe feae 	bl	80040fc <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a2:	e008      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a4:	f7fe feaa 	bl	80040fc <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b64      	cmp	r3, #100	@ 0x64
 80053b0:	d901      	bls.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e06d      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b6:	4b3a      	ldr	r3, [pc, #232]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053c2:	4b36      	ldr	r3, [pc, #216]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d02e      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d027      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053e0:	4b2e      	ldr	r3, [pc, #184]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053ea:	4b2e      	ldr	r3, [pc, #184]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053f0:	4b2c      	ldr	r3, [pc, #176]	@ (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053f6:	4a29      	ldr	r2, [pc, #164]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d014      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005406:	f7fe fe79 	bl	80040fc <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540c:	e00a      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540e:	f7fe fe75 	bl	80040fc <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541c:	4293      	cmp	r3, r2
 800541e:	d901      	bls.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e036      	b.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005424:	4b1d      	ldr	r3, [pc, #116]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0ee      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005430:	4b1a      	ldr	r3, [pc, #104]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	4917      	ldr	r1, [pc, #92]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800543e:	4313      	orrs	r3, r2
 8005440:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005442:	7dfb      	ldrb	r3, [r7, #23]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d105      	bne.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005448:	4b14      	ldr	r3, [pc, #80]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	4a13      	ldr	r2, [pc, #76]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005452:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d008      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005460:	4b0e      	ldr	r3, [pc, #56]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	490b      	ldr	r1, [pc, #44]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800546e:	4313      	orrs	r3, r2
 8005470:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0310 	and.w	r3, r3, #16
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800547e:	4b07      	ldr	r3, [pc, #28]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	4904      	ldr	r1, [pc, #16]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548c:	4313      	orrs	r3, r2
 800548e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	40021000 	.word	0x40021000
 80054a0:	40007000 	.word	0x40007000
 80054a4:	42420440 	.word	0x42420440

080054a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	2300      	movs	r3, #0
 80054b6:	61fb      	str	r3, [r7, #28]
 80054b8:	2300      	movs	r3, #0
 80054ba:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	2300      	movs	r3, #0
 80054c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b10      	cmp	r3, #16
 80054c8:	d00a      	beq.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	f200 808a 	bhi.w	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d045      	beq.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d075      	beq.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80054de:	e082      	b.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80054e0:	4b46      	ldr	r3, [pc, #280]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80054e6:	4b45      	ldr	r3, [pc, #276]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d07b      	beq.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	0c9b      	lsrs	r3, r3, #18
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	4a41      	ldr	r2, [pc, #260]	@ (8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80054fc:	5cd3      	ldrb	r3, [r2, r3]
 80054fe:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d015      	beq.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800550a:	4b3c      	ldr	r3, [pc, #240]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	0c5b      	lsrs	r3, r3, #17
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	4a3b      	ldr	r2, [pc, #236]	@ (8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005516:	5cd3      	ldrb	r3, [r2, r3]
 8005518:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00d      	beq.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005524:	4a38      	ldr	r2, [pc, #224]	@ (8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	fbb2 f2f3 	udiv	r2, r2, r3
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	fb02 f303 	mul.w	r3, r2, r3
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	e004      	b.n	8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	4a34      	ldr	r2, [pc, #208]	@ (800560c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800553a:	fb02 f303 	mul.w	r3, r2, r3
 800553e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005540:	4b2e      	ldr	r3, [pc, #184]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005548:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800554c:	d102      	bne.n	8005554 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	61bb      	str	r3, [r7, #24]
      break;
 8005552:	e04a      	b.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	4a2d      	ldr	r2, [pc, #180]	@ (8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	085b      	lsrs	r3, r3, #1
 8005560:	61bb      	str	r3, [r7, #24]
      break;
 8005562:	e042      	b.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005564:	4b25      	ldr	r3, [pc, #148]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005574:	d108      	bne.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005580:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005584:	61bb      	str	r3, [r7, #24]
 8005586:	e01f      	b.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005592:	d109      	bne.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005594:	4b19      	ldr	r3, [pc, #100]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80055a0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80055a4:	61bb      	str	r3, [r7, #24]
 80055a6:	e00f      	b.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055b2:	d11c      	bne.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80055b4:	4b11      	ldr	r3, [pc, #68]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d016      	beq.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80055c0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80055c4:	61bb      	str	r3, [r7, #24]
      break;
 80055c6:	e012      	b.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80055c8:	e011      	b.n	80055ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80055ca:	f7ff fe85 	bl	80052d8 <HAL_RCC_GetPCLK2Freq>
 80055ce:	4602      	mov	r2, r0
 80055d0:	4b0a      	ldr	r3, [pc, #40]	@ (80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	0b9b      	lsrs	r3, r3, #14
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	3301      	adds	r3, #1
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e2:	61bb      	str	r3, [r7, #24]
      break;
 80055e4:	e004      	b.n	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80055e6:	bf00      	nop
 80055e8:	e002      	b.n	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80055ea:	bf00      	nop
 80055ec:	e000      	b.n	80055f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80055ee:	bf00      	nop
    }
  }
  return (frequency);
 80055f0:	69bb      	ldr	r3, [r7, #24]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3720      	adds	r7, #32
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40021000 	.word	0x40021000
 8005600:	0800f854 	.word	0x0800f854
 8005604:	0800f864 	.word	0x0800f864
 8005608:	007a1200 	.word	0x007a1200
 800560c:	003d0900 	.word	0x003d0900
 8005610:	aaaaaaab 	.word	0xaaaaaaab

08005614 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e07a      	b.n	8005720 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	7c5b      	ldrb	r3, [r3, #17]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fe f9a6 	bl	800398c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f9be 	bl	80059c8 <HAL_RTC_WaitForSynchro>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d004      	beq.n	800565c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2204      	movs	r2, #4
 8005656:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e061      	b.n	8005720 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fa77 	bl	8005b50 <RTC_EnterInitMode>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d004      	beq.n	8005672 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2204      	movs	r2, #4
 800566c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e056      	b.n	8005720 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0207 	bic.w	r2, r2, #7
 8005680:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d005      	beq.n	8005696 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800568a:	4b27      	ldr	r3, [pc, #156]	@ (8005728 <HAL_RTC_Init+0x114>)
 800568c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568e:	4a26      	ldr	r2, [pc, #152]	@ (8005728 <HAL_RTC_Init+0x114>)
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005696:	4b24      	ldr	r3, [pc, #144]	@ (8005728 <HAL_RTC_Init+0x114>)
 8005698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800569a:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	4921      	ldr	r1, [pc, #132]	@ (8005728 <HAL_RTC_Init+0x114>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b0:	d003      	beq.n	80056ba <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	e00e      	b.n	80056d8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80056ba:	2001      	movs	r0, #1
 80056bc:	f7ff fef4 	bl	80054a8 <HAL_RCCEx_GetPeriphCLKFreq>
 80056c0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d104      	bne.n	80056d2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2204      	movs	r2, #4
 80056cc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e026      	b.n	8005720 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	0c1a      	lsrs	r2, r3, #16
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f002 020f 	and.w	r2, r2, #15
 80056e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	b292      	uxth	r2, r2
 80056ee:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fa55 	bl	8005ba0 <RTC_ExitInitMode>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2204      	movs	r2, #4
 8005700:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e00c      	b.n	8005720 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800571e:	2300      	movs	r3, #0
  }
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40006c00 	.word	0x40006c00

0800572c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	2300      	movs	r3, #0
 800573e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <HAL_RTC_SetTime+0x20>
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e080      	b.n	8005852 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	7c1b      	ldrb	r3, [r3, #16]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d101      	bne.n	800575c <HAL_RTC_SetTime+0x30>
 8005758:	2302      	movs	r3, #2
 800575a:	e07a      	b.n	8005852 <HAL_RTC_SetTime+0x126>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2202      	movs	r2, #2
 8005766:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d113      	bne.n	8005796 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005778:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	785b      	ldrb	r3, [r3, #1]
 8005780:	4619      	mov	r1, r3
 8005782:	460b      	mov	r3, r1
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	1a5b      	subs	r3, r3, r1
 8005788:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800578a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005790:	4413      	add	r3, r2
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	e01e      	b.n	80057d4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fa28 	bl	8005bf0 <RTC_Bcd2ToByte>
 80057a0:	4603      	mov	r3, r0
 80057a2:	461a      	mov	r2, r3
 80057a4:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80057a8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	785b      	ldrb	r3, [r3, #1]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fa1d 	bl	8005bf0 <RTC_Bcd2ToByte>
 80057b6:	4603      	mov	r3, r0
 80057b8:	461a      	mov	r2, r3
 80057ba:	4613      	mov	r3, r2
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80057c2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	789b      	ldrb	r3, [r3, #2]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fa11 	bl	8005bf0 <RTC_Bcd2ToByte>
 80057ce:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80057d0:	4423      	add	r3, r4
 80057d2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80057d4:	6979      	ldr	r1, [r7, #20]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f953 	bl	8005a82 <RTC_WriteTimeCounter>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2204      	movs	r2, #4
 80057e6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e02f      	b.n	8005852 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0205 	bic.w	r2, r2, #5
 8005800:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 f964 	bl	8005ad0 <RTC_ReadAlarmCounter>
 8005808:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d018      	beq.n	8005844 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	429a      	cmp	r2, r3
 8005818:	d214      	bcs.n	8005844 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005820:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005824:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005826:	6939      	ldr	r1, [r7, #16]
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f96a 	bl	8005b02 <RTC_WriteAlarmCounter>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d007      	beq.n	8005844 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2204      	movs	r2, #4
 8005838:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e006      	b.n	8005852 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005850:	2300      	movs	r3, #0
  }
}
 8005852:	4618      	mov	r0, r3
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	bd90      	pop	{r4, r7, pc}
	...

0800585c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	2300      	movs	r3, #0
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_RTC_SetDate+0x24>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e097      	b.n	80059b4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	7c1b      	ldrb	r3, [r3, #16]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_RTC_SetDate+0x34>
 800588c:	2302      	movs	r3, #2
 800588e:	e091      	b.n	80059b4 <HAL_RTC_SetDate+0x158>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2202      	movs	r2, #2
 800589a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10c      	bne.n	80058bc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	78da      	ldrb	r2, [r3, #3]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	785a      	ldrb	r2, [r3, #1]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	789a      	ldrb	r2, [r3, #2]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	739a      	strb	r2, [r3, #14]
 80058ba:	e01a      	b.n	80058f2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	78db      	ldrb	r3, [r3, #3]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 f995 	bl	8005bf0 <RTC_Bcd2ToByte>
 80058c6:	4603      	mov	r3, r0
 80058c8:	461a      	mov	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f98c 	bl	8005bf0 <RTC_Bcd2ToByte>
 80058d8:	4603      	mov	r3, r0
 80058da:	461a      	mov	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	789b      	ldrb	r3, [r3, #2]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 f983 	bl	8005bf0 <RTC_Bcd2ToByte>
 80058ea:	4603      	mov	r3, r0
 80058ec:	461a      	mov	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	7bdb      	ldrb	r3, [r3, #15]
 80058f6:	4618      	mov	r0, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	7b59      	ldrb	r1, [r3, #13]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	7b9b      	ldrb	r3, [r3, #14]
 8005900:	461a      	mov	r2, r3
 8005902:	f000 f993 	bl	8005c2c <RTC_WeekDayNum>
 8005906:	4603      	mov	r3, r0
 8005908:	461a      	mov	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	7b1a      	ldrb	r2, [r3, #12]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f883 	bl	8005a22 <RTC_ReadTimeCounter>
 800591c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	4a26      	ldr	r2, [pc, #152]	@ (80059bc <HAL_RTC_SetDate+0x160>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	0adb      	lsrs	r3, r3, #11
 8005928:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	2b18      	cmp	r3, #24
 800592e:	d93a      	bls.n	80059a6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	4a23      	ldr	r2, [pc, #140]	@ (80059c0 <HAL_RTC_SetDate+0x164>)
 8005934:	fba2 2303 	umull	r2, r3, r2, r3
 8005938:	091b      	lsrs	r3, r3, #4
 800593a:	4a22      	ldr	r2, [pc, #136]	@ (80059c4 <HAL_RTC_SetDate+0x168>)
 800593c:	fb02 f303 	mul.w	r3, r2, r3
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005946:	69f9      	ldr	r1, [r7, #28]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f89a 	bl	8005a82 <RTC_WriteTimeCounter>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d007      	beq.n	8005964 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2204      	movs	r2, #4
 8005958:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e027      	b.n	80059b4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f000 f8b3 	bl	8005ad0 <RTC_ReadAlarmCounter>
 800596a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d018      	beq.n	80059a6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	429a      	cmp	r2, r3
 800597a:	d214      	bcs.n	80059a6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8005982:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8005986:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005988:	69b9      	ldr	r1, [r7, #24]
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 f8b9 	bl	8005b02 <RTC_WriteAlarmCounter>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2204      	movs	r2, #4
 800599a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e006      	b.n	80059b4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3720      	adds	r7, #32
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	91a2b3c5 	.word	0x91a2b3c5
 80059c0:	aaaaaaab 	.word	0xaaaaaaab
 80059c4:	00015180 	.word	0x00015180

080059c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e01d      	b.n	8005a1a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f022 0208 	bic.w	r2, r2, #8
 80059ec:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80059ee:	f7fe fb85 	bl	80040fc <HAL_GetTick>
 80059f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80059f4:	e009      	b.n	8005a0a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80059f6:	f7fe fb81 	bl	80040fc <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a04:	d901      	bls.n	8005a0a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e007      	b.n	8005a1a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0ee      	beq.n	80059f6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b087      	sub	sp, #28
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	827b      	strh	r3, [r7, #18]
 8005a2e:	2300      	movs	r3, #0
 8005a30:	823b      	strh	r3, [r7, #16]
 8005a32:	2300      	movs	r3, #0
 8005a34:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005a52:	8a7a      	ldrh	r2, [r7, #18]
 8005a54:	8a3b      	ldrh	r3, [r7, #16]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d008      	beq.n	8005a6c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005a5a:	8a3b      	ldrh	r3, [r7, #16]
 8005a5c:	041a      	lsls	r2, r3, #16
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
 8005a6a:	e004      	b.n	8005a76 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005a6c:	8a7b      	ldrh	r3, [r7, #18]
 8005a6e:	041a      	lsls	r2, r3, #16
 8005a70:	89fb      	ldrh	r3, [r7, #14]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005a76:	697b      	ldr	r3, [r7, #20]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bc80      	pop	{r7}
 8005a80:	4770      	bx	lr

08005a82 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f85d 	bl	8005b50 <RTC_EnterInitMode>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
 8005aa0:	e011      	b.n	8005ac6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	0c12      	lsrs	r2, r2, #16
 8005aaa:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	b292      	uxth	r2, r2
 8005ab4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f872 	bl	8005ba0 <RTC_ExitInitMode>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	81fb      	strh	r3, [r7, #14]
 8005adc:	2300      	movs	r3, #0
 8005ade:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aee:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005af0:	89fb      	ldrh	r3, [r7, #14]
 8005af2:	041a      	lsls	r2, r3, #16
 8005af4:	89bb      	ldrh	r3, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr

08005b02 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f81d 	bl	8005b50 <RTC_EnterInitMode>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	73fb      	strb	r3, [r7, #15]
 8005b20:	e011      	b.n	8005b46 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	0c12      	lsrs	r2, r2, #16
 8005b2a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	b292      	uxth	r2, r2
 8005b34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f832 	bl	8005ba0 <RTC_ExitInitMode>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005b5c:	f7fe face 	bl	80040fc <HAL_GetTick>
 8005b60:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b62:	e009      	b.n	8005b78 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005b64:	f7fe faca 	bl	80040fc <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b72:	d901      	bls.n	8005b78 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e00f      	b.n	8005b98 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0ee      	beq.n	8005b64 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0210 	orr.w	r2, r2, #16
 8005b94:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0210 	bic.w	r2, r2, #16
 8005bba:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005bbc:	f7fe fa9e 	bl	80040fc <HAL_GetTick>
 8005bc0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005bc2:	e009      	b.n	8005bd8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005bc4:	f7fe fa9a 	bl	80040fc <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bd2:	d901      	bls.n	8005bd8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e007      	b.n	8005be8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0ee      	beq.n	8005bc4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	091b      	lsrs	r3, r3, #4
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	b2db      	uxtb	r3, r3
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr
	...

08005c2c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	70fb      	strb	r3, [r7, #3]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60bb      	str	r3, [r7, #8]
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8005c4a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d82d      	bhi.n	8005cae <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005c52:	78fa      	ldrb	r2, [r7, #3]
 8005c54:	4613      	mov	r3, r2
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	4413      	add	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d10 <RTC_WeekDayNum+0xe4>)
 8005c60:	fba2 2303 	umull	r2, r3, r2, r3
 8005c64:	085a      	lsrs	r2, r3, #1
 8005c66:	78bb      	ldrb	r3, [r7, #2]
 8005c68:	441a      	add	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	441a      	add	r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	3b01      	subs	r3, #1
 8005c72:	089b      	lsrs	r3, r3, #2
 8005c74:	441a      	add	r2, r3
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	4926      	ldr	r1, [pc, #152]	@ (8005d14 <RTC_WeekDayNum+0xe8>)
 8005c7c:	fba1 1303 	umull	r1, r3, r1, r3
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	1ad2      	subs	r2, r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	4922      	ldr	r1, [pc, #136]	@ (8005d14 <RTC_WeekDayNum+0xe8>)
 8005c8a:	fba1 1303 	umull	r1, r3, r1, r3
 8005c8e:	09db      	lsrs	r3, r3, #7
 8005c90:	4413      	add	r3, r2
 8005c92:	1d1a      	adds	r2, r3, #4
 8005c94:	4b20      	ldr	r3, [pc, #128]	@ (8005d18 <RTC_WeekDayNum+0xec>)
 8005c96:	fba3 1302 	umull	r1, r3, r3, r2
 8005c9a:	1ad1      	subs	r1, r2, r3
 8005c9c:	0849      	lsrs	r1, r1, #1
 8005c9e:	440b      	add	r3, r1
 8005ca0:	0899      	lsrs	r1, r3, #2
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	1a5b      	subs	r3, r3, r1
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	e029      	b.n	8005d02 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005cae:	78fa      	ldrb	r2, [r7, #3]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	4413      	add	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	1a9b      	subs	r3, r3, r2
 8005cba:	4a15      	ldr	r2, [pc, #84]	@ (8005d10 <RTC_WeekDayNum+0xe4>)
 8005cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc0:	085a      	lsrs	r2, r3, #1
 8005cc2:	78bb      	ldrb	r3, [r7, #2]
 8005cc4:	441a      	add	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	441a      	add	r2, r3
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	089b      	lsrs	r3, r3, #2
 8005cce:	441a      	add	r2, r3
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4910      	ldr	r1, [pc, #64]	@ (8005d14 <RTC_WeekDayNum+0xe8>)
 8005cd4:	fba1 1303 	umull	r1, r3, r1, r3
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	1ad2      	subs	r2, r2, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	490d      	ldr	r1, [pc, #52]	@ (8005d14 <RTC_WeekDayNum+0xe8>)
 8005ce0:	fba1 1303 	umull	r1, r3, r1, r3
 8005ce4:	09db      	lsrs	r3, r3, #7
 8005ce6:	4413      	add	r3, r2
 8005ce8:	1c9a      	adds	r2, r3, #2
 8005cea:	4b0b      	ldr	r3, [pc, #44]	@ (8005d18 <RTC_WeekDayNum+0xec>)
 8005cec:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf0:	1ad1      	subs	r1, r2, r3
 8005cf2:	0849      	lsrs	r1, r1, #1
 8005cf4:	440b      	add	r3, r1
 8005cf6:	0899      	lsrs	r1, r3, #2
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	1a5b      	subs	r3, r3, r1
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	b2db      	uxtb	r3, r3
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr
 8005d10:	38e38e39 	.word	0x38e38e39
 8005d14:	51eb851f 	.word	0x51eb851f
 8005d18:	24924925 	.word	0x24924925

08005d1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e076      	b.n	8005e1c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d108      	bne.n	8005d48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d3e:	d009      	beq.n	8005d54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	61da      	str	r2, [r3, #28]
 8005d46:	e005      	b.n	8005d54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7fd fe30 	bl	80039d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005da6:	431a      	orrs	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd8:	ea42 0103 	orr.w	r1, r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	0c1a      	lsrs	r2, r3, #16
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f002 0204 	and.w	r2, r2, #4
 8005dfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69da      	ldr	r2, [r3, #28]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	603b      	str	r3, [r7, #0]
 8005e30:	4613      	mov	r3, r2
 8005e32:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e34:	f7fe f962 	bl	80040fc <HAL_GetTick>
 8005e38:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005e3a:	88fb      	ldrh	r3, [r7, #6]
 8005e3c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d001      	beq.n	8005e4e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e12a      	b.n	80060a4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_SPI_Transmit+0x36>
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e122      	b.n	80060a4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_SPI_Transmit+0x48>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e11b      	b.n	80060a4 <HAL_SPI_Transmit+0x280>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2203      	movs	r2, #3
 8005e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	88fa      	ldrh	r2, [r7, #6]
 8005e8c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	88fa      	ldrh	r2, [r7, #6]
 8005e92:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eba:	d10f      	bne.n	8005edc <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005eda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee6:	2b40      	cmp	r3, #64	@ 0x40
 8005ee8:	d007      	beq.n	8005efa <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ef8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f02:	d152      	bne.n	8005faa <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <HAL_SPI_Transmit+0xee>
 8005f0c:	8b7b      	ldrh	r3, [r7, #26]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d145      	bne.n	8005f9e <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f16:	881a      	ldrh	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f22:	1c9a      	adds	r2, r3, #2
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f36:	e032      	b.n	8005f9e <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d112      	bne.n	8005f6c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f4a:	881a      	ldrh	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f56:	1c9a      	adds	r2, r3, #2
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f6a:	e018      	b.n	8005f9e <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f6c:	f7fe f8c6 	bl	80040fc <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d803      	bhi.n	8005f84 <HAL_SPI_Transmit+0x160>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f82:	d102      	bne.n	8005f8a <HAL_SPI_Transmit+0x166>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d109      	bne.n	8005f9e <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e082      	b.n	80060a4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1c7      	bne.n	8005f38 <HAL_SPI_Transmit+0x114>
 8005fa8:	e053      	b.n	8006052 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_SPI_Transmit+0x194>
 8005fb2:	8b7b      	ldrh	r3, [r7, #26]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d147      	bne.n	8006048 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	330c      	adds	r3, #12
 8005fc2:	7812      	ldrb	r2, [r2, #0]
 8005fc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005fde:	e033      	b.n	8006048 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d113      	bne.n	8006016 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	7812      	ldrb	r2, [r2, #0]
 8005ffa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800600a:	b29b      	uxth	r3, r3
 800600c:	3b01      	subs	r3, #1
 800600e:	b29a      	uxth	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006014:	e018      	b.n	8006048 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006016:	f7fe f871 	bl	80040fc <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d803      	bhi.n	800602e <HAL_SPI_Transmit+0x20a>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602c:	d102      	bne.n	8006034 <HAL_SPI_Transmit+0x210>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d109      	bne.n	8006048 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e02d      	b.n	80060a4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1c6      	bne.n	8005fe0 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006052:	69fa      	ldr	r2, [r7, #28]
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 fa5a 	bl	8006510 <SPI_EndRxTxTransaction>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10a      	bne.n	8006086 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80060a2:	2300      	movs	r3, #0
  }
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3720      	adds	r7, #32
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	@ 0x28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80060ba:	2301      	movs	r3, #1
 80060bc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060be:	f7fe f81d 	bl	80040fc <HAL_GetTick>
 80060c2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060ca:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80060d2:	887b      	ldrh	r3, [r7, #2]
 80060d4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060d6:	7ffb      	ldrb	r3, [r7, #31]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d00c      	beq.n	80060f6 <HAL_SPI_TransmitReceive+0x4a>
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060e2:	d106      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0x46>
 80060ec:	7ffb      	ldrb	r3, [r7, #31]
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d001      	beq.n	80060f6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80060f2:	2302      	movs	r3, #2
 80060f4:	e17f      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d005      	beq.n	8006108 <HAL_SPI_TransmitReceive+0x5c>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <HAL_SPI_TransmitReceive+0x5c>
 8006102:	887b      	ldrh	r3, [r7, #2]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e174      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_SPI_TransmitReceive+0x6e>
 8006116:	2302      	movs	r3, #2
 8006118:	e16d      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x34a>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b04      	cmp	r3, #4
 800612c:	d003      	beq.n	8006136 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2205      	movs	r2, #5
 8006132:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	887a      	ldrh	r2, [r7, #2]
 8006146:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	887a      	ldrh	r2, [r7, #2]
 800614c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	887a      	ldrh	r2, [r7, #2]
 8006158:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	887a      	ldrh	r2, [r7, #2]
 800615e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006176:	2b40      	cmp	r3, #64	@ 0x40
 8006178:	d007      	beq.n	800618a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006188:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006192:	d17e      	bne.n	8006292 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <HAL_SPI_TransmitReceive+0xf6>
 800619c:	8afb      	ldrh	r3, [r7, #22]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d16c      	bne.n	800627c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a6:	881a      	ldrh	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b2:	1c9a      	adds	r2, r3, #2
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061c6:	e059      	b.n	800627c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d11b      	bne.n	800620e <HAL_SPI_TransmitReceive+0x162>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d016      	beq.n	800620e <HAL_SPI_TransmitReceive+0x162>
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d113      	bne.n	800620e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ea:	881a      	ldrh	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f6:	1c9a      	adds	r2, r3, #2
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006200:	b29b      	uxth	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b01      	cmp	r3, #1
 800621a:	d119      	bne.n	8006250 <HAL_SPI_TransmitReceive+0x1a4>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d014      	beq.n	8006250 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006230:	b292      	uxth	r2, r2
 8006232:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006238:	1c9a      	adds	r2, r3, #2
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006242:	b29b      	uxth	r3, r3
 8006244:	3b01      	subs	r3, #1
 8006246:	b29a      	uxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800624c:	2301      	movs	r3, #1
 800624e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006250:	f7fd ff54 	bl	80040fc <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800625c:	429a      	cmp	r2, r3
 800625e:	d80d      	bhi.n	800627c <HAL_SPI_TransmitReceive+0x1d0>
 8006260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006266:	d009      	beq.n	800627c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e0bc      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006280:	b29b      	uxth	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1a0      	bne.n	80061c8 <HAL_SPI_TransmitReceive+0x11c>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d19b      	bne.n	80061c8 <HAL_SPI_TransmitReceive+0x11c>
 8006290:	e082      	b.n	8006398 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <HAL_SPI_TransmitReceive+0x1f4>
 800629a:	8afb      	ldrh	r3, [r7, #22]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d171      	bne.n	8006384 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	330c      	adds	r3, #12
 80062aa:	7812      	ldrb	r2, [r2, #0]
 80062ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062c6:	e05d      	b.n	8006384 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d11c      	bne.n	8006310 <HAL_SPI_TransmitReceive+0x264>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d017      	beq.n	8006310 <HAL_SPI_TransmitReceive+0x264>
 80062e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d114      	bne.n	8006310 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	330c      	adds	r3, #12
 80062f0:	7812      	ldrb	r2, [r2, #0]
 80062f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b01      	cmp	r3, #1
 800631c:	d119      	bne.n	8006352 <HAL_SPI_TransmitReceive+0x2a6>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006322:	b29b      	uxth	r3, r3
 8006324:	2b00      	cmp	r3, #0
 8006326:	d014      	beq.n	8006352 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633a:	1c5a      	adds	r2, r3, #1
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006344:	b29b      	uxth	r3, r3
 8006346:	3b01      	subs	r3, #1
 8006348:	b29a      	uxth	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800634e:	2301      	movs	r3, #1
 8006350:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006352:	f7fd fed3 	bl	80040fc <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800635e:	429a      	cmp	r2, r3
 8006360:	d803      	bhi.n	800636a <HAL_SPI_TransmitReceive+0x2be>
 8006362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d102      	bne.n	8006370 <HAL_SPI_TransmitReceive+0x2c4>
 800636a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636c:	2b00      	cmp	r3, #0
 800636e:	d109      	bne.n	8006384 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e038      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006388:	b29b      	uxth	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d19c      	bne.n	80062c8 <HAL_SPI_TransmitReceive+0x21c>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006392:	b29b      	uxth	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d197      	bne.n	80062c8 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006398:	6a3a      	ldr	r2, [r7, #32]
 800639a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 f8b7 	bl	8006510 <SPI_EndRxTxTransaction>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d008      	beq.n	80063ba <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2220      	movs	r2, #32
 80063ac:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e01d      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063c2:	2300      	movs	r3, #0
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	613b      	str	r3, [r7, #16]
 80063d6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e000      	b.n	80063f6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80063f4:	2300      	movs	r3, #0
  }
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3728      	adds	r7, #40	@ 0x28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b088      	sub	sp, #32
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	603b      	str	r3, [r7, #0]
 800640c:	4613      	mov	r3, r2
 800640e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006410:	f7fd fe74 	bl	80040fc <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	4413      	add	r3, r2
 800641e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006420:	f7fd fe6c 	bl	80040fc <HAL_GetTick>
 8006424:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006426:	4b39      	ldr	r3, [pc, #228]	@ (800650c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	015b      	lsls	r3, r3, #5
 800642c:	0d1b      	lsrs	r3, r3, #20
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	fb02 f303 	mul.w	r3, r2, r3
 8006434:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006436:	e054      	b.n	80064e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d050      	beq.n	80064e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006440:	f7fd fe5c 	bl	80040fc <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	429a      	cmp	r2, r3
 800644e:	d902      	bls.n	8006456 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d13d      	bne.n	80064d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006464:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800646e:	d111      	bne.n	8006494 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006478:	d004      	beq.n	8006484 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006482:	d107      	bne.n	8006494 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006492:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800649c:	d10f      	bne.n	80064be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e017      	b.n	8006502 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	3b01      	subs	r3, #1
 80064e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4013      	ands	r3, r2
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	bf0c      	ite	eq
 80064f2:	2301      	moveq	r3, #1
 80064f4:	2300      	movne	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	79fb      	ldrb	r3, [r7, #7]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d19b      	bne.n	8006438 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000068 	.word	0x20000068

08006510 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af02      	add	r7, sp, #8
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2201      	movs	r2, #1
 8006524:	2102      	movs	r1, #2
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f7ff ff6a 	bl	8006400 <SPI_WaitFlagStateUntilTimeout>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d007      	beq.n	8006542 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006536:	f043 0220 	orr.w	r2, r3, #32
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e013      	b.n	800656a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2200      	movs	r2, #0
 800654a:	2180      	movs	r1, #128	@ 0x80
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f7ff ff57 	bl	8006400 <SPI_WaitFlagStateUntilTimeout>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d007      	beq.n	8006568 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655c:	f043 0220 	orr.w	r2, r3, #32
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e000      	b.n	800656a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e041      	b.n	8006608 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d106      	bne.n	800659e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7fd facd 	bl	8003b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2202      	movs	r2, #2
 80065a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3304      	adds	r3, #4
 80065ae:	4619      	mov	r1, r3
 80065b0:	4610      	mov	r0, r2
 80065b2:	f000 f93f 	bl	8006834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	d001      	beq.n	8006628 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e032      	b.n	800668e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a18      	ldr	r2, [pc, #96]	@ (8006698 <HAL_TIM_Base_Start+0x88>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d00e      	beq.n	8006658 <HAL_TIM_Base_Start+0x48>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006642:	d009      	beq.n	8006658 <HAL_TIM_Base_Start+0x48>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a14      	ldr	r2, [pc, #80]	@ (800669c <HAL_TIM_Base_Start+0x8c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d004      	beq.n	8006658 <HAL_TIM_Base_Start+0x48>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a13      	ldr	r2, [pc, #76]	@ (80066a0 <HAL_TIM_Base_Start+0x90>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d111      	bne.n	800667c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 0307 	and.w	r3, r3, #7
 8006662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b06      	cmp	r3, #6
 8006668:	d010      	beq.n	800668c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0201 	orr.w	r2, r2, #1
 8006678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800667a:	e007      	b.n	800668c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr
 8006698:	40012c00 	.word	0x40012c00
 800669c:	40000400 	.word	0x40000400
 80066a0:	40000800 	.word	0x40000800

080066a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_TIM_ConfigClockSource+0x1c>
 80066bc:	2302      	movs	r3, #2
 80066be:	e0b4      	b.n	800682a <HAL_TIM_ConfigClockSource+0x186>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f8:	d03e      	beq.n	8006778 <HAL_TIM_ConfigClockSource+0xd4>
 80066fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066fe:	f200 8087 	bhi.w	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006706:	f000 8086 	beq.w	8006816 <HAL_TIM_ConfigClockSource+0x172>
 800670a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800670e:	d87f      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006710:	2b70      	cmp	r3, #112	@ 0x70
 8006712:	d01a      	beq.n	800674a <HAL_TIM_ConfigClockSource+0xa6>
 8006714:	2b70      	cmp	r3, #112	@ 0x70
 8006716:	d87b      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006718:	2b60      	cmp	r3, #96	@ 0x60
 800671a:	d050      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x11a>
 800671c:	2b60      	cmp	r3, #96	@ 0x60
 800671e:	d877      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006720:	2b50      	cmp	r3, #80	@ 0x50
 8006722:	d03c      	beq.n	800679e <HAL_TIM_ConfigClockSource+0xfa>
 8006724:	2b50      	cmp	r3, #80	@ 0x50
 8006726:	d873      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006728:	2b40      	cmp	r3, #64	@ 0x40
 800672a:	d058      	beq.n	80067de <HAL_TIM_ConfigClockSource+0x13a>
 800672c:	2b40      	cmp	r3, #64	@ 0x40
 800672e:	d86f      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006730:	2b30      	cmp	r3, #48	@ 0x30
 8006732:	d064      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0x15a>
 8006734:	2b30      	cmp	r3, #48	@ 0x30
 8006736:	d86b      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006738:	2b20      	cmp	r3, #32
 800673a:	d060      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0x15a>
 800673c:	2b20      	cmp	r3, #32
 800673e:	d867      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006740:	2b00      	cmp	r3, #0
 8006742:	d05c      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0x15a>
 8006744:	2b10      	cmp	r3, #16
 8006746:	d05a      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0x15a>
 8006748:	e062      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800675a:	f000 f950 	bl	80069fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800676c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	609a      	str	r2, [r3, #8]
      break;
 8006776:	e04f      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006788:	f000 f939 	bl	80069fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800679a:	609a      	str	r2, [r3, #8]
      break;
 800679c:	e03c      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067aa:	461a      	mov	r2, r3
 80067ac:	f000 f8b0 	bl	8006910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2150      	movs	r1, #80	@ 0x50
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 f907 	bl	80069ca <TIM_ITRx_SetConfig>
      break;
 80067bc:	e02c      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067ca:	461a      	mov	r2, r3
 80067cc:	f000 f8ce 	bl	800696c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2160      	movs	r1, #96	@ 0x60
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f8f7 	bl	80069ca <TIM_ITRx_SetConfig>
      break;
 80067dc:	e01c      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ea:	461a      	mov	r2, r3
 80067ec:	f000 f890 	bl	8006910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2140      	movs	r1, #64	@ 0x40
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 f8e7 	bl	80069ca <TIM_ITRx_SetConfig>
      break;
 80067fc:	e00c      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4619      	mov	r1, r3
 8006808:	4610      	mov	r0, r2
 800680a:	f000 f8de 	bl	80069ca <TIM_ITRx_SetConfig>
      break;
 800680e:	e003      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	73fb      	strb	r3, [r7, #15]
      break;
 8006814:	e000      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a2f      	ldr	r2, [pc, #188]	@ (8006904 <TIM_Base_SetConfig+0xd0>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00b      	beq.n	8006864 <TIM_Base_SetConfig+0x30>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006852:	d007      	beq.n	8006864 <TIM_Base_SetConfig+0x30>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a2c      	ldr	r2, [pc, #176]	@ (8006908 <TIM_Base_SetConfig+0xd4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d003      	beq.n	8006864 <TIM_Base_SetConfig+0x30>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a2b      	ldr	r2, [pc, #172]	@ (800690c <TIM_Base_SetConfig+0xd8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d108      	bne.n	8006876 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800686a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a22      	ldr	r2, [pc, #136]	@ (8006904 <TIM_Base_SetConfig+0xd0>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d00b      	beq.n	8006896 <TIM_Base_SetConfig+0x62>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006884:	d007      	beq.n	8006896 <TIM_Base_SetConfig+0x62>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a1f      	ldr	r2, [pc, #124]	@ (8006908 <TIM_Base_SetConfig+0xd4>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_Base_SetConfig+0x62>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a1e      	ldr	r2, [pc, #120]	@ (800690c <TIM_Base_SetConfig+0xd8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d108      	bne.n	80068a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800689c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006904 <TIM_Base_SetConfig+0xd0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d103      	bne.n	80068dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	691a      	ldr	r2, [r3, #16]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d005      	beq.n	80068fa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f023 0201 	bic.w	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	611a      	str	r2, [r3, #16]
  }
}
 80068fa:	bf00      	nop
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	bc80      	pop	{r7}
 8006902:	4770      	bx	lr
 8006904:	40012c00 	.word	0x40012c00
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800

08006910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f023 0201 	bic.w	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800693a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f023 030a 	bic.w	r3, r3, #10
 800694c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	bc80      	pop	{r7}
 800696a:	4770      	bx	lr

0800696c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	f023 0210 	bic.w	r2, r3, #16
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	031b      	lsls	r3, r3, #12
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	4313      	orrs	r3, r2
 80069a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	011b      	lsls	r3, r3, #4
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	621a      	str	r2, [r3, #32]
}
 80069c0:	bf00      	nop
 80069c2:	371c      	adds	r7, #28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bc80      	pop	{r7}
 80069c8:	4770      	bx	lr

080069ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f043 0307 	orr.w	r3, r3, #7
 80069ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	609a      	str	r2, [r3, #8]
}
 80069f4:	bf00      	nop
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b087      	sub	sp, #28
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	607a      	str	r2, [r7, #4]
 8006a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	021a      	lsls	r2, r3, #8
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	431a      	orrs	r2, r3
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	609a      	str	r2, [r3, #8]
}
 8006a32:	bf00      	nop
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr

08006a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d101      	bne.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a50:	2302      	movs	r3, #2
 8006a52:	e046      	b.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a16      	ldr	r2, [pc, #88]	@ (8006aec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aa0:	d009      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a12      	ldr	r2, [pc, #72]	@ (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a10      	ldr	r2, [pc, #64]	@ (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d10c      	bne.n	8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bc80      	pop	{r7}
 8006aea:	4770      	bx	lr
 8006aec:	40012c00 	.word	0x40012c00
 8006af0:	40000400 	.word	0x40000400
 8006af4:	40000800 	.word	0x40000800

08006af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e042      	b.n	8006b90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d106      	bne.n	8006b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7fd f828 	bl	8003b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2224      	movs	r2, #36	@ 0x24
 8006b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68da      	ldr	r2, [r3, #12]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fdb7 	bl	80076b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695a      	ldr	r2, [r3, #20]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2220      	movs	r2, #32
 8006b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08a      	sub	sp, #40	@ 0x28
 8006b9c:	af02      	add	r7, sp, #8
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	603b      	str	r3, [r7, #0]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b20      	cmp	r3, #32
 8006bb6:	d175      	bne.n	8006ca4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d002      	beq.n	8006bc4 <HAL_UART_Transmit+0x2c>
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e06e      	b.n	8006ca6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2221      	movs	r2, #33	@ 0x21
 8006bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bd6:	f7fd fa91 	bl	80040fc <HAL_GetTick>
 8006bda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	88fa      	ldrh	r2, [r7, #6]
 8006be0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	88fa      	ldrh	r2, [r7, #6]
 8006be6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bf0:	d108      	bne.n	8006c04 <HAL_UART_Transmit+0x6c>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d104      	bne.n	8006c04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	e003      	b.n	8006c0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c0c:	e02e      	b.n	8006c6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2200      	movs	r2, #0
 8006c16:	2180      	movs	r1, #128	@ 0x80
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 fb1c 	bl	8007256 <UART_WaitOnFlagUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e03a      	b.n	8006ca6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10b      	bne.n	8006c4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	3302      	adds	r3, #2
 8006c4a:	61bb      	str	r3, [r7, #24]
 8006c4c:	e007      	b.n	8006c5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	781a      	ldrb	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1cb      	bne.n	8006c0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2140      	movs	r1, #64	@ 0x40
 8006c80:	68f8      	ldr	r0, [r7, #12]
 8006c82:	f000 fae8 	bl	8007256 <UART_WaitOnFlagUntilTimeout>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d005      	beq.n	8006c98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e006      	b.n	8006ca6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	e000      	b.n	8006ca6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006ca4:	2302      	movs	r3, #2
  }
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3720      	adds	r7, #32
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
 8006cb6:	60b9      	str	r1, [r7, #8]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b20      	cmp	r3, #32
 8006cc6:	d112      	bne.n	8006cee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <HAL_UART_Receive_IT+0x26>
 8006cce:	88fb      	ldrh	r3, [r7, #6]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e00b      	b.n	8006cf0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006cde:	88fb      	ldrh	r3, [r7, #6]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 fb0f 	bl	8007308 <UART_Start_Receive_IT>
 8006cea:	4603      	mov	r3, r0
 8006cec:	e000      	b.n	8006cf0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006cee:	2302      	movs	r3, #2
  }
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b0ba      	sub	sp, #232	@ 0xe8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10f      	bne.n	8006d5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d009      	beq.n	8006d5e <HAL_UART_IRQHandler+0x66>
 8006d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d4e:	f003 0320 	and.w	r3, r3, #32
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fbec 	bl	8007534 <UART_Receive_IT>
      return;
 8006d5c:	e25b      	b.n	8007216 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 80de 	beq.w	8006f24 <HAL_UART_IRQHandler+0x22c>
 8006d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d106      	bne.n	8006d82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 80d1 	beq.w	8006f24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00b      	beq.n	8006da6 <HAL_UART_IRQHandler+0xae>
 8006d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d005      	beq.n	8006da6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d9e:	f043 0201 	orr.w	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006daa:	f003 0304 	and.w	r3, r3, #4
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00b      	beq.n	8006dca <HAL_UART_IRQHandler+0xd2>
 8006db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d005      	beq.n	8006dca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc2:	f043 0202 	orr.w	r2, r3, #2
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00b      	beq.n	8006dee <HAL_UART_IRQHandler+0xf6>
 8006dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d005      	beq.n	8006dee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de6:	f043 0204 	orr.w	r2, r3, #4
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d011      	beq.n	8006e1e <HAL_UART_IRQHandler+0x126>
 8006dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d105      	bne.n	8006e12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e16:	f043 0208 	orr.w	r2, r3, #8
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 81f2 	beq.w	800720c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e2c:	f003 0320 	and.w	r3, r3, #32
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d008      	beq.n	8006e46 <HAL_UART_IRQHandler+0x14e>
 8006e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e38:	f003 0320 	and.w	r3, r3, #32
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fb77 	bl	8007534 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bf14      	ite	ne
 8006e54:	2301      	movne	r3, #1
 8006e56:	2300      	moveq	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e62:	f003 0308 	and.w	r3, r3, #8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d103      	bne.n	8006e72 <HAL_UART_IRQHandler+0x17a>
 8006e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d04f      	beq.n	8006f12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fa81 	bl	800737a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d041      	beq.n	8006f0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3314      	adds	r3, #20
 8006e8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ea0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3314      	adds	r3, #20
 8006eae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006eb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1d9      	bne.n	8006e86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d013      	beq.n	8006f02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ede:	4a7e      	ldr	r2, [pc, #504]	@ (80070d8 <HAL_UART_IRQHandler+0x3e0>)
 8006ee0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fd fada 	bl	80044a0 <HAL_DMA_Abort_IT>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d016      	beq.n	8006f20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006efc:	4610      	mov	r0, r2
 8006efe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f00:	e00e      	b.n	8006f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f993 	bl	800722e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	e00a      	b.n	8006f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f98f 	bl	800722e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f10:	e006      	b.n	8006f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f98b 	bl	800722e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006f1e:	e175      	b.n	800720c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f20:	bf00      	nop
    return;
 8006f22:	e173      	b.n	800720c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	f040 814f 	bne.w	80071cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f32:	f003 0310 	and.w	r3, r3, #16
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f000 8148 	beq.w	80071cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f40:	f003 0310 	and.w	r3, r3, #16
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 8141 	beq.w	80071cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60bb      	str	r3, [r7, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	60bb      	str	r3, [r7, #8]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 80b6 	beq.w	80070dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 8145 	beq.w	8007210 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	f080 813e 	bcs.w	8007210 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	f000 8088 	beq.w	80070b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	330c      	adds	r3, #12
 8006fae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006fc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fc6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	330c      	adds	r3, #12
 8006fd0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006fd4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006fe0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006fe4:	e841 2300 	strex	r3, r2, [r1]
 8006fe8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1d9      	bne.n	8006fa8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3314      	adds	r3, #20
 8006ffa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007004:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007006:	f023 0301 	bic.w	r3, r3, #1
 800700a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3314      	adds	r3, #20
 8007014:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007018:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800701c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007020:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007024:	e841 2300 	strex	r3, r2, [r1]
 8007028:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800702a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e1      	bne.n	8006ff4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3314      	adds	r3, #20
 8007036:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800703a:	e853 3f00 	ldrex	r3, [r3]
 800703e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007040:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007046:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3314      	adds	r3, #20
 8007050:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007054:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007056:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800705a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007062:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e3      	bne.n	8007030 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	330c      	adds	r3, #12
 800707c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007088:	f023 0310 	bic.w	r3, r3, #16
 800708c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	330c      	adds	r3, #12
 8007096:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800709a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800709c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80070a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e3      	bne.n	8007076 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fd f9b8 	bl	8004428 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f8b6 	bl	8007240 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070d4:	e09c      	b.n	8007210 <HAL_UART_IRQHandler+0x518>
 80070d6:	bf00      	nop
 80070d8:	0800743f 	.word	0x0800743f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 808e 	beq.w	8007214 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80070f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8089 	beq.w	8007214 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	330c      	adds	r3, #12
 8007108:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007114:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007118:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	330c      	adds	r3, #12
 8007122:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007126:	647a      	str	r2, [r7, #68]	@ 0x44
 8007128:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800712c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e3      	bne.n	8007102 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3314      	adds	r3, #20
 8007140:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	623b      	str	r3, [r7, #32]
   return(result);
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	f023 0301 	bic.w	r3, r3, #1
 8007150:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3314      	adds	r3, #20
 800715a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800715e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007160:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800716c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e3      	bne.n	800713a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	330c      	adds	r3, #12
 8007186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0310 	bic.w	r3, r3, #16
 8007196:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	330c      	adds	r3, #12
 80071a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80071a4:	61fa      	str	r2, [r7, #28]
 80071a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	69b9      	ldr	r1, [r7, #24]
 80071aa:	69fa      	ldr	r2, [r7, #28]
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	617b      	str	r3, [r7, #20]
   return(result);
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e3      	bne.n	8007180 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2202      	movs	r2, #2
 80071bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f83b 	bl	8007240 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071ca:	e023      	b.n	8007214 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d009      	beq.n	80071ec <HAL_UART_IRQHandler+0x4f4>
 80071d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f93e 	bl	8007466 <UART_Transmit_IT>
    return;
 80071ea:	e014      	b.n	8007216 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00e      	beq.n	8007216 <HAL_UART_IRQHandler+0x51e>
 80071f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d008      	beq.n	8007216 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f97d 	bl	8007504 <UART_EndTransmit_IT>
    return;
 800720a:	e004      	b.n	8007216 <HAL_UART_IRQHandler+0x51e>
    return;
 800720c:	bf00      	nop
 800720e:	e002      	b.n	8007216 <HAL_UART_IRQHandler+0x51e>
      return;
 8007210:	bf00      	nop
 8007212:	e000      	b.n	8007216 <HAL_UART_IRQHandler+0x51e>
      return;
 8007214:	bf00      	nop
  }
}
 8007216:	37e8      	adds	r7, #232	@ 0xe8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	bc80      	pop	{r7}
 800722c:	4770      	bx	lr

0800722e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007236:	bf00      	nop
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	bc80      	pop	{r7}
 800723e:	4770      	bx	lr

08007240 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	bc80      	pop	{r7}
 8007254:	4770      	bx	lr

08007256 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b086      	sub	sp, #24
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	603b      	str	r3, [r7, #0]
 8007262:	4613      	mov	r3, r2
 8007264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007266:	e03b      	b.n	80072e0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007268:	6a3b      	ldr	r3, [r7, #32]
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726e:	d037      	beq.n	80072e0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007270:	f7fc ff44 	bl	80040fc <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	6a3a      	ldr	r2, [r7, #32]
 800727c:	429a      	cmp	r2, r3
 800727e:	d302      	bcc.n	8007286 <UART_WaitOnFlagUntilTimeout+0x30>
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e03a      	b.n	8007300 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f003 0304 	and.w	r3, r3, #4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d023      	beq.n	80072e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b80      	cmp	r3, #128	@ 0x80
 800729c:	d020      	beq.n	80072e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b40      	cmp	r3, #64	@ 0x40
 80072a2:	d01d      	beq.n	80072e0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0308 	and.w	r3, r3, #8
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d116      	bne.n	80072e0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80072b2:	2300      	movs	r3, #0
 80072b4:	617b      	str	r3, [r7, #20]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	617b      	str	r3, [r7, #20]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f856 	bl	800737a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2208      	movs	r2, #8
 80072d2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e00f      	b.n	8007300 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	4013      	ands	r3, r2
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	bf0c      	ite	eq
 80072f0:	2301      	moveq	r3, #1
 80072f2:	2300      	movne	r3, #0
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	461a      	mov	r2, r3
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d0b4      	beq.n	8007268 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	88fa      	ldrh	r2, [r7, #6]
 8007320:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	88fa      	ldrh	r2, [r7, #6]
 8007326:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2222      	movs	r2, #34	@ 0x22
 8007332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d007      	beq.n	800734e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800734c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	695a      	ldr	r2, [r3, #20]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f042 0201 	orr.w	r2, r2, #1
 800735c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f042 0220 	orr.w	r2, r2, #32
 800736c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr

0800737a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800737a:	b480      	push	{r7}
 800737c:	b095      	sub	sp, #84	@ 0x54
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	330c      	adds	r3, #12
 8007388:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007394:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007398:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	330c      	adds	r3, #12
 80073a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80073a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e5      	bne.n	8007382 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3314      	adds	r3, #20
 80073bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	6a3b      	ldr	r3, [r7, #32]
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	f023 0301 	bic.w	r3, r3, #1
 80073cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3314      	adds	r3, #20
 80073d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e5      	bne.n	80073b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d119      	bne.n	8007426 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	330c      	adds	r3, #12
 80073f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	e853 3f00 	ldrex	r3, [r3]
 8007400:	60bb      	str	r3, [r7, #8]
   return(result);
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f023 0310 	bic.w	r3, r3, #16
 8007408:	647b      	str	r3, [r7, #68]	@ 0x44
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	330c      	adds	r3, #12
 8007410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007412:	61ba      	str	r2, [r7, #24]
 8007414:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	6979      	ldr	r1, [r7, #20]
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	613b      	str	r3, [r7, #16]
   return(result);
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e5      	bne.n	80073f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2220      	movs	r2, #32
 800742a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007434:	bf00      	nop
 8007436:	3754      	adds	r7, #84	@ 0x54
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr

0800743e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f7ff fee8 	bl	800722e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800745e:	bf00      	nop
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007466:	b480      	push	{r7}
 8007468:	b085      	sub	sp, #20
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b21      	cmp	r3, #33	@ 0x21
 8007478:	d13e      	bne.n	80074f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007482:	d114      	bne.n	80074ae <UART_Transmit_IT+0x48>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d110      	bne.n	80074ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	1c9a      	adds	r2, r3, #2
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	621a      	str	r2, [r3, #32]
 80074ac:	e008      	b.n	80074c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	1c59      	adds	r1, r3, #1
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	6211      	str	r1, [r2, #32]
 80074b8:	781a      	ldrb	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	4619      	mov	r1, r3
 80074ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10f      	bne.n	80074f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	e000      	b.n	80074fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80074f8:	2302      	movs	r3, #2
  }
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	bc80      	pop	{r7}
 8007502:	4770      	bx	lr

08007504 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800751a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2220      	movs	r2, #32
 8007520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7ff fe79 	bl	800721c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b08c      	sub	sp, #48	@ 0x30
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b22      	cmp	r3, #34	@ 0x22
 8007546:	f040 80ae 	bne.w	80076a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007552:	d117      	bne.n	8007584 <UART_Receive_IT+0x50>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d113      	bne.n	8007584 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800755c:	2300      	movs	r3, #0
 800755e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007564:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	b29b      	uxth	r3, r3
 800756e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007572:	b29a      	uxth	r2, r3
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757c:	1c9a      	adds	r2, r3, #2
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	629a      	str	r2, [r3, #40]	@ 0x28
 8007582:	e026      	b.n	80075d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007588:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800758a:	2300      	movs	r3, #0
 800758c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007596:	d007      	beq.n	80075a8 <UART_Receive_IT+0x74>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10a      	bne.n	80075b6 <UART_Receive_IT+0x82>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d106      	bne.n	80075b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b2:	701a      	strb	r2, [r3, #0]
 80075b4:	e008      	b.n	80075c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29b      	uxth	r3, r3
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	4619      	mov	r1, r3
 80075e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d15d      	bne.n	80076a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0220 	bic.w	r2, r2, #32
 80075f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007604:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695a      	ldr	r2, [r3, #20]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0201 	bic.w	r2, r2, #1
 8007614:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2220      	movs	r2, #32
 800761a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007628:	2b01      	cmp	r3, #1
 800762a:	d135      	bne.n	8007698 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	330c      	adds	r3, #12
 8007638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	613b      	str	r3, [r7, #16]
   return(result);
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f023 0310 	bic.w	r3, r3, #16
 8007648:	627b      	str	r3, [r7, #36]	@ 0x24
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007652:	623a      	str	r2, [r7, #32]
 8007654:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	69f9      	ldr	r1, [r7, #28]
 8007658:	6a3a      	ldr	r2, [r7, #32]
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e5      	bne.n	8007632 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0310 	and.w	r3, r3, #16
 8007670:	2b10      	cmp	r3, #16
 8007672:	d10a      	bne.n	800768a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007674:	2300      	movs	r3, #0
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800768e:	4619      	mov	r1, r3
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff fdd5 	bl	8007240 <HAL_UARTEx_RxEventCallback>
 8007696:	e002      	b.n	800769e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7fa f943 	bl	8001924 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	e002      	b.n	80076a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	e000      	b.n	80076a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80076a6:	2302      	movs	r3, #2
  }
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3730      	adds	r7, #48	@ 0x30
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689a      	ldr	r2, [r3, #8]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	431a      	orrs	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80076ea:	f023 030c 	bic.w	r3, r3, #12
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6812      	ldr	r2, [r2, #0]
 80076f2:	68b9      	ldr	r1, [r7, #8]
 80076f4:	430b      	orrs	r3, r1
 80076f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a2c      	ldr	r2, [pc, #176]	@ (80077c4 <UART_SetConfig+0x114>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d103      	bne.n	8007720 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007718:	f7fd fdde 	bl	80052d8 <HAL_RCC_GetPCLK2Freq>
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	e002      	b.n	8007726 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007720:	f7fd fdc6 	bl	80052b0 <HAL_RCC_GetPCLK1Freq>
 8007724:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	009a      	lsls	r2, r3, #2
 8007730:	441a      	add	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	fbb2 f3f3 	udiv	r3, r2, r3
 800773c:	4a22      	ldr	r2, [pc, #136]	@ (80077c8 <UART_SetConfig+0x118>)
 800773e:	fba2 2303 	umull	r2, r3, r2, r3
 8007742:	095b      	lsrs	r3, r3, #5
 8007744:	0119      	lsls	r1, r3, #4
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4613      	mov	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4413      	add	r3, r2
 800774e:	009a      	lsls	r2, r3, #2
 8007750:	441a      	add	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	fbb2 f2f3 	udiv	r2, r2, r3
 800775c:	4b1a      	ldr	r3, [pc, #104]	@ (80077c8 <UART_SetConfig+0x118>)
 800775e:	fba3 0302 	umull	r0, r3, r3, r2
 8007762:	095b      	lsrs	r3, r3, #5
 8007764:	2064      	movs	r0, #100	@ 0x64
 8007766:	fb00 f303 	mul.w	r3, r0, r3
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	011b      	lsls	r3, r3, #4
 800776e:	3332      	adds	r3, #50	@ 0x32
 8007770:	4a15      	ldr	r2, [pc, #84]	@ (80077c8 <UART_SetConfig+0x118>)
 8007772:	fba2 2303 	umull	r2, r3, r2, r3
 8007776:	095b      	lsrs	r3, r3, #5
 8007778:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800777c:	4419      	add	r1, r3
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	4613      	mov	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	009a      	lsls	r2, r3, #2
 8007788:	441a      	add	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	fbb2 f2f3 	udiv	r2, r2, r3
 8007794:	4b0c      	ldr	r3, [pc, #48]	@ (80077c8 <UART_SetConfig+0x118>)
 8007796:	fba3 0302 	umull	r0, r3, r3, r2
 800779a:	095b      	lsrs	r3, r3, #5
 800779c:	2064      	movs	r0, #100	@ 0x64
 800779e:	fb00 f303 	mul.w	r3, r0, r3
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	3332      	adds	r3, #50	@ 0x32
 80077a8:	4a07      	ldr	r2, [pc, #28]	@ (80077c8 <UART_SetConfig+0x118>)
 80077aa:	fba2 2303 	umull	r2, r3, r2, r3
 80077ae:	095b      	lsrs	r3, r3, #5
 80077b0:	f003 020f 	and.w	r2, r3, #15
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	440a      	add	r2, r1
 80077ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80077bc:	bf00      	nop
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40013800 	.word	0x40013800
 80077c8:	51eb851f 	.word	0x51eb851f

080077cc <__cvt>:
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077d2:	461d      	mov	r5, r3
 80077d4:	bfbb      	ittet	lt
 80077d6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80077da:	461d      	movlt	r5, r3
 80077dc:	2300      	movge	r3, #0
 80077de:	232d      	movlt	r3, #45	@ 0x2d
 80077e0:	b088      	sub	sp, #32
 80077e2:	4614      	mov	r4, r2
 80077e4:	bfb8      	it	lt
 80077e6:	4614      	movlt	r4, r2
 80077e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80077ea:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80077ec:	7013      	strb	r3, [r2, #0]
 80077ee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077f0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80077f4:	f023 0820 	bic.w	r8, r3, #32
 80077f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077fc:	d005      	beq.n	800780a <__cvt+0x3e>
 80077fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007802:	d100      	bne.n	8007806 <__cvt+0x3a>
 8007804:	3601      	adds	r6, #1
 8007806:	2302      	movs	r3, #2
 8007808:	e000      	b.n	800780c <__cvt+0x40>
 800780a:	2303      	movs	r3, #3
 800780c:	aa07      	add	r2, sp, #28
 800780e:	9204      	str	r2, [sp, #16]
 8007810:	aa06      	add	r2, sp, #24
 8007812:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007816:	e9cd 3600 	strd	r3, r6, [sp]
 800781a:	4622      	mov	r2, r4
 800781c:	462b      	mov	r3, r5
 800781e:	f000 fe6f 	bl	8008500 <_dtoa_r>
 8007822:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007826:	4607      	mov	r7, r0
 8007828:	d119      	bne.n	800785e <__cvt+0x92>
 800782a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800782c:	07db      	lsls	r3, r3, #31
 800782e:	d50e      	bpl.n	800784e <__cvt+0x82>
 8007830:	eb00 0906 	add.w	r9, r0, r6
 8007834:	2200      	movs	r2, #0
 8007836:	2300      	movs	r3, #0
 8007838:	4620      	mov	r0, r4
 800783a:	4629      	mov	r1, r5
 800783c:	f7f9 f8b4 	bl	80009a8 <__aeabi_dcmpeq>
 8007840:	b108      	cbz	r0, 8007846 <__cvt+0x7a>
 8007842:	f8cd 901c 	str.w	r9, [sp, #28]
 8007846:	2230      	movs	r2, #48	@ 0x30
 8007848:	9b07      	ldr	r3, [sp, #28]
 800784a:	454b      	cmp	r3, r9
 800784c:	d31e      	bcc.n	800788c <__cvt+0xc0>
 800784e:	4638      	mov	r0, r7
 8007850:	9b07      	ldr	r3, [sp, #28]
 8007852:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007854:	1bdb      	subs	r3, r3, r7
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	b008      	add	sp, #32
 800785a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800785e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007862:	eb00 0906 	add.w	r9, r0, r6
 8007866:	d1e5      	bne.n	8007834 <__cvt+0x68>
 8007868:	7803      	ldrb	r3, [r0, #0]
 800786a:	2b30      	cmp	r3, #48	@ 0x30
 800786c:	d10a      	bne.n	8007884 <__cvt+0xb8>
 800786e:	2200      	movs	r2, #0
 8007870:	2300      	movs	r3, #0
 8007872:	4620      	mov	r0, r4
 8007874:	4629      	mov	r1, r5
 8007876:	f7f9 f897 	bl	80009a8 <__aeabi_dcmpeq>
 800787a:	b918      	cbnz	r0, 8007884 <__cvt+0xb8>
 800787c:	f1c6 0601 	rsb	r6, r6, #1
 8007880:	f8ca 6000 	str.w	r6, [sl]
 8007884:	f8da 3000 	ldr.w	r3, [sl]
 8007888:	4499      	add	r9, r3
 800788a:	e7d3      	b.n	8007834 <__cvt+0x68>
 800788c:	1c59      	adds	r1, r3, #1
 800788e:	9107      	str	r1, [sp, #28]
 8007890:	701a      	strb	r2, [r3, #0]
 8007892:	e7d9      	b.n	8007848 <__cvt+0x7c>

08007894 <__exponent>:
 8007894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007896:	2900      	cmp	r1, #0
 8007898:	bfb6      	itet	lt
 800789a:	232d      	movlt	r3, #45	@ 0x2d
 800789c:	232b      	movge	r3, #43	@ 0x2b
 800789e:	4249      	neglt	r1, r1
 80078a0:	2909      	cmp	r1, #9
 80078a2:	7002      	strb	r2, [r0, #0]
 80078a4:	7043      	strb	r3, [r0, #1]
 80078a6:	dd29      	ble.n	80078fc <__exponent+0x68>
 80078a8:	f10d 0307 	add.w	r3, sp, #7
 80078ac:	461d      	mov	r5, r3
 80078ae:	270a      	movs	r7, #10
 80078b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80078b4:	461a      	mov	r2, r3
 80078b6:	fb07 1416 	mls	r4, r7, r6, r1
 80078ba:	3430      	adds	r4, #48	@ 0x30
 80078bc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078c0:	460c      	mov	r4, r1
 80078c2:	2c63      	cmp	r4, #99	@ 0x63
 80078c4:	4631      	mov	r1, r6
 80078c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80078ca:	dcf1      	bgt.n	80078b0 <__exponent+0x1c>
 80078cc:	3130      	adds	r1, #48	@ 0x30
 80078ce:	1e94      	subs	r4, r2, #2
 80078d0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078d4:	4623      	mov	r3, r4
 80078d6:	1c41      	adds	r1, r0, #1
 80078d8:	42ab      	cmp	r3, r5
 80078da:	d30a      	bcc.n	80078f2 <__exponent+0x5e>
 80078dc:	f10d 0309 	add.w	r3, sp, #9
 80078e0:	1a9b      	subs	r3, r3, r2
 80078e2:	42ac      	cmp	r4, r5
 80078e4:	bf88      	it	hi
 80078e6:	2300      	movhi	r3, #0
 80078e8:	3302      	adds	r3, #2
 80078ea:	4403      	add	r3, r0
 80078ec:	1a18      	subs	r0, r3, r0
 80078ee:	b003      	add	sp, #12
 80078f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078f2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80078f6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80078fa:	e7ed      	b.n	80078d8 <__exponent+0x44>
 80078fc:	2330      	movs	r3, #48	@ 0x30
 80078fe:	3130      	adds	r1, #48	@ 0x30
 8007900:	7083      	strb	r3, [r0, #2]
 8007902:	70c1      	strb	r1, [r0, #3]
 8007904:	1d03      	adds	r3, r0, #4
 8007906:	e7f1      	b.n	80078ec <__exponent+0x58>

08007908 <_printf_float>:
 8007908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790c:	b091      	sub	sp, #68	@ 0x44
 800790e:	460c      	mov	r4, r1
 8007910:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007914:	4616      	mov	r6, r2
 8007916:	461f      	mov	r7, r3
 8007918:	4605      	mov	r5, r0
 800791a:	f000 fce1 	bl	80082e0 <_localeconv_r>
 800791e:	6803      	ldr	r3, [r0, #0]
 8007920:	4618      	mov	r0, r3
 8007922:	9308      	str	r3, [sp, #32]
 8007924:	f7f8 fc14 	bl	8000150 <strlen>
 8007928:	2300      	movs	r3, #0
 800792a:	930e      	str	r3, [sp, #56]	@ 0x38
 800792c:	f8d8 3000 	ldr.w	r3, [r8]
 8007930:	9009      	str	r0, [sp, #36]	@ 0x24
 8007932:	3307      	adds	r3, #7
 8007934:	f023 0307 	bic.w	r3, r3, #7
 8007938:	f103 0208 	add.w	r2, r3, #8
 800793c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007940:	f8d4 b000 	ldr.w	fp, [r4]
 8007944:	f8c8 2000 	str.w	r2, [r8]
 8007948:	e9d3 8900 	ldrd	r8, r9, [r3]
 800794c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007950:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007952:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007956:	f04f 32ff 	mov.w	r2, #4294967295
 800795a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800795e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007962:	4b9c      	ldr	r3, [pc, #624]	@ (8007bd4 <_printf_float+0x2cc>)
 8007964:	f7f9 f852 	bl	8000a0c <__aeabi_dcmpun>
 8007968:	bb70      	cbnz	r0, 80079c8 <_printf_float+0xc0>
 800796a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800796e:	f04f 32ff 	mov.w	r2, #4294967295
 8007972:	4b98      	ldr	r3, [pc, #608]	@ (8007bd4 <_printf_float+0x2cc>)
 8007974:	f7f9 f82c 	bl	80009d0 <__aeabi_dcmple>
 8007978:	bb30      	cbnz	r0, 80079c8 <_printf_float+0xc0>
 800797a:	2200      	movs	r2, #0
 800797c:	2300      	movs	r3, #0
 800797e:	4640      	mov	r0, r8
 8007980:	4649      	mov	r1, r9
 8007982:	f7f9 f81b 	bl	80009bc <__aeabi_dcmplt>
 8007986:	b110      	cbz	r0, 800798e <_printf_float+0x86>
 8007988:	232d      	movs	r3, #45	@ 0x2d
 800798a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800798e:	4a92      	ldr	r2, [pc, #584]	@ (8007bd8 <_printf_float+0x2d0>)
 8007990:	4b92      	ldr	r3, [pc, #584]	@ (8007bdc <_printf_float+0x2d4>)
 8007992:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007996:	bf94      	ite	ls
 8007998:	4690      	movls	r8, r2
 800799a:	4698      	movhi	r8, r3
 800799c:	2303      	movs	r3, #3
 800799e:	f04f 0900 	mov.w	r9, #0
 80079a2:	6123      	str	r3, [r4, #16]
 80079a4:	f02b 0304 	bic.w	r3, fp, #4
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	4633      	mov	r3, r6
 80079ac:	4621      	mov	r1, r4
 80079ae:	4628      	mov	r0, r5
 80079b0:	9700      	str	r7, [sp, #0]
 80079b2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80079b4:	f000 f9d4 	bl	8007d60 <_printf_common>
 80079b8:	3001      	adds	r0, #1
 80079ba:	f040 8090 	bne.w	8007ade <_printf_float+0x1d6>
 80079be:	f04f 30ff 	mov.w	r0, #4294967295
 80079c2:	b011      	add	sp, #68	@ 0x44
 80079c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c8:	4642      	mov	r2, r8
 80079ca:	464b      	mov	r3, r9
 80079cc:	4640      	mov	r0, r8
 80079ce:	4649      	mov	r1, r9
 80079d0:	f7f9 f81c 	bl	8000a0c <__aeabi_dcmpun>
 80079d4:	b148      	cbz	r0, 80079ea <_printf_float+0xe2>
 80079d6:	464b      	mov	r3, r9
 80079d8:	2b00      	cmp	r3, #0
 80079da:	bfb8      	it	lt
 80079dc:	232d      	movlt	r3, #45	@ 0x2d
 80079de:	4a80      	ldr	r2, [pc, #512]	@ (8007be0 <_printf_float+0x2d8>)
 80079e0:	bfb8      	it	lt
 80079e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80079e6:	4b7f      	ldr	r3, [pc, #508]	@ (8007be4 <_printf_float+0x2dc>)
 80079e8:	e7d3      	b.n	8007992 <_printf_float+0x8a>
 80079ea:	6863      	ldr	r3, [r4, #4]
 80079ec:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	d13f      	bne.n	8007a74 <_printf_float+0x16c>
 80079f4:	2306      	movs	r3, #6
 80079f6:	6063      	str	r3, [r4, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80079fe:	6023      	str	r3, [r4, #0]
 8007a00:	9206      	str	r2, [sp, #24]
 8007a02:	aa0e      	add	r2, sp, #56	@ 0x38
 8007a04:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007a08:	aa0d      	add	r2, sp, #52	@ 0x34
 8007a0a:	9203      	str	r2, [sp, #12]
 8007a0c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007a10:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007a14:	6863      	ldr	r3, [r4, #4]
 8007a16:	4642      	mov	r2, r8
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	464b      	mov	r3, r9
 8007a1e:	910a      	str	r1, [sp, #40]	@ 0x28
 8007a20:	f7ff fed4 	bl	80077cc <__cvt>
 8007a24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a26:	4680      	mov	r8, r0
 8007a28:	2947      	cmp	r1, #71	@ 0x47
 8007a2a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007a2c:	d128      	bne.n	8007a80 <_printf_float+0x178>
 8007a2e:	1cc8      	adds	r0, r1, #3
 8007a30:	db02      	blt.n	8007a38 <_printf_float+0x130>
 8007a32:	6863      	ldr	r3, [r4, #4]
 8007a34:	4299      	cmp	r1, r3
 8007a36:	dd40      	ble.n	8007aba <_printf_float+0x1b2>
 8007a38:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a3c:	fa5f fa8a 	uxtb.w	sl, sl
 8007a40:	4652      	mov	r2, sl
 8007a42:	3901      	subs	r1, #1
 8007a44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a48:	910d      	str	r1, [sp, #52]	@ 0x34
 8007a4a:	f7ff ff23 	bl	8007894 <__exponent>
 8007a4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a50:	4681      	mov	r9, r0
 8007a52:	1813      	adds	r3, r2, r0
 8007a54:	2a01      	cmp	r2, #1
 8007a56:	6123      	str	r3, [r4, #16]
 8007a58:	dc02      	bgt.n	8007a60 <_printf_float+0x158>
 8007a5a:	6822      	ldr	r2, [r4, #0]
 8007a5c:	07d2      	lsls	r2, r2, #31
 8007a5e:	d501      	bpl.n	8007a64 <_printf_float+0x15c>
 8007a60:	3301      	adds	r3, #1
 8007a62:	6123      	str	r3, [r4, #16]
 8007a64:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d09e      	beq.n	80079aa <_printf_float+0xa2>
 8007a6c:	232d      	movs	r3, #45	@ 0x2d
 8007a6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a72:	e79a      	b.n	80079aa <_printf_float+0xa2>
 8007a74:	2947      	cmp	r1, #71	@ 0x47
 8007a76:	d1bf      	bne.n	80079f8 <_printf_float+0xf0>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1bd      	bne.n	80079f8 <_printf_float+0xf0>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e7ba      	b.n	80079f6 <_printf_float+0xee>
 8007a80:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a84:	d9dc      	bls.n	8007a40 <_printf_float+0x138>
 8007a86:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a8a:	d118      	bne.n	8007abe <_printf_float+0x1b6>
 8007a8c:	2900      	cmp	r1, #0
 8007a8e:	6863      	ldr	r3, [r4, #4]
 8007a90:	dd0b      	ble.n	8007aaa <_printf_float+0x1a2>
 8007a92:	6121      	str	r1, [r4, #16]
 8007a94:	b913      	cbnz	r3, 8007a9c <_printf_float+0x194>
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	07d0      	lsls	r0, r2, #31
 8007a9a:	d502      	bpl.n	8007aa2 <_printf_float+0x19a>
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	440b      	add	r3, r1
 8007aa0:	6123      	str	r3, [r4, #16]
 8007aa2:	f04f 0900 	mov.w	r9, #0
 8007aa6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007aa8:	e7dc      	b.n	8007a64 <_printf_float+0x15c>
 8007aaa:	b913      	cbnz	r3, 8007ab2 <_printf_float+0x1aa>
 8007aac:	6822      	ldr	r2, [r4, #0]
 8007aae:	07d2      	lsls	r2, r2, #31
 8007ab0:	d501      	bpl.n	8007ab6 <_printf_float+0x1ae>
 8007ab2:	3302      	adds	r3, #2
 8007ab4:	e7f4      	b.n	8007aa0 <_printf_float+0x198>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e7f2      	b.n	8007aa0 <_printf_float+0x198>
 8007aba:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007abe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ac0:	4299      	cmp	r1, r3
 8007ac2:	db05      	blt.n	8007ad0 <_printf_float+0x1c8>
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	6121      	str	r1, [r4, #16]
 8007ac8:	07d8      	lsls	r0, r3, #31
 8007aca:	d5ea      	bpl.n	8007aa2 <_printf_float+0x19a>
 8007acc:	1c4b      	adds	r3, r1, #1
 8007ace:	e7e7      	b.n	8007aa0 <_printf_float+0x198>
 8007ad0:	2900      	cmp	r1, #0
 8007ad2:	bfcc      	ite	gt
 8007ad4:	2201      	movgt	r2, #1
 8007ad6:	f1c1 0202 	rsble	r2, r1, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	e7e0      	b.n	8007aa0 <_printf_float+0x198>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	055a      	lsls	r2, r3, #21
 8007ae2:	d407      	bmi.n	8007af4 <_printf_float+0x1ec>
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	4642      	mov	r2, r8
 8007ae8:	4631      	mov	r1, r6
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	d12b      	bne.n	8007b4a <_printf_float+0x242>
 8007af2:	e764      	b.n	80079be <_printf_float+0xb6>
 8007af4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007af8:	f240 80dc 	bls.w	8007cb4 <_printf_float+0x3ac>
 8007afc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b00:	2200      	movs	r2, #0
 8007b02:	2300      	movs	r3, #0
 8007b04:	f7f8 ff50 	bl	80009a8 <__aeabi_dcmpeq>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d033      	beq.n	8007b74 <_printf_float+0x26c>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4628      	mov	r0, r5
 8007b12:	4a35      	ldr	r2, [pc, #212]	@ (8007be8 <_printf_float+0x2e0>)
 8007b14:	47b8      	blx	r7
 8007b16:	3001      	adds	r0, #1
 8007b18:	f43f af51 	beq.w	80079be <_printf_float+0xb6>
 8007b1c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007b20:	4543      	cmp	r3, r8
 8007b22:	db02      	blt.n	8007b2a <_printf_float+0x222>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	07d8      	lsls	r0, r3, #31
 8007b28:	d50f      	bpl.n	8007b4a <_printf_float+0x242>
 8007b2a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b2e:	4631      	mov	r1, r6
 8007b30:	4628      	mov	r0, r5
 8007b32:	47b8      	blx	r7
 8007b34:	3001      	adds	r0, #1
 8007b36:	f43f af42 	beq.w	80079be <_printf_float+0xb6>
 8007b3a:	f04f 0900 	mov.w	r9, #0
 8007b3e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b42:	f104 0a1a 	add.w	sl, r4, #26
 8007b46:	45c8      	cmp	r8, r9
 8007b48:	dc09      	bgt.n	8007b5e <_printf_float+0x256>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	079b      	lsls	r3, r3, #30
 8007b4e:	f100 8102 	bmi.w	8007d56 <_printf_float+0x44e>
 8007b52:	68e0      	ldr	r0, [r4, #12]
 8007b54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b56:	4298      	cmp	r0, r3
 8007b58:	bfb8      	it	lt
 8007b5a:	4618      	movlt	r0, r3
 8007b5c:	e731      	b.n	80079c2 <_printf_float+0xba>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	4652      	mov	r2, sl
 8007b62:	4631      	mov	r1, r6
 8007b64:	4628      	mov	r0, r5
 8007b66:	47b8      	blx	r7
 8007b68:	3001      	adds	r0, #1
 8007b6a:	f43f af28 	beq.w	80079be <_printf_float+0xb6>
 8007b6e:	f109 0901 	add.w	r9, r9, #1
 8007b72:	e7e8      	b.n	8007b46 <_printf_float+0x23e>
 8007b74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	dc38      	bgt.n	8007bec <_printf_float+0x2e4>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4628      	mov	r0, r5
 8007b80:	4a19      	ldr	r2, [pc, #100]	@ (8007be8 <_printf_float+0x2e0>)
 8007b82:	47b8      	blx	r7
 8007b84:	3001      	adds	r0, #1
 8007b86:	f43f af1a 	beq.w	80079be <_printf_float+0xb6>
 8007b8a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007b8e:	ea59 0303 	orrs.w	r3, r9, r3
 8007b92:	d102      	bne.n	8007b9a <_printf_float+0x292>
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	07d9      	lsls	r1, r3, #31
 8007b98:	d5d7      	bpl.n	8007b4a <_printf_float+0x242>
 8007b9a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	47b8      	blx	r7
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	f43f af0a 	beq.w	80079be <_printf_float+0xb6>
 8007baa:	f04f 0a00 	mov.w	sl, #0
 8007bae:	f104 0b1a 	add.w	fp, r4, #26
 8007bb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bb4:	425b      	negs	r3, r3
 8007bb6:	4553      	cmp	r3, sl
 8007bb8:	dc01      	bgt.n	8007bbe <_printf_float+0x2b6>
 8007bba:	464b      	mov	r3, r9
 8007bbc:	e793      	b.n	8007ae6 <_printf_float+0x1de>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	465a      	mov	r2, fp
 8007bc2:	4631      	mov	r1, r6
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	47b8      	blx	r7
 8007bc8:	3001      	adds	r0, #1
 8007bca:	f43f aef8 	beq.w	80079be <_printf_float+0xb6>
 8007bce:	f10a 0a01 	add.w	sl, sl, #1
 8007bd2:	e7ee      	b.n	8007bb2 <_printf_float+0x2aa>
 8007bd4:	7fefffff 	.word	0x7fefffff
 8007bd8:	0800f866 	.word	0x0800f866
 8007bdc:	0800f86a 	.word	0x0800f86a
 8007be0:	0800f86e 	.word	0x0800f86e
 8007be4:	0800f872 	.word	0x0800f872
 8007be8:	0800f876 	.word	0x0800f876
 8007bec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bee:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007bf2:	4553      	cmp	r3, sl
 8007bf4:	bfa8      	it	ge
 8007bf6:	4653      	movge	r3, sl
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	4699      	mov	r9, r3
 8007bfc:	dc36      	bgt.n	8007c6c <_printf_float+0x364>
 8007bfe:	f04f 0b00 	mov.w	fp, #0
 8007c02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c06:	f104 021a 	add.w	r2, r4, #26
 8007c0a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c0e:	eba3 0309 	sub.w	r3, r3, r9
 8007c12:	455b      	cmp	r3, fp
 8007c14:	dc31      	bgt.n	8007c7a <_printf_float+0x372>
 8007c16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c18:	459a      	cmp	sl, r3
 8007c1a:	dc3a      	bgt.n	8007c92 <_printf_float+0x38a>
 8007c1c:	6823      	ldr	r3, [r4, #0]
 8007c1e:	07da      	lsls	r2, r3, #31
 8007c20:	d437      	bmi.n	8007c92 <_printf_float+0x38a>
 8007c22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c24:	ebaa 0903 	sub.w	r9, sl, r3
 8007c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c2a:	ebaa 0303 	sub.w	r3, sl, r3
 8007c2e:	4599      	cmp	r9, r3
 8007c30:	bfa8      	it	ge
 8007c32:	4699      	movge	r9, r3
 8007c34:	f1b9 0f00 	cmp.w	r9, #0
 8007c38:	dc33      	bgt.n	8007ca2 <_printf_float+0x39a>
 8007c3a:	f04f 0800 	mov.w	r8, #0
 8007c3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c42:	f104 0b1a 	add.w	fp, r4, #26
 8007c46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c48:	ebaa 0303 	sub.w	r3, sl, r3
 8007c4c:	eba3 0309 	sub.w	r3, r3, r9
 8007c50:	4543      	cmp	r3, r8
 8007c52:	f77f af7a 	ble.w	8007b4a <_printf_float+0x242>
 8007c56:	2301      	movs	r3, #1
 8007c58:	465a      	mov	r2, fp
 8007c5a:	4631      	mov	r1, r6
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	47b8      	blx	r7
 8007c60:	3001      	adds	r0, #1
 8007c62:	f43f aeac 	beq.w	80079be <_printf_float+0xb6>
 8007c66:	f108 0801 	add.w	r8, r8, #1
 8007c6a:	e7ec      	b.n	8007c46 <_printf_float+0x33e>
 8007c6c:	4642      	mov	r2, r8
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4628      	mov	r0, r5
 8007c72:	47b8      	blx	r7
 8007c74:	3001      	adds	r0, #1
 8007c76:	d1c2      	bne.n	8007bfe <_printf_float+0x2f6>
 8007c78:	e6a1      	b.n	80079be <_printf_float+0xb6>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4628      	mov	r0, r5
 8007c80:	920a      	str	r2, [sp, #40]	@ 0x28
 8007c82:	47b8      	blx	r7
 8007c84:	3001      	adds	r0, #1
 8007c86:	f43f ae9a 	beq.w	80079be <_printf_float+0xb6>
 8007c8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c8c:	f10b 0b01 	add.w	fp, fp, #1
 8007c90:	e7bb      	b.n	8007c0a <_printf_float+0x302>
 8007c92:	4631      	mov	r1, r6
 8007c94:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c98:	4628      	mov	r0, r5
 8007c9a:	47b8      	blx	r7
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d1c0      	bne.n	8007c22 <_printf_float+0x31a>
 8007ca0:	e68d      	b.n	80079be <_printf_float+0xb6>
 8007ca2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ca4:	464b      	mov	r3, r9
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	4628      	mov	r0, r5
 8007caa:	4442      	add	r2, r8
 8007cac:	47b8      	blx	r7
 8007cae:	3001      	adds	r0, #1
 8007cb0:	d1c3      	bne.n	8007c3a <_printf_float+0x332>
 8007cb2:	e684      	b.n	80079be <_printf_float+0xb6>
 8007cb4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007cb8:	f1ba 0f01 	cmp.w	sl, #1
 8007cbc:	dc01      	bgt.n	8007cc2 <_printf_float+0x3ba>
 8007cbe:	07db      	lsls	r3, r3, #31
 8007cc0:	d536      	bpl.n	8007d30 <_printf_float+0x428>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b8      	blx	r7
 8007ccc:	3001      	adds	r0, #1
 8007cce:	f43f ae76 	beq.w	80079be <_printf_float+0xb6>
 8007cd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007cd6:	4631      	mov	r1, r6
 8007cd8:	4628      	mov	r0, r5
 8007cda:	47b8      	blx	r7
 8007cdc:	3001      	adds	r0, #1
 8007cde:	f43f ae6e 	beq.w	80079be <_printf_float+0xb6>
 8007ce2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cee:	f7f8 fe5b 	bl	80009a8 <__aeabi_dcmpeq>
 8007cf2:	b9c0      	cbnz	r0, 8007d26 <_printf_float+0x41e>
 8007cf4:	4653      	mov	r3, sl
 8007cf6:	f108 0201 	add.w	r2, r8, #1
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	47b8      	blx	r7
 8007d00:	3001      	adds	r0, #1
 8007d02:	d10c      	bne.n	8007d1e <_printf_float+0x416>
 8007d04:	e65b      	b.n	80079be <_printf_float+0xb6>
 8007d06:	2301      	movs	r3, #1
 8007d08:	465a      	mov	r2, fp
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	47b8      	blx	r7
 8007d10:	3001      	adds	r0, #1
 8007d12:	f43f ae54 	beq.w	80079be <_printf_float+0xb6>
 8007d16:	f108 0801 	add.w	r8, r8, #1
 8007d1a:	45d0      	cmp	r8, sl
 8007d1c:	dbf3      	blt.n	8007d06 <_printf_float+0x3fe>
 8007d1e:	464b      	mov	r3, r9
 8007d20:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d24:	e6e0      	b.n	8007ae8 <_printf_float+0x1e0>
 8007d26:	f04f 0800 	mov.w	r8, #0
 8007d2a:	f104 0b1a 	add.w	fp, r4, #26
 8007d2e:	e7f4      	b.n	8007d1a <_printf_float+0x412>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4642      	mov	r2, r8
 8007d34:	e7e1      	b.n	8007cfa <_printf_float+0x3f2>
 8007d36:	2301      	movs	r3, #1
 8007d38:	464a      	mov	r2, r9
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	47b8      	blx	r7
 8007d40:	3001      	adds	r0, #1
 8007d42:	f43f ae3c 	beq.w	80079be <_printf_float+0xb6>
 8007d46:	f108 0801 	add.w	r8, r8, #1
 8007d4a:	68e3      	ldr	r3, [r4, #12]
 8007d4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007d4e:	1a5b      	subs	r3, r3, r1
 8007d50:	4543      	cmp	r3, r8
 8007d52:	dcf0      	bgt.n	8007d36 <_printf_float+0x42e>
 8007d54:	e6fd      	b.n	8007b52 <_printf_float+0x24a>
 8007d56:	f04f 0800 	mov.w	r8, #0
 8007d5a:	f104 0919 	add.w	r9, r4, #25
 8007d5e:	e7f4      	b.n	8007d4a <_printf_float+0x442>

08007d60 <_printf_common>:
 8007d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d64:	4616      	mov	r6, r2
 8007d66:	4698      	mov	r8, r3
 8007d68:	688a      	ldr	r2, [r1, #8]
 8007d6a:	690b      	ldr	r3, [r1, #16]
 8007d6c:	4607      	mov	r7, r0
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	bfb8      	it	lt
 8007d72:	4613      	movlt	r3, r2
 8007d74:	6033      	str	r3, [r6, #0]
 8007d76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d80:	b10a      	cbz	r2, 8007d86 <_printf_common+0x26>
 8007d82:	3301      	adds	r3, #1
 8007d84:	6033      	str	r3, [r6, #0]
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	0699      	lsls	r1, r3, #26
 8007d8a:	bf42      	ittt	mi
 8007d8c:	6833      	ldrmi	r3, [r6, #0]
 8007d8e:	3302      	addmi	r3, #2
 8007d90:	6033      	strmi	r3, [r6, #0]
 8007d92:	6825      	ldr	r5, [r4, #0]
 8007d94:	f015 0506 	ands.w	r5, r5, #6
 8007d98:	d106      	bne.n	8007da8 <_printf_common+0x48>
 8007d9a:	f104 0a19 	add.w	sl, r4, #25
 8007d9e:	68e3      	ldr	r3, [r4, #12]
 8007da0:	6832      	ldr	r2, [r6, #0]
 8007da2:	1a9b      	subs	r3, r3, r2
 8007da4:	42ab      	cmp	r3, r5
 8007da6:	dc2b      	bgt.n	8007e00 <_printf_common+0xa0>
 8007da8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007dac:	6822      	ldr	r2, [r4, #0]
 8007dae:	3b00      	subs	r3, #0
 8007db0:	bf18      	it	ne
 8007db2:	2301      	movne	r3, #1
 8007db4:	0692      	lsls	r2, r2, #26
 8007db6:	d430      	bmi.n	8007e1a <_printf_common+0xba>
 8007db8:	4641      	mov	r1, r8
 8007dba:	4638      	mov	r0, r7
 8007dbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007dc0:	47c8      	blx	r9
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	d023      	beq.n	8007e0e <_printf_common+0xae>
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	6922      	ldr	r2, [r4, #16]
 8007dca:	f003 0306 	and.w	r3, r3, #6
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	bf14      	ite	ne
 8007dd2:	2500      	movne	r5, #0
 8007dd4:	6833      	ldreq	r3, [r6, #0]
 8007dd6:	f04f 0600 	mov.w	r6, #0
 8007dda:	bf08      	it	eq
 8007ddc:	68e5      	ldreq	r5, [r4, #12]
 8007dde:	f104 041a 	add.w	r4, r4, #26
 8007de2:	bf08      	it	eq
 8007de4:	1aed      	subeq	r5, r5, r3
 8007de6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007dea:	bf08      	it	eq
 8007dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007df0:	4293      	cmp	r3, r2
 8007df2:	bfc4      	itt	gt
 8007df4:	1a9b      	subgt	r3, r3, r2
 8007df6:	18ed      	addgt	r5, r5, r3
 8007df8:	42b5      	cmp	r5, r6
 8007dfa:	d11a      	bne.n	8007e32 <_printf_common+0xd2>
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	e008      	b.n	8007e12 <_printf_common+0xb2>
 8007e00:	2301      	movs	r3, #1
 8007e02:	4652      	mov	r2, sl
 8007e04:	4641      	mov	r1, r8
 8007e06:	4638      	mov	r0, r7
 8007e08:	47c8      	blx	r9
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d103      	bne.n	8007e16 <_printf_common+0xb6>
 8007e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e16:	3501      	adds	r5, #1
 8007e18:	e7c1      	b.n	8007d9e <_printf_common+0x3e>
 8007e1a:	2030      	movs	r0, #48	@ 0x30
 8007e1c:	18e1      	adds	r1, r4, r3
 8007e1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e28:	4422      	add	r2, r4
 8007e2a:	3302      	adds	r3, #2
 8007e2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e30:	e7c2      	b.n	8007db8 <_printf_common+0x58>
 8007e32:	2301      	movs	r3, #1
 8007e34:	4622      	mov	r2, r4
 8007e36:	4641      	mov	r1, r8
 8007e38:	4638      	mov	r0, r7
 8007e3a:	47c8      	blx	r9
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d0e6      	beq.n	8007e0e <_printf_common+0xae>
 8007e40:	3601      	adds	r6, #1
 8007e42:	e7d9      	b.n	8007df8 <_printf_common+0x98>

08007e44 <_printf_i>:
 8007e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e48:	7e0f      	ldrb	r7, [r1, #24]
 8007e4a:	4691      	mov	r9, r2
 8007e4c:	2f78      	cmp	r7, #120	@ 0x78
 8007e4e:	4680      	mov	r8, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	469a      	mov	sl, r3
 8007e54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e5a:	d807      	bhi.n	8007e6c <_printf_i+0x28>
 8007e5c:	2f62      	cmp	r7, #98	@ 0x62
 8007e5e:	d80a      	bhi.n	8007e76 <_printf_i+0x32>
 8007e60:	2f00      	cmp	r7, #0
 8007e62:	f000 80d3 	beq.w	800800c <_printf_i+0x1c8>
 8007e66:	2f58      	cmp	r7, #88	@ 0x58
 8007e68:	f000 80ba 	beq.w	8007fe0 <_printf_i+0x19c>
 8007e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e74:	e03a      	b.n	8007eec <_printf_i+0xa8>
 8007e76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e7a:	2b15      	cmp	r3, #21
 8007e7c:	d8f6      	bhi.n	8007e6c <_printf_i+0x28>
 8007e7e:	a101      	add	r1, pc, #4	@ (adr r1, 8007e84 <_printf_i+0x40>)
 8007e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e84:	08007edd 	.word	0x08007edd
 8007e88:	08007ef1 	.word	0x08007ef1
 8007e8c:	08007e6d 	.word	0x08007e6d
 8007e90:	08007e6d 	.word	0x08007e6d
 8007e94:	08007e6d 	.word	0x08007e6d
 8007e98:	08007e6d 	.word	0x08007e6d
 8007e9c:	08007ef1 	.word	0x08007ef1
 8007ea0:	08007e6d 	.word	0x08007e6d
 8007ea4:	08007e6d 	.word	0x08007e6d
 8007ea8:	08007e6d 	.word	0x08007e6d
 8007eac:	08007e6d 	.word	0x08007e6d
 8007eb0:	08007ff3 	.word	0x08007ff3
 8007eb4:	08007f1b 	.word	0x08007f1b
 8007eb8:	08007fad 	.word	0x08007fad
 8007ebc:	08007e6d 	.word	0x08007e6d
 8007ec0:	08007e6d 	.word	0x08007e6d
 8007ec4:	08008015 	.word	0x08008015
 8007ec8:	08007e6d 	.word	0x08007e6d
 8007ecc:	08007f1b 	.word	0x08007f1b
 8007ed0:	08007e6d 	.word	0x08007e6d
 8007ed4:	08007e6d 	.word	0x08007e6d
 8007ed8:	08007fb5 	.word	0x08007fb5
 8007edc:	6833      	ldr	r3, [r6, #0]
 8007ede:	1d1a      	adds	r2, r3, #4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6032      	str	r2, [r6, #0]
 8007ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ee8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007eec:	2301      	movs	r3, #1
 8007eee:	e09e      	b.n	800802e <_printf_i+0x1ea>
 8007ef0:	6833      	ldr	r3, [r6, #0]
 8007ef2:	6820      	ldr	r0, [r4, #0]
 8007ef4:	1d19      	adds	r1, r3, #4
 8007ef6:	6031      	str	r1, [r6, #0]
 8007ef8:	0606      	lsls	r6, r0, #24
 8007efa:	d501      	bpl.n	8007f00 <_printf_i+0xbc>
 8007efc:	681d      	ldr	r5, [r3, #0]
 8007efe:	e003      	b.n	8007f08 <_printf_i+0xc4>
 8007f00:	0645      	lsls	r5, r0, #25
 8007f02:	d5fb      	bpl.n	8007efc <_printf_i+0xb8>
 8007f04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f08:	2d00      	cmp	r5, #0
 8007f0a:	da03      	bge.n	8007f14 <_printf_i+0xd0>
 8007f0c:	232d      	movs	r3, #45	@ 0x2d
 8007f0e:	426d      	negs	r5, r5
 8007f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f14:	230a      	movs	r3, #10
 8007f16:	4859      	ldr	r0, [pc, #356]	@ (800807c <_printf_i+0x238>)
 8007f18:	e011      	b.n	8007f3e <_printf_i+0xfa>
 8007f1a:	6821      	ldr	r1, [r4, #0]
 8007f1c:	6833      	ldr	r3, [r6, #0]
 8007f1e:	0608      	lsls	r0, r1, #24
 8007f20:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f24:	d402      	bmi.n	8007f2c <_printf_i+0xe8>
 8007f26:	0649      	lsls	r1, r1, #25
 8007f28:	bf48      	it	mi
 8007f2a:	b2ad      	uxthmi	r5, r5
 8007f2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f2e:	6033      	str	r3, [r6, #0]
 8007f30:	bf14      	ite	ne
 8007f32:	230a      	movne	r3, #10
 8007f34:	2308      	moveq	r3, #8
 8007f36:	4851      	ldr	r0, [pc, #324]	@ (800807c <_printf_i+0x238>)
 8007f38:	2100      	movs	r1, #0
 8007f3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f3e:	6866      	ldr	r6, [r4, #4]
 8007f40:	2e00      	cmp	r6, #0
 8007f42:	bfa8      	it	ge
 8007f44:	6821      	ldrge	r1, [r4, #0]
 8007f46:	60a6      	str	r6, [r4, #8]
 8007f48:	bfa4      	itt	ge
 8007f4a:	f021 0104 	bicge.w	r1, r1, #4
 8007f4e:	6021      	strge	r1, [r4, #0]
 8007f50:	b90d      	cbnz	r5, 8007f56 <_printf_i+0x112>
 8007f52:	2e00      	cmp	r6, #0
 8007f54:	d04b      	beq.n	8007fee <_printf_i+0x1aa>
 8007f56:	4616      	mov	r6, r2
 8007f58:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f5c:	fb03 5711 	mls	r7, r3, r1, r5
 8007f60:	5dc7      	ldrb	r7, [r0, r7]
 8007f62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f66:	462f      	mov	r7, r5
 8007f68:	42bb      	cmp	r3, r7
 8007f6a:	460d      	mov	r5, r1
 8007f6c:	d9f4      	bls.n	8007f58 <_printf_i+0x114>
 8007f6e:	2b08      	cmp	r3, #8
 8007f70:	d10b      	bne.n	8007f8a <_printf_i+0x146>
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	07df      	lsls	r7, r3, #31
 8007f76:	d508      	bpl.n	8007f8a <_printf_i+0x146>
 8007f78:	6923      	ldr	r3, [r4, #16]
 8007f7a:	6861      	ldr	r1, [r4, #4]
 8007f7c:	4299      	cmp	r1, r3
 8007f7e:	bfde      	ittt	le
 8007f80:	2330      	movle	r3, #48	@ 0x30
 8007f82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f8a:	1b92      	subs	r2, r2, r6
 8007f8c:	6122      	str	r2, [r4, #16]
 8007f8e:	464b      	mov	r3, r9
 8007f90:	4621      	mov	r1, r4
 8007f92:	4640      	mov	r0, r8
 8007f94:	f8cd a000 	str.w	sl, [sp]
 8007f98:	aa03      	add	r2, sp, #12
 8007f9a:	f7ff fee1 	bl	8007d60 <_printf_common>
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	d14a      	bne.n	8008038 <_printf_i+0x1f4>
 8007fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa6:	b004      	add	sp, #16
 8007fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	f043 0320 	orr.w	r3, r3, #32
 8007fb2:	6023      	str	r3, [r4, #0]
 8007fb4:	2778      	movs	r7, #120	@ 0x78
 8007fb6:	4832      	ldr	r0, [pc, #200]	@ (8008080 <_printf_i+0x23c>)
 8007fb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	6831      	ldr	r1, [r6, #0]
 8007fc0:	061f      	lsls	r7, r3, #24
 8007fc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fc6:	d402      	bmi.n	8007fce <_printf_i+0x18a>
 8007fc8:	065f      	lsls	r7, r3, #25
 8007fca:	bf48      	it	mi
 8007fcc:	b2ad      	uxthmi	r5, r5
 8007fce:	6031      	str	r1, [r6, #0]
 8007fd0:	07d9      	lsls	r1, r3, #31
 8007fd2:	bf44      	itt	mi
 8007fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8007fd8:	6023      	strmi	r3, [r4, #0]
 8007fda:	b11d      	cbz	r5, 8007fe4 <_printf_i+0x1a0>
 8007fdc:	2310      	movs	r3, #16
 8007fde:	e7ab      	b.n	8007f38 <_printf_i+0xf4>
 8007fe0:	4826      	ldr	r0, [pc, #152]	@ (800807c <_printf_i+0x238>)
 8007fe2:	e7e9      	b.n	8007fb8 <_printf_i+0x174>
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	f023 0320 	bic.w	r3, r3, #32
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	e7f6      	b.n	8007fdc <_printf_i+0x198>
 8007fee:	4616      	mov	r6, r2
 8007ff0:	e7bd      	b.n	8007f6e <_printf_i+0x12a>
 8007ff2:	6833      	ldr	r3, [r6, #0]
 8007ff4:	6825      	ldr	r5, [r4, #0]
 8007ff6:	1d18      	adds	r0, r3, #4
 8007ff8:	6961      	ldr	r1, [r4, #20]
 8007ffa:	6030      	str	r0, [r6, #0]
 8007ffc:	062e      	lsls	r6, r5, #24
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	d501      	bpl.n	8008006 <_printf_i+0x1c2>
 8008002:	6019      	str	r1, [r3, #0]
 8008004:	e002      	b.n	800800c <_printf_i+0x1c8>
 8008006:	0668      	lsls	r0, r5, #25
 8008008:	d5fb      	bpl.n	8008002 <_printf_i+0x1be>
 800800a:	8019      	strh	r1, [r3, #0]
 800800c:	2300      	movs	r3, #0
 800800e:	4616      	mov	r6, r2
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	e7bc      	b.n	8007f8e <_printf_i+0x14a>
 8008014:	6833      	ldr	r3, [r6, #0]
 8008016:	2100      	movs	r1, #0
 8008018:	1d1a      	adds	r2, r3, #4
 800801a:	6032      	str	r2, [r6, #0]
 800801c:	681e      	ldr	r6, [r3, #0]
 800801e:	6862      	ldr	r2, [r4, #4]
 8008020:	4630      	mov	r0, r6
 8008022:	f000 f9d4 	bl	80083ce <memchr>
 8008026:	b108      	cbz	r0, 800802c <_printf_i+0x1e8>
 8008028:	1b80      	subs	r0, r0, r6
 800802a:	6060      	str	r0, [r4, #4]
 800802c:	6863      	ldr	r3, [r4, #4]
 800802e:	6123      	str	r3, [r4, #16]
 8008030:	2300      	movs	r3, #0
 8008032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008036:	e7aa      	b.n	8007f8e <_printf_i+0x14a>
 8008038:	4632      	mov	r2, r6
 800803a:	4649      	mov	r1, r9
 800803c:	4640      	mov	r0, r8
 800803e:	6923      	ldr	r3, [r4, #16]
 8008040:	47d0      	blx	sl
 8008042:	3001      	adds	r0, #1
 8008044:	d0ad      	beq.n	8007fa2 <_printf_i+0x15e>
 8008046:	6823      	ldr	r3, [r4, #0]
 8008048:	079b      	lsls	r3, r3, #30
 800804a:	d413      	bmi.n	8008074 <_printf_i+0x230>
 800804c:	68e0      	ldr	r0, [r4, #12]
 800804e:	9b03      	ldr	r3, [sp, #12]
 8008050:	4298      	cmp	r0, r3
 8008052:	bfb8      	it	lt
 8008054:	4618      	movlt	r0, r3
 8008056:	e7a6      	b.n	8007fa6 <_printf_i+0x162>
 8008058:	2301      	movs	r3, #1
 800805a:	4632      	mov	r2, r6
 800805c:	4649      	mov	r1, r9
 800805e:	4640      	mov	r0, r8
 8008060:	47d0      	blx	sl
 8008062:	3001      	adds	r0, #1
 8008064:	d09d      	beq.n	8007fa2 <_printf_i+0x15e>
 8008066:	3501      	adds	r5, #1
 8008068:	68e3      	ldr	r3, [r4, #12]
 800806a:	9903      	ldr	r1, [sp, #12]
 800806c:	1a5b      	subs	r3, r3, r1
 800806e:	42ab      	cmp	r3, r5
 8008070:	dcf2      	bgt.n	8008058 <_printf_i+0x214>
 8008072:	e7eb      	b.n	800804c <_printf_i+0x208>
 8008074:	2500      	movs	r5, #0
 8008076:	f104 0619 	add.w	r6, r4, #25
 800807a:	e7f5      	b.n	8008068 <_printf_i+0x224>
 800807c:	0800f878 	.word	0x0800f878
 8008080:	0800f889 	.word	0x0800f889

08008084 <std>:
 8008084:	2300      	movs	r3, #0
 8008086:	b510      	push	{r4, lr}
 8008088:	4604      	mov	r4, r0
 800808a:	e9c0 3300 	strd	r3, r3, [r0]
 800808e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008092:	6083      	str	r3, [r0, #8]
 8008094:	8181      	strh	r1, [r0, #12]
 8008096:	6643      	str	r3, [r0, #100]	@ 0x64
 8008098:	81c2      	strh	r2, [r0, #14]
 800809a:	6183      	str	r3, [r0, #24]
 800809c:	4619      	mov	r1, r3
 800809e:	2208      	movs	r2, #8
 80080a0:	305c      	adds	r0, #92	@ 0x5c
 80080a2:	f000 f914 	bl	80082ce <memset>
 80080a6:	4b0d      	ldr	r3, [pc, #52]	@ (80080dc <std+0x58>)
 80080a8:	6224      	str	r4, [r4, #32]
 80080aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80080ac:	4b0c      	ldr	r3, [pc, #48]	@ (80080e0 <std+0x5c>)
 80080ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080b0:	4b0c      	ldr	r3, [pc, #48]	@ (80080e4 <std+0x60>)
 80080b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080b4:	4b0c      	ldr	r3, [pc, #48]	@ (80080e8 <std+0x64>)
 80080b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80080b8:	4b0c      	ldr	r3, [pc, #48]	@ (80080ec <std+0x68>)
 80080ba:	429c      	cmp	r4, r3
 80080bc:	d006      	beq.n	80080cc <std+0x48>
 80080be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080c2:	4294      	cmp	r4, r2
 80080c4:	d002      	beq.n	80080cc <std+0x48>
 80080c6:	33d0      	adds	r3, #208	@ 0xd0
 80080c8:	429c      	cmp	r4, r3
 80080ca:	d105      	bne.n	80080d8 <std+0x54>
 80080cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d4:	f000 b978 	b.w	80083c8 <__retarget_lock_init_recursive>
 80080d8:	bd10      	pop	{r4, pc}
 80080da:	bf00      	nop
 80080dc:	08008249 	.word	0x08008249
 80080e0:	0800826b 	.word	0x0800826b
 80080e4:	080082a3 	.word	0x080082a3
 80080e8:	080082c7 	.word	0x080082c7
 80080ec:	20001b34 	.word	0x20001b34

080080f0 <stdio_exit_handler>:
 80080f0:	4a02      	ldr	r2, [pc, #8]	@ (80080fc <stdio_exit_handler+0xc>)
 80080f2:	4903      	ldr	r1, [pc, #12]	@ (8008100 <stdio_exit_handler+0x10>)
 80080f4:	4803      	ldr	r0, [pc, #12]	@ (8008104 <stdio_exit_handler+0x14>)
 80080f6:	f000 b869 	b.w	80081cc <_fwalk_sglue>
 80080fa:	bf00      	nop
 80080fc:	20000074 	.word	0x20000074
 8008100:	08009d3d 	.word	0x08009d3d
 8008104:	20000084 	.word	0x20000084

08008108 <cleanup_stdio>:
 8008108:	6841      	ldr	r1, [r0, #4]
 800810a:	4b0c      	ldr	r3, [pc, #48]	@ (800813c <cleanup_stdio+0x34>)
 800810c:	b510      	push	{r4, lr}
 800810e:	4299      	cmp	r1, r3
 8008110:	4604      	mov	r4, r0
 8008112:	d001      	beq.n	8008118 <cleanup_stdio+0x10>
 8008114:	f001 fe12 	bl	8009d3c <_fflush_r>
 8008118:	68a1      	ldr	r1, [r4, #8]
 800811a:	4b09      	ldr	r3, [pc, #36]	@ (8008140 <cleanup_stdio+0x38>)
 800811c:	4299      	cmp	r1, r3
 800811e:	d002      	beq.n	8008126 <cleanup_stdio+0x1e>
 8008120:	4620      	mov	r0, r4
 8008122:	f001 fe0b 	bl	8009d3c <_fflush_r>
 8008126:	68e1      	ldr	r1, [r4, #12]
 8008128:	4b06      	ldr	r3, [pc, #24]	@ (8008144 <cleanup_stdio+0x3c>)
 800812a:	4299      	cmp	r1, r3
 800812c:	d004      	beq.n	8008138 <cleanup_stdio+0x30>
 800812e:	4620      	mov	r0, r4
 8008130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008134:	f001 be02 	b.w	8009d3c <_fflush_r>
 8008138:	bd10      	pop	{r4, pc}
 800813a:	bf00      	nop
 800813c:	20001b34 	.word	0x20001b34
 8008140:	20001b9c 	.word	0x20001b9c
 8008144:	20001c04 	.word	0x20001c04

08008148 <global_stdio_init.part.0>:
 8008148:	b510      	push	{r4, lr}
 800814a:	4b0b      	ldr	r3, [pc, #44]	@ (8008178 <global_stdio_init.part.0+0x30>)
 800814c:	4c0b      	ldr	r4, [pc, #44]	@ (800817c <global_stdio_init.part.0+0x34>)
 800814e:	4a0c      	ldr	r2, [pc, #48]	@ (8008180 <global_stdio_init.part.0+0x38>)
 8008150:	4620      	mov	r0, r4
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	2104      	movs	r1, #4
 8008156:	2200      	movs	r2, #0
 8008158:	f7ff ff94 	bl	8008084 <std>
 800815c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008160:	2201      	movs	r2, #1
 8008162:	2109      	movs	r1, #9
 8008164:	f7ff ff8e 	bl	8008084 <std>
 8008168:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800816c:	2202      	movs	r2, #2
 800816e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008172:	2112      	movs	r1, #18
 8008174:	f7ff bf86 	b.w	8008084 <std>
 8008178:	20001c6c 	.word	0x20001c6c
 800817c:	20001b34 	.word	0x20001b34
 8008180:	080080f1 	.word	0x080080f1

08008184 <__sfp_lock_acquire>:
 8008184:	4801      	ldr	r0, [pc, #4]	@ (800818c <__sfp_lock_acquire+0x8>)
 8008186:	f000 b920 	b.w	80083ca <__retarget_lock_acquire_recursive>
 800818a:	bf00      	nop
 800818c:	20001c75 	.word	0x20001c75

08008190 <__sfp_lock_release>:
 8008190:	4801      	ldr	r0, [pc, #4]	@ (8008198 <__sfp_lock_release+0x8>)
 8008192:	f000 b91b 	b.w	80083cc <__retarget_lock_release_recursive>
 8008196:	bf00      	nop
 8008198:	20001c75 	.word	0x20001c75

0800819c <__sinit>:
 800819c:	b510      	push	{r4, lr}
 800819e:	4604      	mov	r4, r0
 80081a0:	f7ff fff0 	bl	8008184 <__sfp_lock_acquire>
 80081a4:	6a23      	ldr	r3, [r4, #32]
 80081a6:	b11b      	cbz	r3, 80081b0 <__sinit+0x14>
 80081a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ac:	f7ff bff0 	b.w	8008190 <__sfp_lock_release>
 80081b0:	4b04      	ldr	r3, [pc, #16]	@ (80081c4 <__sinit+0x28>)
 80081b2:	6223      	str	r3, [r4, #32]
 80081b4:	4b04      	ldr	r3, [pc, #16]	@ (80081c8 <__sinit+0x2c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1f5      	bne.n	80081a8 <__sinit+0xc>
 80081bc:	f7ff ffc4 	bl	8008148 <global_stdio_init.part.0>
 80081c0:	e7f2      	b.n	80081a8 <__sinit+0xc>
 80081c2:	bf00      	nop
 80081c4:	08008109 	.word	0x08008109
 80081c8:	20001c6c 	.word	0x20001c6c

080081cc <_fwalk_sglue>:
 80081cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d0:	4607      	mov	r7, r0
 80081d2:	4688      	mov	r8, r1
 80081d4:	4614      	mov	r4, r2
 80081d6:	2600      	movs	r6, #0
 80081d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081dc:	f1b9 0901 	subs.w	r9, r9, #1
 80081e0:	d505      	bpl.n	80081ee <_fwalk_sglue+0x22>
 80081e2:	6824      	ldr	r4, [r4, #0]
 80081e4:	2c00      	cmp	r4, #0
 80081e6:	d1f7      	bne.n	80081d8 <_fwalk_sglue+0xc>
 80081e8:	4630      	mov	r0, r6
 80081ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ee:	89ab      	ldrh	r3, [r5, #12]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d907      	bls.n	8008204 <_fwalk_sglue+0x38>
 80081f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081f8:	3301      	adds	r3, #1
 80081fa:	d003      	beq.n	8008204 <_fwalk_sglue+0x38>
 80081fc:	4629      	mov	r1, r5
 80081fe:	4638      	mov	r0, r7
 8008200:	47c0      	blx	r8
 8008202:	4306      	orrs	r6, r0
 8008204:	3568      	adds	r5, #104	@ 0x68
 8008206:	e7e9      	b.n	80081dc <_fwalk_sglue+0x10>

08008208 <siprintf>:
 8008208:	b40e      	push	{r1, r2, r3}
 800820a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800820e:	b500      	push	{lr}
 8008210:	b09c      	sub	sp, #112	@ 0x70
 8008212:	ab1d      	add	r3, sp, #116	@ 0x74
 8008214:	9002      	str	r0, [sp, #8]
 8008216:	9006      	str	r0, [sp, #24]
 8008218:	9107      	str	r1, [sp, #28]
 800821a:	9104      	str	r1, [sp, #16]
 800821c:	4808      	ldr	r0, [pc, #32]	@ (8008240 <siprintf+0x38>)
 800821e:	4909      	ldr	r1, [pc, #36]	@ (8008244 <siprintf+0x3c>)
 8008220:	f853 2b04 	ldr.w	r2, [r3], #4
 8008224:	9105      	str	r1, [sp, #20]
 8008226:	6800      	ldr	r0, [r0, #0]
 8008228:	a902      	add	r1, sp, #8
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	f001 fc0a 	bl	8009a44 <_svfiprintf_r>
 8008230:	2200      	movs	r2, #0
 8008232:	9b02      	ldr	r3, [sp, #8]
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	b01c      	add	sp, #112	@ 0x70
 8008238:	f85d eb04 	ldr.w	lr, [sp], #4
 800823c:	b003      	add	sp, #12
 800823e:	4770      	bx	lr
 8008240:	20000080 	.word	0x20000080
 8008244:	ffff0208 	.word	0xffff0208

08008248 <__sread>:
 8008248:	b510      	push	{r4, lr}
 800824a:	460c      	mov	r4, r1
 800824c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008250:	f000 f86c 	bl	800832c <_read_r>
 8008254:	2800      	cmp	r0, #0
 8008256:	bfab      	itete	ge
 8008258:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800825a:	89a3      	ldrhlt	r3, [r4, #12]
 800825c:	181b      	addge	r3, r3, r0
 800825e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008262:	bfac      	ite	ge
 8008264:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008266:	81a3      	strhlt	r3, [r4, #12]
 8008268:	bd10      	pop	{r4, pc}

0800826a <__swrite>:
 800826a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800826e:	461f      	mov	r7, r3
 8008270:	898b      	ldrh	r3, [r1, #12]
 8008272:	4605      	mov	r5, r0
 8008274:	05db      	lsls	r3, r3, #23
 8008276:	460c      	mov	r4, r1
 8008278:	4616      	mov	r6, r2
 800827a:	d505      	bpl.n	8008288 <__swrite+0x1e>
 800827c:	2302      	movs	r3, #2
 800827e:	2200      	movs	r2, #0
 8008280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008284:	f000 f840 	bl	8008308 <_lseek_r>
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	4632      	mov	r2, r6
 800828c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008290:	81a3      	strh	r3, [r4, #12]
 8008292:	4628      	mov	r0, r5
 8008294:	463b      	mov	r3, r7
 8008296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800829a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800829e:	f000 b857 	b.w	8008350 <_write_r>

080082a2 <__sseek>:
 80082a2:	b510      	push	{r4, lr}
 80082a4:	460c      	mov	r4, r1
 80082a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082aa:	f000 f82d 	bl	8008308 <_lseek_r>
 80082ae:	1c43      	adds	r3, r0, #1
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	bf15      	itete	ne
 80082b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082be:	81a3      	strheq	r3, [r4, #12]
 80082c0:	bf18      	it	ne
 80082c2:	81a3      	strhne	r3, [r4, #12]
 80082c4:	bd10      	pop	{r4, pc}

080082c6 <__sclose>:
 80082c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ca:	f000 b80d 	b.w	80082e8 <_close_r>

080082ce <memset>:
 80082ce:	4603      	mov	r3, r0
 80082d0:	4402      	add	r2, r0
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d100      	bne.n	80082d8 <memset+0xa>
 80082d6:	4770      	bx	lr
 80082d8:	f803 1b01 	strb.w	r1, [r3], #1
 80082dc:	e7f9      	b.n	80082d2 <memset+0x4>
	...

080082e0 <_localeconv_r>:
 80082e0:	4800      	ldr	r0, [pc, #0]	@ (80082e4 <_localeconv_r+0x4>)
 80082e2:	4770      	bx	lr
 80082e4:	200001c0 	.word	0x200001c0

080082e8 <_close_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	2300      	movs	r3, #0
 80082ec:	4d05      	ldr	r5, [pc, #20]	@ (8008304 <_close_r+0x1c>)
 80082ee:	4604      	mov	r4, r0
 80082f0:	4608      	mov	r0, r1
 80082f2:	602b      	str	r3, [r5, #0]
 80082f4:	f7fb fd3b 	bl	8003d6e <_close>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d102      	bne.n	8008302 <_close_r+0x1a>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	b103      	cbz	r3, 8008302 <_close_r+0x1a>
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	bd38      	pop	{r3, r4, r5, pc}
 8008304:	20001c70 	.word	0x20001c70

08008308 <_lseek_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4604      	mov	r4, r0
 800830c:	4608      	mov	r0, r1
 800830e:	4611      	mov	r1, r2
 8008310:	2200      	movs	r2, #0
 8008312:	4d05      	ldr	r5, [pc, #20]	@ (8008328 <_lseek_r+0x20>)
 8008314:	602a      	str	r2, [r5, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	f7fb fd4d 	bl	8003db6 <_lseek>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_lseek_r+0x1e>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_lseek_r+0x1e>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	20001c70 	.word	0x20001c70

0800832c <_read_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4604      	mov	r4, r0
 8008330:	4608      	mov	r0, r1
 8008332:	4611      	mov	r1, r2
 8008334:	2200      	movs	r2, #0
 8008336:	4d05      	ldr	r5, [pc, #20]	@ (800834c <_read_r+0x20>)
 8008338:	602a      	str	r2, [r5, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	f7fb fcde 	bl	8003cfc <_read>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_read_r+0x1e>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_read_r+0x1e>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	20001c70 	.word	0x20001c70

08008350 <_write_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	4611      	mov	r1, r2
 8008358:	2200      	movs	r2, #0
 800835a:	4d05      	ldr	r5, [pc, #20]	@ (8008370 <_write_r+0x20>)
 800835c:	602a      	str	r2, [r5, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	f7fb fce9 	bl	8003d36 <_write>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d102      	bne.n	800836e <_write_r+0x1e>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	b103      	cbz	r3, 800836e <_write_r+0x1e>
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	bd38      	pop	{r3, r4, r5, pc}
 8008370:	20001c70 	.word	0x20001c70

08008374 <__errno>:
 8008374:	4b01      	ldr	r3, [pc, #4]	@ (800837c <__errno+0x8>)
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	20000080 	.word	0x20000080

08008380 <__libc_init_array>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	2600      	movs	r6, #0
 8008384:	4d0c      	ldr	r5, [pc, #48]	@ (80083b8 <__libc_init_array+0x38>)
 8008386:	4c0d      	ldr	r4, [pc, #52]	@ (80083bc <__libc_init_array+0x3c>)
 8008388:	1b64      	subs	r4, r4, r5
 800838a:	10a4      	asrs	r4, r4, #2
 800838c:	42a6      	cmp	r6, r4
 800838e:	d109      	bne.n	80083a4 <__libc_init_array+0x24>
 8008390:	f002 f870 	bl	800a474 <_init>
 8008394:	2600      	movs	r6, #0
 8008396:	4d0a      	ldr	r5, [pc, #40]	@ (80083c0 <__libc_init_array+0x40>)
 8008398:	4c0a      	ldr	r4, [pc, #40]	@ (80083c4 <__libc_init_array+0x44>)
 800839a:	1b64      	subs	r4, r4, r5
 800839c:	10a4      	asrs	r4, r4, #2
 800839e:	42a6      	cmp	r6, r4
 80083a0:	d105      	bne.n	80083ae <__libc_init_array+0x2e>
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a8:	4798      	blx	r3
 80083aa:	3601      	adds	r6, #1
 80083ac:	e7ee      	b.n	800838c <__libc_init_array+0xc>
 80083ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b2:	4798      	blx	r3
 80083b4:	3601      	adds	r6, #1
 80083b6:	e7f2      	b.n	800839e <__libc_init_array+0x1e>
 80083b8:	0800fbe0 	.word	0x0800fbe0
 80083bc:	0800fbe0 	.word	0x0800fbe0
 80083c0:	0800fbe0 	.word	0x0800fbe0
 80083c4:	0800fbe4 	.word	0x0800fbe4

080083c8 <__retarget_lock_init_recursive>:
 80083c8:	4770      	bx	lr

080083ca <__retarget_lock_acquire_recursive>:
 80083ca:	4770      	bx	lr

080083cc <__retarget_lock_release_recursive>:
 80083cc:	4770      	bx	lr

080083ce <memchr>:
 80083ce:	4603      	mov	r3, r0
 80083d0:	b510      	push	{r4, lr}
 80083d2:	b2c9      	uxtb	r1, r1
 80083d4:	4402      	add	r2, r0
 80083d6:	4293      	cmp	r3, r2
 80083d8:	4618      	mov	r0, r3
 80083da:	d101      	bne.n	80083e0 <memchr+0x12>
 80083dc:	2000      	movs	r0, #0
 80083de:	e003      	b.n	80083e8 <memchr+0x1a>
 80083e0:	7804      	ldrb	r4, [r0, #0]
 80083e2:	3301      	adds	r3, #1
 80083e4:	428c      	cmp	r4, r1
 80083e6:	d1f6      	bne.n	80083d6 <memchr+0x8>
 80083e8:	bd10      	pop	{r4, pc}

080083ea <quorem>:
 80083ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ee:	6903      	ldr	r3, [r0, #16]
 80083f0:	690c      	ldr	r4, [r1, #16]
 80083f2:	4607      	mov	r7, r0
 80083f4:	42a3      	cmp	r3, r4
 80083f6:	db7e      	blt.n	80084f6 <quorem+0x10c>
 80083f8:	3c01      	subs	r4, #1
 80083fa:	00a3      	lsls	r3, r4, #2
 80083fc:	f100 0514 	add.w	r5, r0, #20
 8008400:	f101 0814 	add.w	r8, r1, #20
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800840a:	9301      	str	r3, [sp, #4]
 800840c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008410:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008414:	3301      	adds	r3, #1
 8008416:	429a      	cmp	r2, r3
 8008418:	fbb2 f6f3 	udiv	r6, r2, r3
 800841c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008420:	d32e      	bcc.n	8008480 <quorem+0x96>
 8008422:	f04f 0a00 	mov.w	sl, #0
 8008426:	46c4      	mov	ip, r8
 8008428:	46ae      	mov	lr, r5
 800842a:	46d3      	mov	fp, sl
 800842c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008430:	b298      	uxth	r0, r3
 8008432:	fb06 a000 	mla	r0, r6, r0, sl
 8008436:	0c1b      	lsrs	r3, r3, #16
 8008438:	0c02      	lsrs	r2, r0, #16
 800843a:	fb06 2303 	mla	r3, r6, r3, r2
 800843e:	f8de 2000 	ldr.w	r2, [lr]
 8008442:	b280      	uxth	r0, r0
 8008444:	b292      	uxth	r2, r2
 8008446:	1a12      	subs	r2, r2, r0
 8008448:	445a      	add	r2, fp
 800844a:	f8de 0000 	ldr.w	r0, [lr]
 800844e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008452:	b29b      	uxth	r3, r3
 8008454:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008458:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800845c:	b292      	uxth	r2, r2
 800845e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008462:	45e1      	cmp	r9, ip
 8008464:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008468:	f84e 2b04 	str.w	r2, [lr], #4
 800846c:	d2de      	bcs.n	800842c <quorem+0x42>
 800846e:	9b00      	ldr	r3, [sp, #0]
 8008470:	58eb      	ldr	r3, [r5, r3]
 8008472:	b92b      	cbnz	r3, 8008480 <quorem+0x96>
 8008474:	9b01      	ldr	r3, [sp, #4]
 8008476:	3b04      	subs	r3, #4
 8008478:	429d      	cmp	r5, r3
 800847a:	461a      	mov	r2, r3
 800847c:	d32f      	bcc.n	80084de <quorem+0xf4>
 800847e:	613c      	str	r4, [r7, #16]
 8008480:	4638      	mov	r0, r7
 8008482:	f001 f97b 	bl	800977c <__mcmp>
 8008486:	2800      	cmp	r0, #0
 8008488:	db25      	blt.n	80084d6 <quorem+0xec>
 800848a:	4629      	mov	r1, r5
 800848c:	2000      	movs	r0, #0
 800848e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008492:	f8d1 c000 	ldr.w	ip, [r1]
 8008496:	fa1f fe82 	uxth.w	lr, r2
 800849a:	fa1f f38c 	uxth.w	r3, ip
 800849e:	eba3 030e 	sub.w	r3, r3, lr
 80084a2:	4403      	add	r3, r0
 80084a4:	0c12      	lsrs	r2, r2, #16
 80084a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80084aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084b4:	45c1      	cmp	r9, r8
 80084b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80084ba:	f841 3b04 	str.w	r3, [r1], #4
 80084be:	d2e6      	bcs.n	800848e <quorem+0xa4>
 80084c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084c8:	b922      	cbnz	r2, 80084d4 <quorem+0xea>
 80084ca:	3b04      	subs	r3, #4
 80084cc:	429d      	cmp	r5, r3
 80084ce:	461a      	mov	r2, r3
 80084d0:	d30b      	bcc.n	80084ea <quorem+0x100>
 80084d2:	613c      	str	r4, [r7, #16]
 80084d4:	3601      	adds	r6, #1
 80084d6:	4630      	mov	r0, r6
 80084d8:	b003      	add	sp, #12
 80084da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084de:	6812      	ldr	r2, [r2, #0]
 80084e0:	3b04      	subs	r3, #4
 80084e2:	2a00      	cmp	r2, #0
 80084e4:	d1cb      	bne.n	800847e <quorem+0x94>
 80084e6:	3c01      	subs	r4, #1
 80084e8:	e7c6      	b.n	8008478 <quorem+0x8e>
 80084ea:	6812      	ldr	r2, [r2, #0]
 80084ec:	3b04      	subs	r3, #4
 80084ee:	2a00      	cmp	r2, #0
 80084f0:	d1ef      	bne.n	80084d2 <quorem+0xe8>
 80084f2:	3c01      	subs	r4, #1
 80084f4:	e7ea      	b.n	80084cc <quorem+0xe2>
 80084f6:	2000      	movs	r0, #0
 80084f8:	e7ee      	b.n	80084d8 <quorem+0xee>
 80084fa:	0000      	movs	r0, r0
 80084fc:	0000      	movs	r0, r0
	...

08008500 <_dtoa_r>:
 8008500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	4614      	mov	r4, r2
 8008506:	461d      	mov	r5, r3
 8008508:	69c7      	ldr	r7, [r0, #28]
 800850a:	b097      	sub	sp, #92	@ 0x5c
 800850c:	4683      	mov	fp, r0
 800850e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008512:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008514:	b97f      	cbnz	r7, 8008536 <_dtoa_r+0x36>
 8008516:	2010      	movs	r0, #16
 8008518:	f000 fe02 	bl	8009120 <malloc>
 800851c:	4602      	mov	r2, r0
 800851e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008522:	b920      	cbnz	r0, 800852e <_dtoa_r+0x2e>
 8008524:	21ef      	movs	r1, #239	@ 0xef
 8008526:	4ba8      	ldr	r3, [pc, #672]	@ (80087c8 <_dtoa_r+0x2c8>)
 8008528:	48a8      	ldr	r0, [pc, #672]	@ (80087cc <_dtoa_r+0x2cc>)
 800852a:	f001 fc67 	bl	8009dfc <__assert_func>
 800852e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008532:	6007      	str	r7, [r0, #0]
 8008534:	60c7      	str	r7, [r0, #12]
 8008536:	f8db 301c 	ldr.w	r3, [fp, #28]
 800853a:	6819      	ldr	r1, [r3, #0]
 800853c:	b159      	cbz	r1, 8008556 <_dtoa_r+0x56>
 800853e:	685a      	ldr	r2, [r3, #4]
 8008540:	2301      	movs	r3, #1
 8008542:	4093      	lsls	r3, r2
 8008544:	604a      	str	r2, [r1, #4]
 8008546:	608b      	str	r3, [r1, #8]
 8008548:	4658      	mov	r0, fp
 800854a:	f000 fedf 	bl	800930c <_Bfree>
 800854e:	2200      	movs	r2, #0
 8008550:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008554:	601a      	str	r2, [r3, #0]
 8008556:	1e2b      	subs	r3, r5, #0
 8008558:	bfaf      	iteee	ge
 800855a:	2300      	movge	r3, #0
 800855c:	2201      	movlt	r2, #1
 800855e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008562:	9303      	strlt	r3, [sp, #12]
 8008564:	bfa8      	it	ge
 8008566:	6033      	strge	r3, [r6, #0]
 8008568:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800856c:	4b98      	ldr	r3, [pc, #608]	@ (80087d0 <_dtoa_r+0x2d0>)
 800856e:	bfb8      	it	lt
 8008570:	6032      	strlt	r2, [r6, #0]
 8008572:	ea33 0308 	bics.w	r3, r3, r8
 8008576:	d112      	bne.n	800859e <_dtoa_r+0x9e>
 8008578:	f242 730f 	movw	r3, #9999	@ 0x270f
 800857c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008584:	4323      	orrs	r3, r4
 8008586:	f000 8550 	beq.w	800902a <_dtoa_r+0xb2a>
 800858a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800858c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80087d4 <_dtoa_r+0x2d4>
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 8552 	beq.w	800903a <_dtoa_r+0xb3a>
 8008596:	f10a 0303 	add.w	r3, sl, #3
 800859a:	f000 bd4c 	b.w	8009036 <_dtoa_r+0xb36>
 800859e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80085a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085aa:	2200      	movs	r2, #0
 80085ac:	2300      	movs	r3, #0
 80085ae:	f7f8 f9fb 	bl	80009a8 <__aeabi_dcmpeq>
 80085b2:	4607      	mov	r7, r0
 80085b4:	b158      	cbz	r0, 80085ce <_dtoa_r+0xce>
 80085b6:	2301      	movs	r3, #1
 80085b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80085be:	b113      	cbz	r3, 80085c6 <_dtoa_r+0xc6>
 80085c0:	4b85      	ldr	r3, [pc, #532]	@ (80087d8 <_dtoa_r+0x2d8>)
 80085c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80085c4:	6013      	str	r3, [r2, #0]
 80085c6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80087dc <_dtoa_r+0x2dc>
 80085ca:	f000 bd36 	b.w	800903a <_dtoa_r+0xb3a>
 80085ce:	ab14      	add	r3, sp, #80	@ 0x50
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	ab15      	add	r3, sp, #84	@ 0x54
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	4658      	mov	r0, fp
 80085d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80085dc:	f001 f97e 	bl	80098dc <__d2b>
 80085e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80085e4:	4681      	mov	r9, r0
 80085e6:	2e00      	cmp	r6, #0
 80085e8:	d077      	beq.n	80086da <_dtoa_r+0x1da>
 80085ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80085f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80085fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008600:	9712      	str	r7, [sp, #72]	@ 0x48
 8008602:	4619      	mov	r1, r3
 8008604:	2200      	movs	r2, #0
 8008606:	4b76      	ldr	r3, [pc, #472]	@ (80087e0 <_dtoa_r+0x2e0>)
 8008608:	f7f7 fdae 	bl	8000168 <__aeabi_dsub>
 800860c:	a368      	add	r3, pc, #416	@ (adr r3, 80087b0 <_dtoa_r+0x2b0>)
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	f7f7 ff61 	bl	80004d8 <__aeabi_dmul>
 8008616:	a368      	add	r3, pc, #416	@ (adr r3, 80087b8 <_dtoa_r+0x2b8>)
 8008618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861c:	f7f7 fda6 	bl	800016c <__adddf3>
 8008620:	4604      	mov	r4, r0
 8008622:	4630      	mov	r0, r6
 8008624:	460d      	mov	r5, r1
 8008626:	f7f7 feed 	bl	8000404 <__aeabi_i2d>
 800862a:	a365      	add	r3, pc, #404	@ (adr r3, 80087c0 <_dtoa_r+0x2c0>)
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f7f7 ff52 	bl	80004d8 <__aeabi_dmul>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	4620      	mov	r0, r4
 800863a:	4629      	mov	r1, r5
 800863c:	f7f7 fd96 	bl	800016c <__adddf3>
 8008640:	4604      	mov	r4, r0
 8008642:	460d      	mov	r5, r1
 8008644:	f7f8 f9f8 	bl	8000a38 <__aeabi_d2iz>
 8008648:	2200      	movs	r2, #0
 800864a:	4607      	mov	r7, r0
 800864c:	2300      	movs	r3, #0
 800864e:	4620      	mov	r0, r4
 8008650:	4629      	mov	r1, r5
 8008652:	f7f8 f9b3 	bl	80009bc <__aeabi_dcmplt>
 8008656:	b140      	cbz	r0, 800866a <_dtoa_r+0x16a>
 8008658:	4638      	mov	r0, r7
 800865a:	f7f7 fed3 	bl	8000404 <__aeabi_i2d>
 800865e:	4622      	mov	r2, r4
 8008660:	462b      	mov	r3, r5
 8008662:	f7f8 f9a1 	bl	80009a8 <__aeabi_dcmpeq>
 8008666:	b900      	cbnz	r0, 800866a <_dtoa_r+0x16a>
 8008668:	3f01      	subs	r7, #1
 800866a:	2f16      	cmp	r7, #22
 800866c:	d853      	bhi.n	8008716 <_dtoa_r+0x216>
 800866e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008672:	4b5c      	ldr	r3, [pc, #368]	@ (80087e4 <_dtoa_r+0x2e4>)
 8008674:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867c:	f7f8 f99e 	bl	80009bc <__aeabi_dcmplt>
 8008680:	2800      	cmp	r0, #0
 8008682:	d04a      	beq.n	800871a <_dtoa_r+0x21a>
 8008684:	2300      	movs	r3, #0
 8008686:	3f01      	subs	r7, #1
 8008688:	930f      	str	r3, [sp, #60]	@ 0x3c
 800868a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800868c:	1b9b      	subs	r3, r3, r6
 800868e:	1e5a      	subs	r2, r3, #1
 8008690:	bf46      	itte	mi
 8008692:	f1c3 0801 	rsbmi	r8, r3, #1
 8008696:	2300      	movmi	r3, #0
 8008698:	f04f 0800 	movpl.w	r8, #0
 800869c:	9209      	str	r2, [sp, #36]	@ 0x24
 800869e:	bf48      	it	mi
 80086a0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80086a2:	2f00      	cmp	r7, #0
 80086a4:	db3b      	blt.n	800871e <_dtoa_r+0x21e>
 80086a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a8:	970e      	str	r7, [sp, #56]	@ 0x38
 80086aa:	443b      	add	r3, r7
 80086ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ae:	2300      	movs	r3, #0
 80086b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80086b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086b4:	2b09      	cmp	r3, #9
 80086b6:	d866      	bhi.n	8008786 <_dtoa_r+0x286>
 80086b8:	2b05      	cmp	r3, #5
 80086ba:	bfc4      	itt	gt
 80086bc:	3b04      	subgt	r3, #4
 80086be:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80086c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086c2:	bfc8      	it	gt
 80086c4:	2400      	movgt	r4, #0
 80086c6:	f1a3 0302 	sub.w	r3, r3, #2
 80086ca:	bfd8      	it	le
 80086cc:	2401      	movle	r4, #1
 80086ce:	2b03      	cmp	r3, #3
 80086d0:	d864      	bhi.n	800879c <_dtoa_r+0x29c>
 80086d2:	e8df f003 	tbb	[pc, r3]
 80086d6:	382b      	.short	0x382b
 80086d8:	5636      	.short	0x5636
 80086da:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80086de:	441e      	add	r6, r3
 80086e0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	bfc1      	itttt	gt
 80086e8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80086ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80086f0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80086f4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80086f8:	bfd6      	itet	le
 80086fa:	f1c3 0320 	rsble	r3, r3, #32
 80086fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8008702:	fa04 f003 	lslle.w	r0, r4, r3
 8008706:	f7f7 fe6d 	bl	80003e4 <__aeabi_ui2d>
 800870a:	2201      	movs	r2, #1
 800870c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008710:	3e01      	subs	r6, #1
 8008712:	9212      	str	r2, [sp, #72]	@ 0x48
 8008714:	e775      	b.n	8008602 <_dtoa_r+0x102>
 8008716:	2301      	movs	r3, #1
 8008718:	e7b6      	b.n	8008688 <_dtoa_r+0x188>
 800871a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800871c:	e7b5      	b.n	800868a <_dtoa_r+0x18a>
 800871e:	427b      	negs	r3, r7
 8008720:	930a      	str	r3, [sp, #40]	@ 0x28
 8008722:	2300      	movs	r3, #0
 8008724:	eba8 0807 	sub.w	r8, r8, r7
 8008728:	930e      	str	r3, [sp, #56]	@ 0x38
 800872a:	e7c2      	b.n	80086b2 <_dtoa_r+0x1b2>
 800872c:	2300      	movs	r3, #0
 800872e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008730:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008732:	2b00      	cmp	r3, #0
 8008734:	dc35      	bgt.n	80087a2 <_dtoa_r+0x2a2>
 8008736:	2301      	movs	r3, #1
 8008738:	461a      	mov	r2, r3
 800873a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800873e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008740:	e00b      	b.n	800875a <_dtoa_r+0x25a>
 8008742:	2301      	movs	r3, #1
 8008744:	e7f3      	b.n	800872e <_dtoa_r+0x22e>
 8008746:	2300      	movs	r3, #0
 8008748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800874a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800874c:	18fb      	adds	r3, r7, r3
 800874e:	9308      	str	r3, [sp, #32]
 8008750:	3301      	adds	r3, #1
 8008752:	2b01      	cmp	r3, #1
 8008754:	9307      	str	r3, [sp, #28]
 8008756:	bfb8      	it	lt
 8008758:	2301      	movlt	r3, #1
 800875a:	2100      	movs	r1, #0
 800875c:	2204      	movs	r2, #4
 800875e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008762:	f102 0514 	add.w	r5, r2, #20
 8008766:	429d      	cmp	r5, r3
 8008768:	d91f      	bls.n	80087aa <_dtoa_r+0x2aa>
 800876a:	6041      	str	r1, [r0, #4]
 800876c:	4658      	mov	r0, fp
 800876e:	f000 fd8d 	bl	800928c <_Balloc>
 8008772:	4682      	mov	sl, r0
 8008774:	2800      	cmp	r0, #0
 8008776:	d139      	bne.n	80087ec <_dtoa_r+0x2ec>
 8008778:	4602      	mov	r2, r0
 800877a:	f240 11af 	movw	r1, #431	@ 0x1af
 800877e:	4b1a      	ldr	r3, [pc, #104]	@ (80087e8 <_dtoa_r+0x2e8>)
 8008780:	e6d2      	b.n	8008528 <_dtoa_r+0x28>
 8008782:	2301      	movs	r3, #1
 8008784:	e7e0      	b.n	8008748 <_dtoa_r+0x248>
 8008786:	2401      	movs	r4, #1
 8008788:	2300      	movs	r3, #0
 800878a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800878c:	9320      	str	r3, [sp, #128]	@ 0x80
 800878e:	f04f 33ff 	mov.w	r3, #4294967295
 8008792:	2200      	movs	r2, #0
 8008794:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008798:	2312      	movs	r3, #18
 800879a:	e7d0      	b.n	800873e <_dtoa_r+0x23e>
 800879c:	2301      	movs	r3, #1
 800879e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087a0:	e7f5      	b.n	800878e <_dtoa_r+0x28e>
 80087a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80087a8:	e7d7      	b.n	800875a <_dtoa_r+0x25a>
 80087aa:	3101      	adds	r1, #1
 80087ac:	0052      	lsls	r2, r2, #1
 80087ae:	e7d8      	b.n	8008762 <_dtoa_r+0x262>
 80087b0:	636f4361 	.word	0x636f4361
 80087b4:	3fd287a7 	.word	0x3fd287a7
 80087b8:	8b60c8b3 	.word	0x8b60c8b3
 80087bc:	3fc68a28 	.word	0x3fc68a28
 80087c0:	509f79fb 	.word	0x509f79fb
 80087c4:	3fd34413 	.word	0x3fd34413
 80087c8:	0800f8a7 	.word	0x0800f8a7
 80087cc:	0800f8be 	.word	0x0800f8be
 80087d0:	7ff00000 	.word	0x7ff00000
 80087d4:	0800f8a3 	.word	0x0800f8a3
 80087d8:	0800f877 	.word	0x0800f877
 80087dc:	0800f876 	.word	0x0800f876
 80087e0:	3ff80000 	.word	0x3ff80000
 80087e4:	0800f9b8 	.word	0x0800f9b8
 80087e8:	0800f916 	.word	0x0800f916
 80087ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80087f0:	6018      	str	r0, [r3, #0]
 80087f2:	9b07      	ldr	r3, [sp, #28]
 80087f4:	2b0e      	cmp	r3, #14
 80087f6:	f200 80a4 	bhi.w	8008942 <_dtoa_r+0x442>
 80087fa:	2c00      	cmp	r4, #0
 80087fc:	f000 80a1 	beq.w	8008942 <_dtoa_r+0x442>
 8008800:	2f00      	cmp	r7, #0
 8008802:	dd33      	ble.n	800886c <_dtoa_r+0x36c>
 8008804:	4b86      	ldr	r3, [pc, #536]	@ (8008a20 <_dtoa_r+0x520>)
 8008806:	f007 020f 	and.w	r2, r7, #15
 800880a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800880e:	05f8      	lsls	r0, r7, #23
 8008810:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008814:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008818:	ea4f 1427 	mov.w	r4, r7, asr #4
 800881c:	d516      	bpl.n	800884c <_dtoa_r+0x34c>
 800881e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008822:	4b80      	ldr	r3, [pc, #512]	@ (8008a24 <_dtoa_r+0x524>)
 8008824:	2603      	movs	r6, #3
 8008826:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800882a:	f7f7 ff7f 	bl	800072c <__aeabi_ddiv>
 800882e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008832:	f004 040f 	and.w	r4, r4, #15
 8008836:	4d7b      	ldr	r5, [pc, #492]	@ (8008a24 <_dtoa_r+0x524>)
 8008838:	b954      	cbnz	r4, 8008850 <_dtoa_r+0x350>
 800883a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800883e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008842:	f7f7 ff73 	bl	800072c <__aeabi_ddiv>
 8008846:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800884a:	e028      	b.n	800889e <_dtoa_r+0x39e>
 800884c:	2602      	movs	r6, #2
 800884e:	e7f2      	b.n	8008836 <_dtoa_r+0x336>
 8008850:	07e1      	lsls	r1, r4, #31
 8008852:	d508      	bpl.n	8008866 <_dtoa_r+0x366>
 8008854:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008858:	e9d5 2300 	ldrd	r2, r3, [r5]
 800885c:	f7f7 fe3c 	bl	80004d8 <__aeabi_dmul>
 8008860:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008864:	3601      	adds	r6, #1
 8008866:	1064      	asrs	r4, r4, #1
 8008868:	3508      	adds	r5, #8
 800886a:	e7e5      	b.n	8008838 <_dtoa_r+0x338>
 800886c:	f000 80d2 	beq.w	8008a14 <_dtoa_r+0x514>
 8008870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008874:	427c      	negs	r4, r7
 8008876:	4b6a      	ldr	r3, [pc, #424]	@ (8008a20 <_dtoa_r+0x520>)
 8008878:	f004 020f 	and.w	r2, r4, #15
 800887c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	f7f7 fe28 	bl	80004d8 <__aeabi_dmul>
 8008888:	2602      	movs	r6, #2
 800888a:	2300      	movs	r3, #0
 800888c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008890:	4d64      	ldr	r5, [pc, #400]	@ (8008a24 <_dtoa_r+0x524>)
 8008892:	1124      	asrs	r4, r4, #4
 8008894:	2c00      	cmp	r4, #0
 8008896:	f040 80b2 	bne.w	80089fe <_dtoa_r+0x4fe>
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1d3      	bne.n	8008846 <_dtoa_r+0x346>
 800889e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80088a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 80b7 	beq.w	8008a18 <_dtoa_r+0x518>
 80088aa:	2200      	movs	r2, #0
 80088ac:	4620      	mov	r0, r4
 80088ae:	4629      	mov	r1, r5
 80088b0:	4b5d      	ldr	r3, [pc, #372]	@ (8008a28 <_dtoa_r+0x528>)
 80088b2:	f7f8 f883 	bl	80009bc <__aeabi_dcmplt>
 80088b6:	2800      	cmp	r0, #0
 80088b8:	f000 80ae 	beq.w	8008a18 <_dtoa_r+0x518>
 80088bc:	9b07      	ldr	r3, [sp, #28]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 80aa 	beq.w	8008a18 <_dtoa_r+0x518>
 80088c4:	9b08      	ldr	r3, [sp, #32]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	dd37      	ble.n	800893a <_dtoa_r+0x43a>
 80088ca:	1e7b      	subs	r3, r7, #1
 80088cc:	4620      	mov	r0, r4
 80088ce:	9304      	str	r3, [sp, #16]
 80088d0:	2200      	movs	r2, #0
 80088d2:	4629      	mov	r1, r5
 80088d4:	4b55      	ldr	r3, [pc, #340]	@ (8008a2c <_dtoa_r+0x52c>)
 80088d6:	f7f7 fdff 	bl	80004d8 <__aeabi_dmul>
 80088da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088de:	9c08      	ldr	r4, [sp, #32]
 80088e0:	3601      	adds	r6, #1
 80088e2:	4630      	mov	r0, r6
 80088e4:	f7f7 fd8e 	bl	8000404 <__aeabi_i2d>
 80088e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088ec:	f7f7 fdf4 	bl	80004d8 <__aeabi_dmul>
 80088f0:	2200      	movs	r2, #0
 80088f2:	4b4f      	ldr	r3, [pc, #316]	@ (8008a30 <_dtoa_r+0x530>)
 80088f4:	f7f7 fc3a 	bl	800016c <__adddf3>
 80088f8:	4605      	mov	r5, r0
 80088fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80088fe:	2c00      	cmp	r4, #0
 8008900:	f040 809a 	bne.w	8008a38 <_dtoa_r+0x538>
 8008904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008908:	2200      	movs	r2, #0
 800890a:	4b4a      	ldr	r3, [pc, #296]	@ (8008a34 <_dtoa_r+0x534>)
 800890c:	f7f7 fc2c 	bl	8000168 <__aeabi_dsub>
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008918:	462a      	mov	r2, r5
 800891a:	4633      	mov	r3, r6
 800891c:	f7f8 f86c 	bl	80009f8 <__aeabi_dcmpgt>
 8008920:	2800      	cmp	r0, #0
 8008922:	f040 828e 	bne.w	8008e42 <_dtoa_r+0x942>
 8008926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800892a:	462a      	mov	r2, r5
 800892c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008930:	f7f8 f844 	bl	80009bc <__aeabi_dcmplt>
 8008934:	2800      	cmp	r0, #0
 8008936:	f040 8127 	bne.w	8008b88 <_dtoa_r+0x688>
 800893a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800893e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008942:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008944:	2b00      	cmp	r3, #0
 8008946:	f2c0 8163 	blt.w	8008c10 <_dtoa_r+0x710>
 800894a:	2f0e      	cmp	r7, #14
 800894c:	f300 8160 	bgt.w	8008c10 <_dtoa_r+0x710>
 8008950:	4b33      	ldr	r3, [pc, #204]	@ (8008a20 <_dtoa_r+0x520>)
 8008952:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008956:	e9d3 3400 	ldrd	r3, r4, [r3]
 800895a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800895e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008960:	2b00      	cmp	r3, #0
 8008962:	da03      	bge.n	800896c <_dtoa_r+0x46c>
 8008964:	9b07      	ldr	r3, [sp, #28]
 8008966:	2b00      	cmp	r3, #0
 8008968:	f340 8100 	ble.w	8008b6c <_dtoa_r+0x66c>
 800896c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008970:	4656      	mov	r6, sl
 8008972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008976:	4620      	mov	r0, r4
 8008978:	4629      	mov	r1, r5
 800897a:	f7f7 fed7 	bl	800072c <__aeabi_ddiv>
 800897e:	f7f8 f85b 	bl	8000a38 <__aeabi_d2iz>
 8008982:	4680      	mov	r8, r0
 8008984:	f7f7 fd3e 	bl	8000404 <__aeabi_i2d>
 8008988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800898c:	f7f7 fda4 	bl	80004d8 <__aeabi_dmul>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4620      	mov	r0, r4
 8008996:	4629      	mov	r1, r5
 8008998:	f7f7 fbe6 	bl	8000168 <__aeabi_dsub>
 800899c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80089a0:	9d07      	ldr	r5, [sp, #28]
 80089a2:	f806 4b01 	strb.w	r4, [r6], #1
 80089a6:	eba6 040a 	sub.w	r4, r6, sl
 80089aa:	42a5      	cmp	r5, r4
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	f040 8116 	bne.w	8008be0 <_dtoa_r+0x6e0>
 80089b4:	f7f7 fbda 	bl	800016c <__adddf3>
 80089b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089bc:	4604      	mov	r4, r0
 80089be:	460d      	mov	r5, r1
 80089c0:	f7f8 f81a 	bl	80009f8 <__aeabi_dcmpgt>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	f040 80f8 	bne.w	8008bba <_dtoa_r+0x6ba>
 80089ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ce:	4620      	mov	r0, r4
 80089d0:	4629      	mov	r1, r5
 80089d2:	f7f7 ffe9 	bl	80009a8 <__aeabi_dcmpeq>
 80089d6:	b118      	cbz	r0, 80089e0 <_dtoa_r+0x4e0>
 80089d8:	f018 0f01 	tst.w	r8, #1
 80089dc:	f040 80ed 	bne.w	8008bba <_dtoa_r+0x6ba>
 80089e0:	4649      	mov	r1, r9
 80089e2:	4658      	mov	r0, fp
 80089e4:	f000 fc92 	bl	800930c <_Bfree>
 80089e8:	2300      	movs	r3, #0
 80089ea:	7033      	strb	r3, [r6, #0]
 80089ec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80089ee:	3701      	adds	r7, #1
 80089f0:	601f      	str	r7, [r3, #0]
 80089f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 8320 	beq.w	800903a <_dtoa_r+0xb3a>
 80089fa:	601e      	str	r6, [r3, #0]
 80089fc:	e31d      	b.n	800903a <_dtoa_r+0xb3a>
 80089fe:	07e2      	lsls	r2, r4, #31
 8008a00:	d505      	bpl.n	8008a0e <_dtoa_r+0x50e>
 8008a02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a06:	f7f7 fd67 	bl	80004d8 <__aeabi_dmul>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	3601      	adds	r6, #1
 8008a0e:	1064      	asrs	r4, r4, #1
 8008a10:	3508      	adds	r5, #8
 8008a12:	e73f      	b.n	8008894 <_dtoa_r+0x394>
 8008a14:	2602      	movs	r6, #2
 8008a16:	e742      	b.n	800889e <_dtoa_r+0x39e>
 8008a18:	9c07      	ldr	r4, [sp, #28]
 8008a1a:	9704      	str	r7, [sp, #16]
 8008a1c:	e761      	b.n	80088e2 <_dtoa_r+0x3e2>
 8008a1e:	bf00      	nop
 8008a20:	0800f9b8 	.word	0x0800f9b8
 8008a24:	0800f990 	.word	0x0800f990
 8008a28:	3ff00000 	.word	0x3ff00000
 8008a2c:	40240000 	.word	0x40240000
 8008a30:	401c0000 	.word	0x401c0000
 8008a34:	40140000 	.word	0x40140000
 8008a38:	4b70      	ldr	r3, [pc, #448]	@ (8008bfc <_dtoa_r+0x6fc>)
 8008a3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a44:	4454      	add	r4, sl
 8008a46:	2900      	cmp	r1, #0
 8008a48:	d045      	beq.n	8008ad6 <_dtoa_r+0x5d6>
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	496c      	ldr	r1, [pc, #432]	@ (8008c00 <_dtoa_r+0x700>)
 8008a4e:	f7f7 fe6d 	bl	800072c <__aeabi_ddiv>
 8008a52:	4633      	mov	r3, r6
 8008a54:	462a      	mov	r2, r5
 8008a56:	f7f7 fb87 	bl	8000168 <__aeabi_dsub>
 8008a5a:	4656      	mov	r6, sl
 8008a5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a64:	f7f7 ffe8 	bl	8000a38 <__aeabi_d2iz>
 8008a68:	4605      	mov	r5, r0
 8008a6a:	f7f7 fccb 	bl	8000404 <__aeabi_i2d>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a76:	f7f7 fb77 	bl	8000168 <__aeabi_dsub>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	3530      	adds	r5, #48	@ 0x30
 8008a80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a88:	f806 5b01 	strb.w	r5, [r6], #1
 8008a8c:	f7f7 ff96 	bl	80009bc <__aeabi_dcmplt>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d163      	bne.n	8008b5c <_dtoa_r+0x65c>
 8008a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a98:	2000      	movs	r0, #0
 8008a9a:	495a      	ldr	r1, [pc, #360]	@ (8008c04 <_dtoa_r+0x704>)
 8008a9c:	f7f7 fb64 	bl	8000168 <__aeabi_dsub>
 8008aa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008aa4:	f7f7 ff8a 	bl	80009bc <__aeabi_dcmplt>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	f040 8087 	bne.w	8008bbc <_dtoa_r+0x6bc>
 8008aae:	42a6      	cmp	r6, r4
 8008ab0:	f43f af43 	beq.w	800893a <_dtoa_r+0x43a>
 8008ab4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ab8:	2200      	movs	r2, #0
 8008aba:	4b53      	ldr	r3, [pc, #332]	@ (8008c08 <_dtoa_r+0x708>)
 8008abc:	f7f7 fd0c 	bl	80004d8 <__aeabi_dmul>
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aca:	4b4f      	ldr	r3, [pc, #316]	@ (8008c08 <_dtoa_r+0x708>)
 8008acc:	f7f7 fd04 	bl	80004d8 <__aeabi_dmul>
 8008ad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ad4:	e7c4      	b.n	8008a60 <_dtoa_r+0x560>
 8008ad6:	4631      	mov	r1, r6
 8008ad8:	4628      	mov	r0, r5
 8008ada:	f7f7 fcfd 	bl	80004d8 <__aeabi_dmul>
 8008ade:	4656      	mov	r6, sl
 8008ae0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ae4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aea:	f7f7 ffa5 	bl	8000a38 <__aeabi_d2iz>
 8008aee:	4605      	mov	r5, r0
 8008af0:	f7f7 fc88 	bl	8000404 <__aeabi_i2d>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008afc:	f7f7 fb34 	bl	8000168 <__aeabi_dsub>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	3530      	adds	r5, #48	@ 0x30
 8008b06:	f806 5b01 	strb.w	r5, [r6], #1
 8008b0a:	42a6      	cmp	r6, r4
 8008b0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b10:	f04f 0200 	mov.w	r2, #0
 8008b14:	d124      	bne.n	8008b60 <_dtoa_r+0x660>
 8008b16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b1a:	4b39      	ldr	r3, [pc, #228]	@ (8008c00 <_dtoa_r+0x700>)
 8008b1c:	f7f7 fb26 	bl	800016c <__adddf3>
 8008b20:	4602      	mov	r2, r0
 8008b22:	460b      	mov	r3, r1
 8008b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b28:	f7f7 ff66 	bl	80009f8 <__aeabi_dcmpgt>
 8008b2c:	2800      	cmp	r0, #0
 8008b2e:	d145      	bne.n	8008bbc <_dtoa_r+0x6bc>
 8008b30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b34:	2000      	movs	r0, #0
 8008b36:	4932      	ldr	r1, [pc, #200]	@ (8008c00 <_dtoa_r+0x700>)
 8008b38:	f7f7 fb16 	bl	8000168 <__aeabi_dsub>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b44:	f7f7 ff3a 	bl	80009bc <__aeabi_dcmplt>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	f43f aef6 	beq.w	800893a <_dtoa_r+0x43a>
 8008b4e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008b50:	1e73      	subs	r3, r6, #1
 8008b52:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b58:	2b30      	cmp	r3, #48	@ 0x30
 8008b5a:	d0f8      	beq.n	8008b4e <_dtoa_r+0x64e>
 8008b5c:	9f04      	ldr	r7, [sp, #16]
 8008b5e:	e73f      	b.n	80089e0 <_dtoa_r+0x4e0>
 8008b60:	4b29      	ldr	r3, [pc, #164]	@ (8008c08 <_dtoa_r+0x708>)
 8008b62:	f7f7 fcb9 	bl	80004d8 <__aeabi_dmul>
 8008b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b6a:	e7bc      	b.n	8008ae6 <_dtoa_r+0x5e6>
 8008b6c:	d10c      	bne.n	8008b88 <_dtoa_r+0x688>
 8008b6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b72:	2200      	movs	r2, #0
 8008b74:	4b25      	ldr	r3, [pc, #148]	@ (8008c0c <_dtoa_r+0x70c>)
 8008b76:	f7f7 fcaf 	bl	80004d8 <__aeabi_dmul>
 8008b7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b7e:	f7f7 ff31 	bl	80009e4 <__aeabi_dcmpge>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	f000 815b 	beq.w	8008e3e <_dtoa_r+0x93e>
 8008b88:	2400      	movs	r4, #0
 8008b8a:	4625      	mov	r5, r4
 8008b8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b8e:	4656      	mov	r6, sl
 8008b90:	43db      	mvns	r3, r3
 8008b92:	9304      	str	r3, [sp, #16]
 8008b94:	2700      	movs	r7, #0
 8008b96:	4621      	mov	r1, r4
 8008b98:	4658      	mov	r0, fp
 8008b9a:	f000 fbb7 	bl	800930c <_Bfree>
 8008b9e:	2d00      	cmp	r5, #0
 8008ba0:	d0dc      	beq.n	8008b5c <_dtoa_r+0x65c>
 8008ba2:	b12f      	cbz	r7, 8008bb0 <_dtoa_r+0x6b0>
 8008ba4:	42af      	cmp	r7, r5
 8008ba6:	d003      	beq.n	8008bb0 <_dtoa_r+0x6b0>
 8008ba8:	4639      	mov	r1, r7
 8008baa:	4658      	mov	r0, fp
 8008bac:	f000 fbae 	bl	800930c <_Bfree>
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	4658      	mov	r0, fp
 8008bb4:	f000 fbaa 	bl	800930c <_Bfree>
 8008bb8:	e7d0      	b.n	8008b5c <_dtoa_r+0x65c>
 8008bba:	9704      	str	r7, [sp, #16]
 8008bbc:	4633      	mov	r3, r6
 8008bbe:	461e      	mov	r6, r3
 8008bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bc4:	2a39      	cmp	r2, #57	@ 0x39
 8008bc6:	d107      	bne.n	8008bd8 <_dtoa_r+0x6d8>
 8008bc8:	459a      	cmp	sl, r3
 8008bca:	d1f8      	bne.n	8008bbe <_dtoa_r+0x6be>
 8008bcc:	9a04      	ldr	r2, [sp, #16]
 8008bce:	3201      	adds	r2, #1
 8008bd0:	9204      	str	r2, [sp, #16]
 8008bd2:	2230      	movs	r2, #48	@ 0x30
 8008bd4:	f88a 2000 	strb.w	r2, [sl]
 8008bd8:	781a      	ldrb	r2, [r3, #0]
 8008bda:	3201      	adds	r2, #1
 8008bdc:	701a      	strb	r2, [r3, #0]
 8008bde:	e7bd      	b.n	8008b5c <_dtoa_r+0x65c>
 8008be0:	2200      	movs	r2, #0
 8008be2:	4b09      	ldr	r3, [pc, #36]	@ (8008c08 <_dtoa_r+0x708>)
 8008be4:	f7f7 fc78 	bl	80004d8 <__aeabi_dmul>
 8008be8:	2200      	movs	r2, #0
 8008bea:	2300      	movs	r3, #0
 8008bec:	4604      	mov	r4, r0
 8008bee:	460d      	mov	r5, r1
 8008bf0:	f7f7 feda 	bl	80009a8 <__aeabi_dcmpeq>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	f43f aebc 	beq.w	8008972 <_dtoa_r+0x472>
 8008bfa:	e6f1      	b.n	80089e0 <_dtoa_r+0x4e0>
 8008bfc:	0800f9b8 	.word	0x0800f9b8
 8008c00:	3fe00000 	.word	0x3fe00000
 8008c04:	3ff00000 	.word	0x3ff00000
 8008c08:	40240000 	.word	0x40240000
 8008c0c:	40140000 	.word	0x40140000
 8008c10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c12:	2a00      	cmp	r2, #0
 8008c14:	f000 80db 	beq.w	8008dce <_dtoa_r+0x8ce>
 8008c18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c1a:	2a01      	cmp	r2, #1
 8008c1c:	f300 80bf 	bgt.w	8008d9e <_dtoa_r+0x89e>
 8008c20:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c22:	2a00      	cmp	r2, #0
 8008c24:	f000 80b7 	beq.w	8008d96 <_dtoa_r+0x896>
 8008c28:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c2c:	4646      	mov	r6, r8
 8008c2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c32:	2101      	movs	r1, #1
 8008c34:	441a      	add	r2, r3
 8008c36:	4658      	mov	r0, fp
 8008c38:	4498      	add	r8, r3
 8008c3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c3c:	f000 fc1a 	bl	8009474 <__i2b>
 8008c40:	4605      	mov	r5, r0
 8008c42:	b15e      	cbz	r6, 8008c5c <_dtoa_r+0x75c>
 8008c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	dd08      	ble.n	8008c5c <_dtoa_r+0x75c>
 8008c4a:	42b3      	cmp	r3, r6
 8008c4c:	bfa8      	it	ge
 8008c4e:	4633      	movge	r3, r6
 8008c50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c52:	eba8 0803 	sub.w	r8, r8, r3
 8008c56:	1af6      	subs	r6, r6, r3
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c5e:	b1f3      	cbz	r3, 8008c9e <_dtoa_r+0x79e>
 8008c60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 80b7 	beq.w	8008dd6 <_dtoa_r+0x8d6>
 8008c68:	b18c      	cbz	r4, 8008c8e <_dtoa_r+0x78e>
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	4622      	mov	r2, r4
 8008c6e:	4658      	mov	r0, fp
 8008c70:	f000 fcbe 	bl	80095f0 <__pow5mult>
 8008c74:	464a      	mov	r2, r9
 8008c76:	4601      	mov	r1, r0
 8008c78:	4605      	mov	r5, r0
 8008c7a:	4658      	mov	r0, fp
 8008c7c:	f000 fc10 	bl	80094a0 <__multiply>
 8008c80:	4649      	mov	r1, r9
 8008c82:	9004      	str	r0, [sp, #16]
 8008c84:	4658      	mov	r0, fp
 8008c86:	f000 fb41 	bl	800930c <_Bfree>
 8008c8a:	9b04      	ldr	r3, [sp, #16]
 8008c8c:	4699      	mov	r9, r3
 8008c8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c90:	1b1a      	subs	r2, r3, r4
 8008c92:	d004      	beq.n	8008c9e <_dtoa_r+0x79e>
 8008c94:	4649      	mov	r1, r9
 8008c96:	4658      	mov	r0, fp
 8008c98:	f000 fcaa 	bl	80095f0 <__pow5mult>
 8008c9c:	4681      	mov	r9, r0
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	4658      	mov	r0, fp
 8008ca2:	f000 fbe7 	bl	8009474 <__i2b>
 8008ca6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ca8:	4604      	mov	r4, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 81c9 	beq.w	8009042 <_dtoa_r+0xb42>
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	4658      	mov	r0, fp
 8008cb6:	f000 fc9b 	bl	80095f0 <__pow5mult>
 8008cba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	f300 808f 	bgt.w	8008de2 <_dtoa_r+0x8e2>
 8008cc4:	9b02      	ldr	r3, [sp, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f040 8087 	bne.w	8008dda <_dtoa_r+0x8da>
 8008ccc:	9b03      	ldr	r3, [sp, #12]
 8008cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f040 8083 	bne.w	8008dde <_dtoa_r+0x8de>
 8008cd8:	9b03      	ldr	r3, [sp, #12]
 8008cda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cde:	0d1b      	lsrs	r3, r3, #20
 8008ce0:	051b      	lsls	r3, r3, #20
 8008ce2:	b12b      	cbz	r3, 8008cf0 <_dtoa_r+0x7f0>
 8008ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce6:	f108 0801 	add.w	r8, r8, #1
 8008cea:	3301      	adds	r3, #1
 8008cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cee:	2301      	movs	r3, #1
 8008cf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 81aa 	beq.w	800904e <_dtoa_r+0xb4e>
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d00:	6918      	ldr	r0, [r3, #16]
 8008d02:	f000 fb6b 	bl	80093dc <__hi0bits>
 8008d06:	f1c0 0020 	rsb	r0, r0, #32
 8008d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d0c:	4418      	add	r0, r3
 8008d0e:	f010 001f 	ands.w	r0, r0, #31
 8008d12:	d071      	beq.n	8008df8 <_dtoa_r+0x8f8>
 8008d14:	f1c0 0320 	rsb	r3, r0, #32
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	dd65      	ble.n	8008de8 <_dtoa_r+0x8e8>
 8008d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d1e:	f1c0 001c 	rsb	r0, r0, #28
 8008d22:	4403      	add	r3, r0
 8008d24:	4480      	add	r8, r0
 8008d26:	4406      	add	r6, r0
 8008d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d2a:	f1b8 0f00 	cmp.w	r8, #0
 8008d2e:	dd05      	ble.n	8008d3c <_dtoa_r+0x83c>
 8008d30:	4649      	mov	r1, r9
 8008d32:	4642      	mov	r2, r8
 8008d34:	4658      	mov	r0, fp
 8008d36:	f000 fcb5 	bl	80096a4 <__lshift>
 8008d3a:	4681      	mov	r9, r0
 8008d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	dd05      	ble.n	8008d4e <_dtoa_r+0x84e>
 8008d42:	4621      	mov	r1, r4
 8008d44:	461a      	mov	r2, r3
 8008d46:	4658      	mov	r0, fp
 8008d48:	f000 fcac 	bl	80096a4 <__lshift>
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d053      	beq.n	8008dfc <_dtoa_r+0x8fc>
 8008d54:	4621      	mov	r1, r4
 8008d56:	4648      	mov	r0, r9
 8008d58:	f000 fd10 	bl	800977c <__mcmp>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	da4d      	bge.n	8008dfc <_dtoa_r+0x8fc>
 8008d60:	1e7b      	subs	r3, r7, #1
 8008d62:	4649      	mov	r1, r9
 8008d64:	9304      	str	r3, [sp, #16]
 8008d66:	220a      	movs	r2, #10
 8008d68:	2300      	movs	r3, #0
 8008d6a:	4658      	mov	r0, fp
 8008d6c:	f000 faf0 	bl	8009350 <__multadd>
 8008d70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d72:	4681      	mov	r9, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f000 816c 	beq.w	8009052 <_dtoa_r+0xb52>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	4629      	mov	r1, r5
 8008d7e:	220a      	movs	r2, #10
 8008d80:	4658      	mov	r0, fp
 8008d82:	f000 fae5 	bl	8009350 <__multadd>
 8008d86:	9b08      	ldr	r3, [sp, #32]
 8008d88:	4605      	mov	r5, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	dc61      	bgt.n	8008e52 <_dtoa_r+0x952>
 8008d8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	dc3b      	bgt.n	8008e0c <_dtoa_r+0x90c>
 8008d94:	e05d      	b.n	8008e52 <_dtoa_r+0x952>
 8008d96:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d98:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008d9c:	e746      	b.n	8008c2c <_dtoa_r+0x72c>
 8008d9e:	9b07      	ldr	r3, [sp, #28]
 8008da0:	1e5c      	subs	r4, r3, #1
 8008da2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008da4:	42a3      	cmp	r3, r4
 8008da6:	bfbf      	itttt	lt
 8008da8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008daa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008dac:	1ae3      	sublt	r3, r4, r3
 8008dae:	18d2      	addlt	r2, r2, r3
 8008db0:	bfa8      	it	ge
 8008db2:	1b1c      	subge	r4, r3, r4
 8008db4:	9b07      	ldr	r3, [sp, #28]
 8008db6:	bfbe      	ittt	lt
 8008db8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008dba:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008dbc:	2400      	movlt	r4, #0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	bfb5      	itete	lt
 8008dc2:	eba8 0603 	sublt.w	r6, r8, r3
 8008dc6:	4646      	movge	r6, r8
 8008dc8:	2300      	movlt	r3, #0
 8008dca:	9b07      	ldrge	r3, [sp, #28]
 8008dcc:	e730      	b.n	8008c30 <_dtoa_r+0x730>
 8008dce:	4646      	mov	r6, r8
 8008dd0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008dd2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008dd4:	e735      	b.n	8008c42 <_dtoa_r+0x742>
 8008dd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008dd8:	e75c      	b.n	8008c94 <_dtoa_r+0x794>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	e788      	b.n	8008cf0 <_dtoa_r+0x7f0>
 8008dde:	9b02      	ldr	r3, [sp, #8]
 8008de0:	e786      	b.n	8008cf0 <_dtoa_r+0x7f0>
 8008de2:	2300      	movs	r3, #0
 8008de4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008de6:	e788      	b.n	8008cfa <_dtoa_r+0x7fa>
 8008de8:	d09f      	beq.n	8008d2a <_dtoa_r+0x82a>
 8008dea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dec:	331c      	adds	r3, #28
 8008dee:	441a      	add	r2, r3
 8008df0:	4498      	add	r8, r3
 8008df2:	441e      	add	r6, r3
 8008df4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008df6:	e798      	b.n	8008d2a <_dtoa_r+0x82a>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	e7f6      	b.n	8008dea <_dtoa_r+0x8ea>
 8008dfc:	9b07      	ldr	r3, [sp, #28]
 8008dfe:	9704      	str	r7, [sp, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	dc20      	bgt.n	8008e46 <_dtoa_r+0x946>
 8008e04:	9308      	str	r3, [sp, #32]
 8008e06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	dd1e      	ble.n	8008e4a <_dtoa_r+0x94a>
 8008e0c:	9b08      	ldr	r3, [sp, #32]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f47f aebc 	bne.w	8008b8c <_dtoa_r+0x68c>
 8008e14:	4621      	mov	r1, r4
 8008e16:	2205      	movs	r2, #5
 8008e18:	4658      	mov	r0, fp
 8008e1a:	f000 fa99 	bl	8009350 <__multadd>
 8008e1e:	4601      	mov	r1, r0
 8008e20:	4604      	mov	r4, r0
 8008e22:	4648      	mov	r0, r9
 8008e24:	f000 fcaa 	bl	800977c <__mcmp>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	f77f aeaf 	ble.w	8008b8c <_dtoa_r+0x68c>
 8008e2e:	2331      	movs	r3, #49	@ 0x31
 8008e30:	4656      	mov	r6, sl
 8008e32:	f806 3b01 	strb.w	r3, [r6], #1
 8008e36:	9b04      	ldr	r3, [sp, #16]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	9304      	str	r3, [sp, #16]
 8008e3c:	e6aa      	b.n	8008b94 <_dtoa_r+0x694>
 8008e3e:	9c07      	ldr	r4, [sp, #28]
 8008e40:	9704      	str	r7, [sp, #16]
 8008e42:	4625      	mov	r5, r4
 8008e44:	e7f3      	b.n	8008e2e <_dtoa_r+0x92e>
 8008e46:	9b07      	ldr	r3, [sp, #28]
 8008e48:	9308      	str	r3, [sp, #32]
 8008e4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 8104 	beq.w	800905a <_dtoa_r+0xb5a>
 8008e52:	2e00      	cmp	r6, #0
 8008e54:	dd05      	ble.n	8008e62 <_dtoa_r+0x962>
 8008e56:	4629      	mov	r1, r5
 8008e58:	4632      	mov	r2, r6
 8008e5a:	4658      	mov	r0, fp
 8008e5c:	f000 fc22 	bl	80096a4 <__lshift>
 8008e60:	4605      	mov	r5, r0
 8008e62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d05a      	beq.n	8008f1e <_dtoa_r+0xa1e>
 8008e68:	4658      	mov	r0, fp
 8008e6a:	6869      	ldr	r1, [r5, #4]
 8008e6c:	f000 fa0e 	bl	800928c <_Balloc>
 8008e70:	4606      	mov	r6, r0
 8008e72:	b928      	cbnz	r0, 8008e80 <_dtoa_r+0x980>
 8008e74:	4602      	mov	r2, r0
 8008e76:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e7a:	4b83      	ldr	r3, [pc, #524]	@ (8009088 <_dtoa_r+0xb88>)
 8008e7c:	f7ff bb54 	b.w	8008528 <_dtoa_r+0x28>
 8008e80:	692a      	ldr	r2, [r5, #16]
 8008e82:	f105 010c 	add.w	r1, r5, #12
 8008e86:	3202      	adds	r2, #2
 8008e88:	0092      	lsls	r2, r2, #2
 8008e8a:	300c      	adds	r0, #12
 8008e8c:	f000 ffa8 	bl	8009de0 <memcpy>
 8008e90:	2201      	movs	r2, #1
 8008e92:	4631      	mov	r1, r6
 8008e94:	4658      	mov	r0, fp
 8008e96:	f000 fc05 	bl	80096a4 <__lshift>
 8008e9a:	462f      	mov	r7, r5
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	f10a 0301 	add.w	r3, sl, #1
 8008ea2:	9307      	str	r3, [sp, #28]
 8008ea4:	9b08      	ldr	r3, [sp, #32]
 8008ea6:	4453      	add	r3, sl
 8008ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008eaa:	9b02      	ldr	r3, [sp, #8]
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008eb2:	9b07      	ldr	r3, [sp, #28]
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	4648      	mov	r0, r9
 8008eba:	9302      	str	r3, [sp, #8]
 8008ebc:	f7ff fa95 	bl	80083ea <quorem>
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	9008      	str	r0, [sp, #32]
 8008ec4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008ec8:	4648      	mov	r0, r9
 8008eca:	f000 fc57 	bl	800977c <__mcmp>
 8008ece:	462a      	mov	r2, r5
 8008ed0:	9009      	str	r0, [sp, #36]	@ 0x24
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	4658      	mov	r0, fp
 8008ed6:	f000 fc6d 	bl	80097b4 <__mdiff>
 8008eda:	68c2      	ldr	r2, [r0, #12]
 8008edc:	4606      	mov	r6, r0
 8008ede:	bb02      	cbnz	r2, 8008f22 <_dtoa_r+0xa22>
 8008ee0:	4601      	mov	r1, r0
 8008ee2:	4648      	mov	r0, r9
 8008ee4:	f000 fc4a 	bl	800977c <__mcmp>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	4631      	mov	r1, r6
 8008eec:	4658      	mov	r0, fp
 8008eee:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ef0:	f000 fa0c 	bl	800930c <_Bfree>
 8008ef4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008ef6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008ef8:	9e07      	ldr	r6, [sp, #28]
 8008efa:	ea43 0102 	orr.w	r1, r3, r2
 8008efe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f00:	4319      	orrs	r1, r3
 8008f02:	d110      	bne.n	8008f26 <_dtoa_r+0xa26>
 8008f04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f08:	d029      	beq.n	8008f5e <_dtoa_r+0xa5e>
 8008f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	dd02      	ble.n	8008f16 <_dtoa_r+0xa16>
 8008f10:	9b08      	ldr	r3, [sp, #32]
 8008f12:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008f16:	9b02      	ldr	r3, [sp, #8]
 8008f18:	f883 8000 	strb.w	r8, [r3]
 8008f1c:	e63b      	b.n	8008b96 <_dtoa_r+0x696>
 8008f1e:	4628      	mov	r0, r5
 8008f20:	e7bb      	b.n	8008e9a <_dtoa_r+0x99a>
 8008f22:	2201      	movs	r2, #1
 8008f24:	e7e1      	b.n	8008eea <_dtoa_r+0x9ea>
 8008f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	db04      	blt.n	8008f36 <_dtoa_r+0xa36>
 8008f2c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008f2e:	430b      	orrs	r3, r1
 8008f30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f32:	430b      	orrs	r3, r1
 8008f34:	d120      	bne.n	8008f78 <_dtoa_r+0xa78>
 8008f36:	2a00      	cmp	r2, #0
 8008f38:	dded      	ble.n	8008f16 <_dtoa_r+0xa16>
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	4658      	mov	r0, fp
 8008f40:	f000 fbb0 	bl	80096a4 <__lshift>
 8008f44:	4621      	mov	r1, r4
 8008f46:	4681      	mov	r9, r0
 8008f48:	f000 fc18 	bl	800977c <__mcmp>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	dc03      	bgt.n	8008f58 <_dtoa_r+0xa58>
 8008f50:	d1e1      	bne.n	8008f16 <_dtoa_r+0xa16>
 8008f52:	f018 0f01 	tst.w	r8, #1
 8008f56:	d0de      	beq.n	8008f16 <_dtoa_r+0xa16>
 8008f58:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f5c:	d1d8      	bne.n	8008f10 <_dtoa_r+0xa10>
 8008f5e:	2339      	movs	r3, #57	@ 0x39
 8008f60:	9a02      	ldr	r2, [sp, #8]
 8008f62:	7013      	strb	r3, [r2, #0]
 8008f64:	4633      	mov	r3, r6
 8008f66:	461e      	mov	r6, r3
 8008f68:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	2a39      	cmp	r2, #57	@ 0x39
 8008f70:	d052      	beq.n	8009018 <_dtoa_r+0xb18>
 8008f72:	3201      	adds	r2, #1
 8008f74:	701a      	strb	r2, [r3, #0]
 8008f76:	e60e      	b.n	8008b96 <_dtoa_r+0x696>
 8008f78:	2a00      	cmp	r2, #0
 8008f7a:	dd07      	ble.n	8008f8c <_dtoa_r+0xa8c>
 8008f7c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f80:	d0ed      	beq.n	8008f5e <_dtoa_r+0xa5e>
 8008f82:	9a02      	ldr	r2, [sp, #8]
 8008f84:	f108 0301 	add.w	r3, r8, #1
 8008f88:	7013      	strb	r3, [r2, #0]
 8008f8a:	e604      	b.n	8008b96 <_dtoa_r+0x696>
 8008f8c:	9b07      	ldr	r3, [sp, #28]
 8008f8e:	9a07      	ldr	r2, [sp, #28]
 8008f90:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008f94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d028      	beq.n	8008fec <_dtoa_r+0xaec>
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	220a      	movs	r2, #10
 8008fa0:	4658      	mov	r0, fp
 8008fa2:	f000 f9d5 	bl	8009350 <__multadd>
 8008fa6:	42af      	cmp	r7, r5
 8008fa8:	4681      	mov	r9, r0
 8008faa:	f04f 0300 	mov.w	r3, #0
 8008fae:	f04f 020a 	mov.w	r2, #10
 8008fb2:	4639      	mov	r1, r7
 8008fb4:	4658      	mov	r0, fp
 8008fb6:	d107      	bne.n	8008fc8 <_dtoa_r+0xac8>
 8008fb8:	f000 f9ca 	bl	8009350 <__multadd>
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	4605      	mov	r5, r0
 8008fc0:	9b07      	ldr	r3, [sp, #28]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	9307      	str	r3, [sp, #28]
 8008fc6:	e774      	b.n	8008eb2 <_dtoa_r+0x9b2>
 8008fc8:	f000 f9c2 	bl	8009350 <__multadd>
 8008fcc:	4629      	mov	r1, r5
 8008fce:	4607      	mov	r7, r0
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	220a      	movs	r2, #10
 8008fd4:	4658      	mov	r0, fp
 8008fd6:	f000 f9bb 	bl	8009350 <__multadd>
 8008fda:	4605      	mov	r5, r0
 8008fdc:	e7f0      	b.n	8008fc0 <_dtoa_r+0xac0>
 8008fde:	9b08      	ldr	r3, [sp, #32]
 8008fe0:	2700      	movs	r7, #0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	bfcc      	ite	gt
 8008fe6:	461e      	movgt	r6, r3
 8008fe8:	2601      	movle	r6, #1
 8008fea:	4456      	add	r6, sl
 8008fec:	4649      	mov	r1, r9
 8008fee:	2201      	movs	r2, #1
 8008ff0:	4658      	mov	r0, fp
 8008ff2:	f000 fb57 	bl	80096a4 <__lshift>
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	4681      	mov	r9, r0
 8008ffa:	f000 fbbf 	bl	800977c <__mcmp>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	dcb0      	bgt.n	8008f64 <_dtoa_r+0xa64>
 8009002:	d102      	bne.n	800900a <_dtoa_r+0xb0a>
 8009004:	f018 0f01 	tst.w	r8, #1
 8009008:	d1ac      	bne.n	8008f64 <_dtoa_r+0xa64>
 800900a:	4633      	mov	r3, r6
 800900c:	461e      	mov	r6, r3
 800900e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009012:	2a30      	cmp	r2, #48	@ 0x30
 8009014:	d0fa      	beq.n	800900c <_dtoa_r+0xb0c>
 8009016:	e5be      	b.n	8008b96 <_dtoa_r+0x696>
 8009018:	459a      	cmp	sl, r3
 800901a:	d1a4      	bne.n	8008f66 <_dtoa_r+0xa66>
 800901c:	9b04      	ldr	r3, [sp, #16]
 800901e:	3301      	adds	r3, #1
 8009020:	9304      	str	r3, [sp, #16]
 8009022:	2331      	movs	r3, #49	@ 0x31
 8009024:	f88a 3000 	strb.w	r3, [sl]
 8009028:	e5b5      	b.n	8008b96 <_dtoa_r+0x696>
 800902a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800902c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800908c <_dtoa_r+0xb8c>
 8009030:	b11b      	cbz	r3, 800903a <_dtoa_r+0xb3a>
 8009032:	f10a 0308 	add.w	r3, sl, #8
 8009036:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009038:	6013      	str	r3, [r2, #0]
 800903a:	4650      	mov	r0, sl
 800903c:	b017      	add	sp, #92	@ 0x5c
 800903e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009042:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009044:	2b01      	cmp	r3, #1
 8009046:	f77f ae3d 	ble.w	8008cc4 <_dtoa_r+0x7c4>
 800904a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800904c:	930a      	str	r3, [sp, #40]	@ 0x28
 800904e:	2001      	movs	r0, #1
 8009050:	e65b      	b.n	8008d0a <_dtoa_r+0x80a>
 8009052:	9b08      	ldr	r3, [sp, #32]
 8009054:	2b00      	cmp	r3, #0
 8009056:	f77f aed6 	ble.w	8008e06 <_dtoa_r+0x906>
 800905a:	4656      	mov	r6, sl
 800905c:	4621      	mov	r1, r4
 800905e:	4648      	mov	r0, r9
 8009060:	f7ff f9c3 	bl	80083ea <quorem>
 8009064:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009068:	9b08      	ldr	r3, [sp, #32]
 800906a:	f806 8b01 	strb.w	r8, [r6], #1
 800906e:	eba6 020a 	sub.w	r2, r6, sl
 8009072:	4293      	cmp	r3, r2
 8009074:	ddb3      	ble.n	8008fde <_dtoa_r+0xade>
 8009076:	4649      	mov	r1, r9
 8009078:	2300      	movs	r3, #0
 800907a:	220a      	movs	r2, #10
 800907c:	4658      	mov	r0, fp
 800907e:	f000 f967 	bl	8009350 <__multadd>
 8009082:	4681      	mov	r9, r0
 8009084:	e7ea      	b.n	800905c <_dtoa_r+0xb5c>
 8009086:	bf00      	nop
 8009088:	0800f916 	.word	0x0800f916
 800908c:	0800f89a 	.word	0x0800f89a

08009090 <_free_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	4605      	mov	r5, r0
 8009094:	2900      	cmp	r1, #0
 8009096:	d040      	beq.n	800911a <_free_r+0x8a>
 8009098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800909c:	1f0c      	subs	r4, r1, #4
 800909e:	2b00      	cmp	r3, #0
 80090a0:	bfb8      	it	lt
 80090a2:	18e4      	addlt	r4, r4, r3
 80090a4:	f000 f8e6 	bl	8009274 <__malloc_lock>
 80090a8:	4a1c      	ldr	r2, [pc, #112]	@ (800911c <_free_r+0x8c>)
 80090aa:	6813      	ldr	r3, [r2, #0]
 80090ac:	b933      	cbnz	r3, 80090bc <_free_r+0x2c>
 80090ae:	6063      	str	r3, [r4, #4]
 80090b0:	6014      	str	r4, [r2, #0]
 80090b2:	4628      	mov	r0, r5
 80090b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090b8:	f000 b8e2 	b.w	8009280 <__malloc_unlock>
 80090bc:	42a3      	cmp	r3, r4
 80090be:	d908      	bls.n	80090d2 <_free_r+0x42>
 80090c0:	6820      	ldr	r0, [r4, #0]
 80090c2:	1821      	adds	r1, r4, r0
 80090c4:	428b      	cmp	r3, r1
 80090c6:	bf01      	itttt	eq
 80090c8:	6819      	ldreq	r1, [r3, #0]
 80090ca:	685b      	ldreq	r3, [r3, #4]
 80090cc:	1809      	addeq	r1, r1, r0
 80090ce:	6021      	streq	r1, [r4, #0]
 80090d0:	e7ed      	b.n	80090ae <_free_r+0x1e>
 80090d2:	461a      	mov	r2, r3
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	b10b      	cbz	r3, 80090dc <_free_r+0x4c>
 80090d8:	42a3      	cmp	r3, r4
 80090da:	d9fa      	bls.n	80090d2 <_free_r+0x42>
 80090dc:	6811      	ldr	r1, [r2, #0]
 80090de:	1850      	adds	r0, r2, r1
 80090e0:	42a0      	cmp	r0, r4
 80090e2:	d10b      	bne.n	80090fc <_free_r+0x6c>
 80090e4:	6820      	ldr	r0, [r4, #0]
 80090e6:	4401      	add	r1, r0
 80090e8:	1850      	adds	r0, r2, r1
 80090ea:	4283      	cmp	r3, r0
 80090ec:	6011      	str	r1, [r2, #0]
 80090ee:	d1e0      	bne.n	80090b2 <_free_r+0x22>
 80090f0:	6818      	ldr	r0, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	4408      	add	r0, r1
 80090f6:	6010      	str	r0, [r2, #0]
 80090f8:	6053      	str	r3, [r2, #4]
 80090fa:	e7da      	b.n	80090b2 <_free_r+0x22>
 80090fc:	d902      	bls.n	8009104 <_free_r+0x74>
 80090fe:	230c      	movs	r3, #12
 8009100:	602b      	str	r3, [r5, #0]
 8009102:	e7d6      	b.n	80090b2 <_free_r+0x22>
 8009104:	6820      	ldr	r0, [r4, #0]
 8009106:	1821      	adds	r1, r4, r0
 8009108:	428b      	cmp	r3, r1
 800910a:	bf01      	itttt	eq
 800910c:	6819      	ldreq	r1, [r3, #0]
 800910e:	685b      	ldreq	r3, [r3, #4]
 8009110:	1809      	addeq	r1, r1, r0
 8009112:	6021      	streq	r1, [r4, #0]
 8009114:	6063      	str	r3, [r4, #4]
 8009116:	6054      	str	r4, [r2, #4]
 8009118:	e7cb      	b.n	80090b2 <_free_r+0x22>
 800911a:	bd38      	pop	{r3, r4, r5, pc}
 800911c:	20001c7c 	.word	0x20001c7c

08009120 <malloc>:
 8009120:	4b02      	ldr	r3, [pc, #8]	@ (800912c <malloc+0xc>)
 8009122:	4601      	mov	r1, r0
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	f000 b825 	b.w	8009174 <_malloc_r>
 800912a:	bf00      	nop
 800912c:	20000080 	.word	0x20000080

08009130 <sbrk_aligned>:
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	4e0f      	ldr	r6, [pc, #60]	@ (8009170 <sbrk_aligned+0x40>)
 8009134:	460c      	mov	r4, r1
 8009136:	6831      	ldr	r1, [r6, #0]
 8009138:	4605      	mov	r5, r0
 800913a:	b911      	cbnz	r1, 8009142 <sbrk_aligned+0x12>
 800913c:	f000 fe40 	bl	8009dc0 <_sbrk_r>
 8009140:	6030      	str	r0, [r6, #0]
 8009142:	4621      	mov	r1, r4
 8009144:	4628      	mov	r0, r5
 8009146:	f000 fe3b 	bl	8009dc0 <_sbrk_r>
 800914a:	1c43      	adds	r3, r0, #1
 800914c:	d103      	bne.n	8009156 <sbrk_aligned+0x26>
 800914e:	f04f 34ff 	mov.w	r4, #4294967295
 8009152:	4620      	mov	r0, r4
 8009154:	bd70      	pop	{r4, r5, r6, pc}
 8009156:	1cc4      	adds	r4, r0, #3
 8009158:	f024 0403 	bic.w	r4, r4, #3
 800915c:	42a0      	cmp	r0, r4
 800915e:	d0f8      	beq.n	8009152 <sbrk_aligned+0x22>
 8009160:	1a21      	subs	r1, r4, r0
 8009162:	4628      	mov	r0, r5
 8009164:	f000 fe2c 	bl	8009dc0 <_sbrk_r>
 8009168:	3001      	adds	r0, #1
 800916a:	d1f2      	bne.n	8009152 <sbrk_aligned+0x22>
 800916c:	e7ef      	b.n	800914e <sbrk_aligned+0x1e>
 800916e:	bf00      	nop
 8009170:	20001c78 	.word	0x20001c78

08009174 <_malloc_r>:
 8009174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009178:	1ccd      	adds	r5, r1, #3
 800917a:	f025 0503 	bic.w	r5, r5, #3
 800917e:	3508      	adds	r5, #8
 8009180:	2d0c      	cmp	r5, #12
 8009182:	bf38      	it	cc
 8009184:	250c      	movcc	r5, #12
 8009186:	2d00      	cmp	r5, #0
 8009188:	4606      	mov	r6, r0
 800918a:	db01      	blt.n	8009190 <_malloc_r+0x1c>
 800918c:	42a9      	cmp	r1, r5
 800918e:	d904      	bls.n	800919a <_malloc_r+0x26>
 8009190:	230c      	movs	r3, #12
 8009192:	6033      	str	r3, [r6, #0]
 8009194:	2000      	movs	r0, #0
 8009196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800919a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009270 <_malloc_r+0xfc>
 800919e:	f000 f869 	bl	8009274 <__malloc_lock>
 80091a2:	f8d8 3000 	ldr.w	r3, [r8]
 80091a6:	461c      	mov	r4, r3
 80091a8:	bb44      	cbnz	r4, 80091fc <_malloc_r+0x88>
 80091aa:	4629      	mov	r1, r5
 80091ac:	4630      	mov	r0, r6
 80091ae:	f7ff ffbf 	bl	8009130 <sbrk_aligned>
 80091b2:	1c43      	adds	r3, r0, #1
 80091b4:	4604      	mov	r4, r0
 80091b6:	d158      	bne.n	800926a <_malloc_r+0xf6>
 80091b8:	f8d8 4000 	ldr.w	r4, [r8]
 80091bc:	4627      	mov	r7, r4
 80091be:	2f00      	cmp	r7, #0
 80091c0:	d143      	bne.n	800924a <_malloc_r+0xd6>
 80091c2:	2c00      	cmp	r4, #0
 80091c4:	d04b      	beq.n	800925e <_malloc_r+0xea>
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	4639      	mov	r1, r7
 80091ca:	4630      	mov	r0, r6
 80091cc:	eb04 0903 	add.w	r9, r4, r3
 80091d0:	f000 fdf6 	bl	8009dc0 <_sbrk_r>
 80091d4:	4581      	cmp	r9, r0
 80091d6:	d142      	bne.n	800925e <_malloc_r+0xea>
 80091d8:	6821      	ldr	r1, [r4, #0]
 80091da:	4630      	mov	r0, r6
 80091dc:	1a6d      	subs	r5, r5, r1
 80091de:	4629      	mov	r1, r5
 80091e0:	f7ff ffa6 	bl	8009130 <sbrk_aligned>
 80091e4:	3001      	adds	r0, #1
 80091e6:	d03a      	beq.n	800925e <_malloc_r+0xea>
 80091e8:	6823      	ldr	r3, [r4, #0]
 80091ea:	442b      	add	r3, r5
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	f8d8 3000 	ldr.w	r3, [r8]
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	bb62      	cbnz	r2, 8009250 <_malloc_r+0xdc>
 80091f6:	f8c8 7000 	str.w	r7, [r8]
 80091fa:	e00f      	b.n	800921c <_malloc_r+0xa8>
 80091fc:	6822      	ldr	r2, [r4, #0]
 80091fe:	1b52      	subs	r2, r2, r5
 8009200:	d420      	bmi.n	8009244 <_malloc_r+0xd0>
 8009202:	2a0b      	cmp	r2, #11
 8009204:	d917      	bls.n	8009236 <_malloc_r+0xc2>
 8009206:	1961      	adds	r1, r4, r5
 8009208:	42a3      	cmp	r3, r4
 800920a:	6025      	str	r5, [r4, #0]
 800920c:	bf18      	it	ne
 800920e:	6059      	strne	r1, [r3, #4]
 8009210:	6863      	ldr	r3, [r4, #4]
 8009212:	bf08      	it	eq
 8009214:	f8c8 1000 	streq.w	r1, [r8]
 8009218:	5162      	str	r2, [r4, r5]
 800921a:	604b      	str	r3, [r1, #4]
 800921c:	4630      	mov	r0, r6
 800921e:	f000 f82f 	bl	8009280 <__malloc_unlock>
 8009222:	f104 000b 	add.w	r0, r4, #11
 8009226:	1d23      	adds	r3, r4, #4
 8009228:	f020 0007 	bic.w	r0, r0, #7
 800922c:	1ac2      	subs	r2, r0, r3
 800922e:	bf1c      	itt	ne
 8009230:	1a1b      	subne	r3, r3, r0
 8009232:	50a3      	strne	r3, [r4, r2]
 8009234:	e7af      	b.n	8009196 <_malloc_r+0x22>
 8009236:	6862      	ldr	r2, [r4, #4]
 8009238:	42a3      	cmp	r3, r4
 800923a:	bf0c      	ite	eq
 800923c:	f8c8 2000 	streq.w	r2, [r8]
 8009240:	605a      	strne	r2, [r3, #4]
 8009242:	e7eb      	b.n	800921c <_malloc_r+0xa8>
 8009244:	4623      	mov	r3, r4
 8009246:	6864      	ldr	r4, [r4, #4]
 8009248:	e7ae      	b.n	80091a8 <_malloc_r+0x34>
 800924a:	463c      	mov	r4, r7
 800924c:	687f      	ldr	r7, [r7, #4]
 800924e:	e7b6      	b.n	80091be <_malloc_r+0x4a>
 8009250:	461a      	mov	r2, r3
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	42a3      	cmp	r3, r4
 8009256:	d1fb      	bne.n	8009250 <_malloc_r+0xdc>
 8009258:	2300      	movs	r3, #0
 800925a:	6053      	str	r3, [r2, #4]
 800925c:	e7de      	b.n	800921c <_malloc_r+0xa8>
 800925e:	230c      	movs	r3, #12
 8009260:	4630      	mov	r0, r6
 8009262:	6033      	str	r3, [r6, #0]
 8009264:	f000 f80c 	bl	8009280 <__malloc_unlock>
 8009268:	e794      	b.n	8009194 <_malloc_r+0x20>
 800926a:	6005      	str	r5, [r0, #0]
 800926c:	e7d6      	b.n	800921c <_malloc_r+0xa8>
 800926e:	bf00      	nop
 8009270:	20001c7c 	.word	0x20001c7c

08009274 <__malloc_lock>:
 8009274:	4801      	ldr	r0, [pc, #4]	@ (800927c <__malloc_lock+0x8>)
 8009276:	f7ff b8a8 	b.w	80083ca <__retarget_lock_acquire_recursive>
 800927a:	bf00      	nop
 800927c:	20001c74 	.word	0x20001c74

08009280 <__malloc_unlock>:
 8009280:	4801      	ldr	r0, [pc, #4]	@ (8009288 <__malloc_unlock+0x8>)
 8009282:	f7ff b8a3 	b.w	80083cc <__retarget_lock_release_recursive>
 8009286:	bf00      	nop
 8009288:	20001c74 	.word	0x20001c74

0800928c <_Balloc>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	69c6      	ldr	r6, [r0, #28]
 8009290:	4604      	mov	r4, r0
 8009292:	460d      	mov	r5, r1
 8009294:	b976      	cbnz	r6, 80092b4 <_Balloc+0x28>
 8009296:	2010      	movs	r0, #16
 8009298:	f7ff ff42 	bl	8009120 <malloc>
 800929c:	4602      	mov	r2, r0
 800929e:	61e0      	str	r0, [r4, #28]
 80092a0:	b920      	cbnz	r0, 80092ac <_Balloc+0x20>
 80092a2:	216b      	movs	r1, #107	@ 0x6b
 80092a4:	4b17      	ldr	r3, [pc, #92]	@ (8009304 <_Balloc+0x78>)
 80092a6:	4818      	ldr	r0, [pc, #96]	@ (8009308 <_Balloc+0x7c>)
 80092a8:	f000 fda8 	bl	8009dfc <__assert_func>
 80092ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092b0:	6006      	str	r6, [r0, #0]
 80092b2:	60c6      	str	r6, [r0, #12]
 80092b4:	69e6      	ldr	r6, [r4, #28]
 80092b6:	68f3      	ldr	r3, [r6, #12]
 80092b8:	b183      	cbz	r3, 80092dc <_Balloc+0x50>
 80092ba:	69e3      	ldr	r3, [r4, #28]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092c2:	b9b8      	cbnz	r0, 80092f4 <_Balloc+0x68>
 80092c4:	2101      	movs	r1, #1
 80092c6:	fa01 f605 	lsl.w	r6, r1, r5
 80092ca:	1d72      	adds	r2, r6, #5
 80092cc:	4620      	mov	r0, r4
 80092ce:	0092      	lsls	r2, r2, #2
 80092d0:	f000 fdb2 	bl	8009e38 <_calloc_r>
 80092d4:	b160      	cbz	r0, 80092f0 <_Balloc+0x64>
 80092d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092da:	e00e      	b.n	80092fa <_Balloc+0x6e>
 80092dc:	2221      	movs	r2, #33	@ 0x21
 80092de:	2104      	movs	r1, #4
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fda9 	bl	8009e38 <_calloc_r>
 80092e6:	69e3      	ldr	r3, [r4, #28]
 80092e8:	60f0      	str	r0, [r6, #12]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e4      	bne.n	80092ba <_Balloc+0x2e>
 80092f0:	2000      	movs	r0, #0
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
 80092f4:	6802      	ldr	r2, [r0, #0]
 80092f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092fa:	2300      	movs	r3, #0
 80092fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009300:	e7f7      	b.n	80092f2 <_Balloc+0x66>
 8009302:	bf00      	nop
 8009304:	0800f8a7 	.word	0x0800f8a7
 8009308:	0800f927 	.word	0x0800f927

0800930c <_Bfree>:
 800930c:	b570      	push	{r4, r5, r6, lr}
 800930e:	69c6      	ldr	r6, [r0, #28]
 8009310:	4605      	mov	r5, r0
 8009312:	460c      	mov	r4, r1
 8009314:	b976      	cbnz	r6, 8009334 <_Bfree+0x28>
 8009316:	2010      	movs	r0, #16
 8009318:	f7ff ff02 	bl	8009120 <malloc>
 800931c:	4602      	mov	r2, r0
 800931e:	61e8      	str	r0, [r5, #28]
 8009320:	b920      	cbnz	r0, 800932c <_Bfree+0x20>
 8009322:	218f      	movs	r1, #143	@ 0x8f
 8009324:	4b08      	ldr	r3, [pc, #32]	@ (8009348 <_Bfree+0x3c>)
 8009326:	4809      	ldr	r0, [pc, #36]	@ (800934c <_Bfree+0x40>)
 8009328:	f000 fd68 	bl	8009dfc <__assert_func>
 800932c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009330:	6006      	str	r6, [r0, #0]
 8009332:	60c6      	str	r6, [r0, #12]
 8009334:	b13c      	cbz	r4, 8009346 <_Bfree+0x3a>
 8009336:	69eb      	ldr	r3, [r5, #28]
 8009338:	6862      	ldr	r2, [r4, #4]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009340:	6021      	str	r1, [r4, #0]
 8009342:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009346:	bd70      	pop	{r4, r5, r6, pc}
 8009348:	0800f8a7 	.word	0x0800f8a7
 800934c:	0800f927 	.word	0x0800f927

08009350 <__multadd>:
 8009350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009354:	4607      	mov	r7, r0
 8009356:	460c      	mov	r4, r1
 8009358:	461e      	mov	r6, r3
 800935a:	2000      	movs	r0, #0
 800935c:	690d      	ldr	r5, [r1, #16]
 800935e:	f101 0c14 	add.w	ip, r1, #20
 8009362:	f8dc 3000 	ldr.w	r3, [ip]
 8009366:	3001      	adds	r0, #1
 8009368:	b299      	uxth	r1, r3
 800936a:	fb02 6101 	mla	r1, r2, r1, r6
 800936e:	0c1e      	lsrs	r6, r3, #16
 8009370:	0c0b      	lsrs	r3, r1, #16
 8009372:	fb02 3306 	mla	r3, r2, r6, r3
 8009376:	b289      	uxth	r1, r1
 8009378:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800937c:	4285      	cmp	r5, r0
 800937e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009382:	f84c 1b04 	str.w	r1, [ip], #4
 8009386:	dcec      	bgt.n	8009362 <__multadd+0x12>
 8009388:	b30e      	cbz	r6, 80093ce <__multadd+0x7e>
 800938a:	68a3      	ldr	r3, [r4, #8]
 800938c:	42ab      	cmp	r3, r5
 800938e:	dc19      	bgt.n	80093c4 <__multadd+0x74>
 8009390:	6861      	ldr	r1, [r4, #4]
 8009392:	4638      	mov	r0, r7
 8009394:	3101      	adds	r1, #1
 8009396:	f7ff ff79 	bl	800928c <_Balloc>
 800939a:	4680      	mov	r8, r0
 800939c:	b928      	cbnz	r0, 80093aa <__multadd+0x5a>
 800939e:	4602      	mov	r2, r0
 80093a0:	21ba      	movs	r1, #186	@ 0xba
 80093a2:	4b0c      	ldr	r3, [pc, #48]	@ (80093d4 <__multadd+0x84>)
 80093a4:	480c      	ldr	r0, [pc, #48]	@ (80093d8 <__multadd+0x88>)
 80093a6:	f000 fd29 	bl	8009dfc <__assert_func>
 80093aa:	6922      	ldr	r2, [r4, #16]
 80093ac:	f104 010c 	add.w	r1, r4, #12
 80093b0:	3202      	adds	r2, #2
 80093b2:	0092      	lsls	r2, r2, #2
 80093b4:	300c      	adds	r0, #12
 80093b6:	f000 fd13 	bl	8009de0 <memcpy>
 80093ba:	4621      	mov	r1, r4
 80093bc:	4638      	mov	r0, r7
 80093be:	f7ff ffa5 	bl	800930c <_Bfree>
 80093c2:	4644      	mov	r4, r8
 80093c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093c8:	3501      	adds	r5, #1
 80093ca:	615e      	str	r6, [r3, #20]
 80093cc:	6125      	str	r5, [r4, #16]
 80093ce:	4620      	mov	r0, r4
 80093d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d4:	0800f916 	.word	0x0800f916
 80093d8:	0800f927 	.word	0x0800f927

080093dc <__hi0bits>:
 80093dc:	4603      	mov	r3, r0
 80093de:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80093e2:	bf3a      	itte	cc
 80093e4:	0403      	lslcc	r3, r0, #16
 80093e6:	2010      	movcc	r0, #16
 80093e8:	2000      	movcs	r0, #0
 80093ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093ee:	bf3c      	itt	cc
 80093f0:	021b      	lslcc	r3, r3, #8
 80093f2:	3008      	addcc	r0, #8
 80093f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093f8:	bf3c      	itt	cc
 80093fa:	011b      	lslcc	r3, r3, #4
 80093fc:	3004      	addcc	r0, #4
 80093fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009402:	bf3c      	itt	cc
 8009404:	009b      	lslcc	r3, r3, #2
 8009406:	3002      	addcc	r0, #2
 8009408:	2b00      	cmp	r3, #0
 800940a:	db05      	blt.n	8009418 <__hi0bits+0x3c>
 800940c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009410:	f100 0001 	add.w	r0, r0, #1
 8009414:	bf08      	it	eq
 8009416:	2020      	moveq	r0, #32
 8009418:	4770      	bx	lr

0800941a <__lo0bits>:
 800941a:	6803      	ldr	r3, [r0, #0]
 800941c:	4602      	mov	r2, r0
 800941e:	f013 0007 	ands.w	r0, r3, #7
 8009422:	d00b      	beq.n	800943c <__lo0bits+0x22>
 8009424:	07d9      	lsls	r1, r3, #31
 8009426:	d421      	bmi.n	800946c <__lo0bits+0x52>
 8009428:	0798      	lsls	r0, r3, #30
 800942a:	bf49      	itett	mi
 800942c:	085b      	lsrmi	r3, r3, #1
 800942e:	089b      	lsrpl	r3, r3, #2
 8009430:	2001      	movmi	r0, #1
 8009432:	6013      	strmi	r3, [r2, #0]
 8009434:	bf5c      	itt	pl
 8009436:	2002      	movpl	r0, #2
 8009438:	6013      	strpl	r3, [r2, #0]
 800943a:	4770      	bx	lr
 800943c:	b299      	uxth	r1, r3
 800943e:	b909      	cbnz	r1, 8009444 <__lo0bits+0x2a>
 8009440:	2010      	movs	r0, #16
 8009442:	0c1b      	lsrs	r3, r3, #16
 8009444:	b2d9      	uxtb	r1, r3
 8009446:	b909      	cbnz	r1, 800944c <__lo0bits+0x32>
 8009448:	3008      	adds	r0, #8
 800944a:	0a1b      	lsrs	r3, r3, #8
 800944c:	0719      	lsls	r1, r3, #28
 800944e:	bf04      	itt	eq
 8009450:	091b      	lsreq	r3, r3, #4
 8009452:	3004      	addeq	r0, #4
 8009454:	0799      	lsls	r1, r3, #30
 8009456:	bf04      	itt	eq
 8009458:	089b      	lsreq	r3, r3, #2
 800945a:	3002      	addeq	r0, #2
 800945c:	07d9      	lsls	r1, r3, #31
 800945e:	d403      	bmi.n	8009468 <__lo0bits+0x4e>
 8009460:	085b      	lsrs	r3, r3, #1
 8009462:	f100 0001 	add.w	r0, r0, #1
 8009466:	d003      	beq.n	8009470 <__lo0bits+0x56>
 8009468:	6013      	str	r3, [r2, #0]
 800946a:	4770      	bx	lr
 800946c:	2000      	movs	r0, #0
 800946e:	4770      	bx	lr
 8009470:	2020      	movs	r0, #32
 8009472:	4770      	bx	lr

08009474 <__i2b>:
 8009474:	b510      	push	{r4, lr}
 8009476:	460c      	mov	r4, r1
 8009478:	2101      	movs	r1, #1
 800947a:	f7ff ff07 	bl	800928c <_Balloc>
 800947e:	4602      	mov	r2, r0
 8009480:	b928      	cbnz	r0, 800948e <__i2b+0x1a>
 8009482:	f240 1145 	movw	r1, #325	@ 0x145
 8009486:	4b04      	ldr	r3, [pc, #16]	@ (8009498 <__i2b+0x24>)
 8009488:	4804      	ldr	r0, [pc, #16]	@ (800949c <__i2b+0x28>)
 800948a:	f000 fcb7 	bl	8009dfc <__assert_func>
 800948e:	2301      	movs	r3, #1
 8009490:	6144      	str	r4, [r0, #20]
 8009492:	6103      	str	r3, [r0, #16]
 8009494:	bd10      	pop	{r4, pc}
 8009496:	bf00      	nop
 8009498:	0800f916 	.word	0x0800f916
 800949c:	0800f927 	.word	0x0800f927

080094a0 <__multiply>:
 80094a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	4614      	mov	r4, r2
 80094a6:	690a      	ldr	r2, [r1, #16]
 80094a8:	6923      	ldr	r3, [r4, #16]
 80094aa:	460f      	mov	r7, r1
 80094ac:	429a      	cmp	r2, r3
 80094ae:	bfa2      	ittt	ge
 80094b0:	4623      	movge	r3, r4
 80094b2:	460c      	movge	r4, r1
 80094b4:	461f      	movge	r7, r3
 80094b6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80094ba:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80094be:	68a3      	ldr	r3, [r4, #8]
 80094c0:	6861      	ldr	r1, [r4, #4]
 80094c2:	eb0a 0609 	add.w	r6, sl, r9
 80094c6:	42b3      	cmp	r3, r6
 80094c8:	b085      	sub	sp, #20
 80094ca:	bfb8      	it	lt
 80094cc:	3101      	addlt	r1, #1
 80094ce:	f7ff fedd 	bl	800928c <_Balloc>
 80094d2:	b930      	cbnz	r0, 80094e2 <__multiply+0x42>
 80094d4:	4602      	mov	r2, r0
 80094d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80094da:	4b43      	ldr	r3, [pc, #268]	@ (80095e8 <__multiply+0x148>)
 80094dc:	4843      	ldr	r0, [pc, #268]	@ (80095ec <__multiply+0x14c>)
 80094de:	f000 fc8d 	bl	8009dfc <__assert_func>
 80094e2:	f100 0514 	add.w	r5, r0, #20
 80094e6:	462b      	mov	r3, r5
 80094e8:	2200      	movs	r2, #0
 80094ea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094ee:	4543      	cmp	r3, r8
 80094f0:	d321      	bcc.n	8009536 <__multiply+0x96>
 80094f2:	f107 0114 	add.w	r1, r7, #20
 80094f6:	f104 0214 	add.w	r2, r4, #20
 80094fa:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80094fe:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009502:	9302      	str	r3, [sp, #8]
 8009504:	1b13      	subs	r3, r2, r4
 8009506:	3b15      	subs	r3, #21
 8009508:	f023 0303 	bic.w	r3, r3, #3
 800950c:	3304      	adds	r3, #4
 800950e:	f104 0715 	add.w	r7, r4, #21
 8009512:	42ba      	cmp	r2, r7
 8009514:	bf38      	it	cc
 8009516:	2304      	movcc	r3, #4
 8009518:	9301      	str	r3, [sp, #4]
 800951a:	9b02      	ldr	r3, [sp, #8]
 800951c:	9103      	str	r1, [sp, #12]
 800951e:	428b      	cmp	r3, r1
 8009520:	d80c      	bhi.n	800953c <__multiply+0x9c>
 8009522:	2e00      	cmp	r6, #0
 8009524:	dd03      	ble.n	800952e <__multiply+0x8e>
 8009526:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800952a:	2b00      	cmp	r3, #0
 800952c:	d05a      	beq.n	80095e4 <__multiply+0x144>
 800952e:	6106      	str	r6, [r0, #16]
 8009530:	b005      	add	sp, #20
 8009532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009536:	f843 2b04 	str.w	r2, [r3], #4
 800953a:	e7d8      	b.n	80094ee <__multiply+0x4e>
 800953c:	f8b1 a000 	ldrh.w	sl, [r1]
 8009540:	f1ba 0f00 	cmp.w	sl, #0
 8009544:	d023      	beq.n	800958e <__multiply+0xee>
 8009546:	46a9      	mov	r9, r5
 8009548:	f04f 0c00 	mov.w	ip, #0
 800954c:	f104 0e14 	add.w	lr, r4, #20
 8009550:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009554:	f8d9 3000 	ldr.w	r3, [r9]
 8009558:	fa1f fb87 	uxth.w	fp, r7
 800955c:	b29b      	uxth	r3, r3
 800955e:	fb0a 330b 	mla	r3, sl, fp, r3
 8009562:	4463      	add	r3, ip
 8009564:	f8d9 c000 	ldr.w	ip, [r9]
 8009568:	0c3f      	lsrs	r7, r7, #16
 800956a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800956e:	fb0a c707 	mla	r7, sl, r7, ip
 8009572:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009576:	b29b      	uxth	r3, r3
 8009578:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800957c:	4572      	cmp	r2, lr
 800957e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009582:	f849 3b04 	str.w	r3, [r9], #4
 8009586:	d8e3      	bhi.n	8009550 <__multiply+0xb0>
 8009588:	9b01      	ldr	r3, [sp, #4]
 800958a:	f845 c003 	str.w	ip, [r5, r3]
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	3104      	adds	r1, #4
 8009592:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009596:	f1b9 0f00 	cmp.w	r9, #0
 800959a:	d021      	beq.n	80095e0 <__multiply+0x140>
 800959c:	46ae      	mov	lr, r5
 800959e:	f04f 0a00 	mov.w	sl, #0
 80095a2:	682b      	ldr	r3, [r5, #0]
 80095a4:	f104 0c14 	add.w	ip, r4, #20
 80095a8:	f8bc b000 	ldrh.w	fp, [ip]
 80095ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	fb09 770b 	mla	r7, r9, fp, r7
 80095b6:	4457      	add	r7, sl
 80095b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80095bc:	f84e 3b04 	str.w	r3, [lr], #4
 80095c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80095c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095c8:	f8be 3000 	ldrh.w	r3, [lr]
 80095cc:	4562      	cmp	r2, ip
 80095ce:	fb09 330a 	mla	r3, r9, sl, r3
 80095d2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80095d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095da:	d8e5      	bhi.n	80095a8 <__multiply+0x108>
 80095dc:	9f01      	ldr	r7, [sp, #4]
 80095de:	51eb      	str	r3, [r5, r7]
 80095e0:	3504      	adds	r5, #4
 80095e2:	e79a      	b.n	800951a <__multiply+0x7a>
 80095e4:	3e01      	subs	r6, #1
 80095e6:	e79c      	b.n	8009522 <__multiply+0x82>
 80095e8:	0800f916 	.word	0x0800f916
 80095ec:	0800f927 	.word	0x0800f927

080095f0 <__pow5mult>:
 80095f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f4:	4615      	mov	r5, r2
 80095f6:	f012 0203 	ands.w	r2, r2, #3
 80095fa:	4607      	mov	r7, r0
 80095fc:	460e      	mov	r6, r1
 80095fe:	d007      	beq.n	8009610 <__pow5mult+0x20>
 8009600:	4c25      	ldr	r4, [pc, #148]	@ (8009698 <__pow5mult+0xa8>)
 8009602:	3a01      	subs	r2, #1
 8009604:	2300      	movs	r3, #0
 8009606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800960a:	f7ff fea1 	bl	8009350 <__multadd>
 800960e:	4606      	mov	r6, r0
 8009610:	10ad      	asrs	r5, r5, #2
 8009612:	d03d      	beq.n	8009690 <__pow5mult+0xa0>
 8009614:	69fc      	ldr	r4, [r7, #28]
 8009616:	b97c      	cbnz	r4, 8009638 <__pow5mult+0x48>
 8009618:	2010      	movs	r0, #16
 800961a:	f7ff fd81 	bl	8009120 <malloc>
 800961e:	4602      	mov	r2, r0
 8009620:	61f8      	str	r0, [r7, #28]
 8009622:	b928      	cbnz	r0, 8009630 <__pow5mult+0x40>
 8009624:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009628:	4b1c      	ldr	r3, [pc, #112]	@ (800969c <__pow5mult+0xac>)
 800962a:	481d      	ldr	r0, [pc, #116]	@ (80096a0 <__pow5mult+0xb0>)
 800962c:	f000 fbe6 	bl	8009dfc <__assert_func>
 8009630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009634:	6004      	str	r4, [r0, #0]
 8009636:	60c4      	str	r4, [r0, #12]
 8009638:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800963c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009640:	b94c      	cbnz	r4, 8009656 <__pow5mult+0x66>
 8009642:	f240 2171 	movw	r1, #625	@ 0x271
 8009646:	4638      	mov	r0, r7
 8009648:	f7ff ff14 	bl	8009474 <__i2b>
 800964c:	2300      	movs	r3, #0
 800964e:	4604      	mov	r4, r0
 8009650:	f8c8 0008 	str.w	r0, [r8, #8]
 8009654:	6003      	str	r3, [r0, #0]
 8009656:	f04f 0900 	mov.w	r9, #0
 800965a:	07eb      	lsls	r3, r5, #31
 800965c:	d50a      	bpl.n	8009674 <__pow5mult+0x84>
 800965e:	4631      	mov	r1, r6
 8009660:	4622      	mov	r2, r4
 8009662:	4638      	mov	r0, r7
 8009664:	f7ff ff1c 	bl	80094a0 <__multiply>
 8009668:	4680      	mov	r8, r0
 800966a:	4631      	mov	r1, r6
 800966c:	4638      	mov	r0, r7
 800966e:	f7ff fe4d 	bl	800930c <_Bfree>
 8009672:	4646      	mov	r6, r8
 8009674:	106d      	asrs	r5, r5, #1
 8009676:	d00b      	beq.n	8009690 <__pow5mult+0xa0>
 8009678:	6820      	ldr	r0, [r4, #0]
 800967a:	b938      	cbnz	r0, 800968c <__pow5mult+0x9c>
 800967c:	4622      	mov	r2, r4
 800967e:	4621      	mov	r1, r4
 8009680:	4638      	mov	r0, r7
 8009682:	f7ff ff0d 	bl	80094a0 <__multiply>
 8009686:	6020      	str	r0, [r4, #0]
 8009688:	f8c0 9000 	str.w	r9, [r0]
 800968c:	4604      	mov	r4, r0
 800968e:	e7e4      	b.n	800965a <__pow5mult+0x6a>
 8009690:	4630      	mov	r0, r6
 8009692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009696:	bf00      	nop
 8009698:	0800f980 	.word	0x0800f980
 800969c:	0800f8a7 	.word	0x0800f8a7
 80096a0:	0800f927 	.word	0x0800f927

080096a4 <__lshift>:
 80096a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096a8:	460c      	mov	r4, r1
 80096aa:	4607      	mov	r7, r0
 80096ac:	4691      	mov	r9, r2
 80096ae:	6923      	ldr	r3, [r4, #16]
 80096b0:	6849      	ldr	r1, [r1, #4]
 80096b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096b6:	68a3      	ldr	r3, [r4, #8]
 80096b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096bc:	f108 0601 	add.w	r6, r8, #1
 80096c0:	42b3      	cmp	r3, r6
 80096c2:	db0b      	blt.n	80096dc <__lshift+0x38>
 80096c4:	4638      	mov	r0, r7
 80096c6:	f7ff fde1 	bl	800928c <_Balloc>
 80096ca:	4605      	mov	r5, r0
 80096cc:	b948      	cbnz	r0, 80096e2 <__lshift+0x3e>
 80096ce:	4602      	mov	r2, r0
 80096d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80096d4:	4b27      	ldr	r3, [pc, #156]	@ (8009774 <__lshift+0xd0>)
 80096d6:	4828      	ldr	r0, [pc, #160]	@ (8009778 <__lshift+0xd4>)
 80096d8:	f000 fb90 	bl	8009dfc <__assert_func>
 80096dc:	3101      	adds	r1, #1
 80096de:	005b      	lsls	r3, r3, #1
 80096e0:	e7ee      	b.n	80096c0 <__lshift+0x1c>
 80096e2:	2300      	movs	r3, #0
 80096e4:	f100 0114 	add.w	r1, r0, #20
 80096e8:	f100 0210 	add.w	r2, r0, #16
 80096ec:	4618      	mov	r0, r3
 80096ee:	4553      	cmp	r3, sl
 80096f0:	db33      	blt.n	800975a <__lshift+0xb6>
 80096f2:	6920      	ldr	r0, [r4, #16]
 80096f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096f8:	f104 0314 	add.w	r3, r4, #20
 80096fc:	f019 091f 	ands.w	r9, r9, #31
 8009700:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009704:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009708:	d02b      	beq.n	8009762 <__lshift+0xbe>
 800970a:	468a      	mov	sl, r1
 800970c:	2200      	movs	r2, #0
 800970e:	f1c9 0e20 	rsb	lr, r9, #32
 8009712:	6818      	ldr	r0, [r3, #0]
 8009714:	fa00 f009 	lsl.w	r0, r0, r9
 8009718:	4310      	orrs	r0, r2
 800971a:	f84a 0b04 	str.w	r0, [sl], #4
 800971e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009722:	459c      	cmp	ip, r3
 8009724:	fa22 f20e 	lsr.w	r2, r2, lr
 8009728:	d8f3      	bhi.n	8009712 <__lshift+0x6e>
 800972a:	ebac 0304 	sub.w	r3, ip, r4
 800972e:	3b15      	subs	r3, #21
 8009730:	f023 0303 	bic.w	r3, r3, #3
 8009734:	3304      	adds	r3, #4
 8009736:	f104 0015 	add.w	r0, r4, #21
 800973a:	4584      	cmp	ip, r0
 800973c:	bf38      	it	cc
 800973e:	2304      	movcc	r3, #4
 8009740:	50ca      	str	r2, [r1, r3]
 8009742:	b10a      	cbz	r2, 8009748 <__lshift+0xa4>
 8009744:	f108 0602 	add.w	r6, r8, #2
 8009748:	3e01      	subs	r6, #1
 800974a:	4638      	mov	r0, r7
 800974c:	4621      	mov	r1, r4
 800974e:	612e      	str	r6, [r5, #16]
 8009750:	f7ff fddc 	bl	800930c <_Bfree>
 8009754:	4628      	mov	r0, r5
 8009756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975a:	f842 0f04 	str.w	r0, [r2, #4]!
 800975e:	3301      	adds	r3, #1
 8009760:	e7c5      	b.n	80096ee <__lshift+0x4a>
 8009762:	3904      	subs	r1, #4
 8009764:	f853 2b04 	ldr.w	r2, [r3], #4
 8009768:	459c      	cmp	ip, r3
 800976a:	f841 2f04 	str.w	r2, [r1, #4]!
 800976e:	d8f9      	bhi.n	8009764 <__lshift+0xc0>
 8009770:	e7ea      	b.n	8009748 <__lshift+0xa4>
 8009772:	bf00      	nop
 8009774:	0800f916 	.word	0x0800f916
 8009778:	0800f927 	.word	0x0800f927

0800977c <__mcmp>:
 800977c:	4603      	mov	r3, r0
 800977e:	690a      	ldr	r2, [r1, #16]
 8009780:	6900      	ldr	r0, [r0, #16]
 8009782:	b530      	push	{r4, r5, lr}
 8009784:	1a80      	subs	r0, r0, r2
 8009786:	d10e      	bne.n	80097a6 <__mcmp+0x2a>
 8009788:	3314      	adds	r3, #20
 800978a:	3114      	adds	r1, #20
 800978c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009790:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009794:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009798:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800979c:	4295      	cmp	r5, r2
 800979e:	d003      	beq.n	80097a8 <__mcmp+0x2c>
 80097a0:	d205      	bcs.n	80097ae <__mcmp+0x32>
 80097a2:	f04f 30ff 	mov.w	r0, #4294967295
 80097a6:	bd30      	pop	{r4, r5, pc}
 80097a8:	42a3      	cmp	r3, r4
 80097aa:	d3f3      	bcc.n	8009794 <__mcmp+0x18>
 80097ac:	e7fb      	b.n	80097a6 <__mcmp+0x2a>
 80097ae:	2001      	movs	r0, #1
 80097b0:	e7f9      	b.n	80097a6 <__mcmp+0x2a>
	...

080097b4 <__mdiff>:
 80097b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	4689      	mov	r9, r1
 80097ba:	4606      	mov	r6, r0
 80097bc:	4611      	mov	r1, r2
 80097be:	4648      	mov	r0, r9
 80097c0:	4614      	mov	r4, r2
 80097c2:	f7ff ffdb 	bl	800977c <__mcmp>
 80097c6:	1e05      	subs	r5, r0, #0
 80097c8:	d112      	bne.n	80097f0 <__mdiff+0x3c>
 80097ca:	4629      	mov	r1, r5
 80097cc:	4630      	mov	r0, r6
 80097ce:	f7ff fd5d 	bl	800928c <_Balloc>
 80097d2:	4602      	mov	r2, r0
 80097d4:	b928      	cbnz	r0, 80097e2 <__mdiff+0x2e>
 80097d6:	f240 2137 	movw	r1, #567	@ 0x237
 80097da:	4b3e      	ldr	r3, [pc, #248]	@ (80098d4 <__mdiff+0x120>)
 80097dc:	483e      	ldr	r0, [pc, #248]	@ (80098d8 <__mdiff+0x124>)
 80097de:	f000 fb0d 	bl	8009dfc <__assert_func>
 80097e2:	2301      	movs	r3, #1
 80097e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097e8:	4610      	mov	r0, r2
 80097ea:	b003      	add	sp, #12
 80097ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097f0:	bfbc      	itt	lt
 80097f2:	464b      	movlt	r3, r9
 80097f4:	46a1      	movlt	r9, r4
 80097f6:	4630      	mov	r0, r6
 80097f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80097fc:	bfba      	itte	lt
 80097fe:	461c      	movlt	r4, r3
 8009800:	2501      	movlt	r5, #1
 8009802:	2500      	movge	r5, #0
 8009804:	f7ff fd42 	bl	800928c <_Balloc>
 8009808:	4602      	mov	r2, r0
 800980a:	b918      	cbnz	r0, 8009814 <__mdiff+0x60>
 800980c:	f240 2145 	movw	r1, #581	@ 0x245
 8009810:	4b30      	ldr	r3, [pc, #192]	@ (80098d4 <__mdiff+0x120>)
 8009812:	e7e3      	b.n	80097dc <__mdiff+0x28>
 8009814:	f100 0b14 	add.w	fp, r0, #20
 8009818:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800981c:	f109 0310 	add.w	r3, r9, #16
 8009820:	60c5      	str	r5, [r0, #12]
 8009822:	f04f 0c00 	mov.w	ip, #0
 8009826:	f109 0514 	add.w	r5, r9, #20
 800982a:	46d9      	mov	r9, fp
 800982c:	6926      	ldr	r6, [r4, #16]
 800982e:	f104 0e14 	add.w	lr, r4, #20
 8009832:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009836:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	9b01      	ldr	r3, [sp, #4]
 800983e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009842:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009846:	b281      	uxth	r1, r0
 8009848:	9301      	str	r3, [sp, #4]
 800984a:	fa1f f38a 	uxth.w	r3, sl
 800984e:	1a5b      	subs	r3, r3, r1
 8009850:	0c00      	lsrs	r0, r0, #16
 8009852:	4463      	add	r3, ip
 8009854:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009858:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800985c:	b29b      	uxth	r3, r3
 800985e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009862:	4576      	cmp	r6, lr
 8009864:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009868:	f849 3b04 	str.w	r3, [r9], #4
 800986c:	d8e6      	bhi.n	800983c <__mdiff+0x88>
 800986e:	1b33      	subs	r3, r6, r4
 8009870:	3b15      	subs	r3, #21
 8009872:	f023 0303 	bic.w	r3, r3, #3
 8009876:	3415      	adds	r4, #21
 8009878:	3304      	adds	r3, #4
 800987a:	42a6      	cmp	r6, r4
 800987c:	bf38      	it	cc
 800987e:	2304      	movcc	r3, #4
 8009880:	441d      	add	r5, r3
 8009882:	445b      	add	r3, fp
 8009884:	461e      	mov	r6, r3
 8009886:	462c      	mov	r4, r5
 8009888:	4544      	cmp	r4, r8
 800988a:	d30e      	bcc.n	80098aa <__mdiff+0xf6>
 800988c:	f108 0103 	add.w	r1, r8, #3
 8009890:	1b49      	subs	r1, r1, r5
 8009892:	f021 0103 	bic.w	r1, r1, #3
 8009896:	3d03      	subs	r5, #3
 8009898:	45a8      	cmp	r8, r5
 800989a:	bf38      	it	cc
 800989c:	2100      	movcc	r1, #0
 800989e:	440b      	add	r3, r1
 80098a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098a4:	b199      	cbz	r1, 80098ce <__mdiff+0x11a>
 80098a6:	6117      	str	r7, [r2, #16]
 80098a8:	e79e      	b.n	80097e8 <__mdiff+0x34>
 80098aa:	46e6      	mov	lr, ip
 80098ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80098b0:	fa1f fc81 	uxth.w	ip, r1
 80098b4:	44f4      	add	ip, lr
 80098b6:	0c08      	lsrs	r0, r1, #16
 80098b8:	4471      	add	r1, lr
 80098ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80098be:	b289      	uxth	r1, r1
 80098c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80098c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098c8:	f846 1b04 	str.w	r1, [r6], #4
 80098cc:	e7dc      	b.n	8009888 <__mdiff+0xd4>
 80098ce:	3f01      	subs	r7, #1
 80098d0:	e7e6      	b.n	80098a0 <__mdiff+0xec>
 80098d2:	bf00      	nop
 80098d4:	0800f916 	.word	0x0800f916
 80098d8:	0800f927 	.word	0x0800f927

080098dc <__d2b>:
 80098dc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80098e0:	2101      	movs	r1, #1
 80098e2:	4690      	mov	r8, r2
 80098e4:	4699      	mov	r9, r3
 80098e6:	9e08      	ldr	r6, [sp, #32]
 80098e8:	f7ff fcd0 	bl	800928c <_Balloc>
 80098ec:	4604      	mov	r4, r0
 80098ee:	b930      	cbnz	r0, 80098fe <__d2b+0x22>
 80098f0:	4602      	mov	r2, r0
 80098f2:	f240 310f 	movw	r1, #783	@ 0x30f
 80098f6:	4b23      	ldr	r3, [pc, #140]	@ (8009984 <__d2b+0xa8>)
 80098f8:	4823      	ldr	r0, [pc, #140]	@ (8009988 <__d2b+0xac>)
 80098fa:	f000 fa7f 	bl	8009dfc <__assert_func>
 80098fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009902:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009906:	b10d      	cbz	r5, 800990c <__d2b+0x30>
 8009908:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	f1b8 0300 	subs.w	r3, r8, #0
 8009912:	d024      	beq.n	800995e <__d2b+0x82>
 8009914:	4668      	mov	r0, sp
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	f7ff fd7f 	bl	800941a <__lo0bits>
 800991c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009920:	b1d8      	cbz	r0, 800995a <__d2b+0x7e>
 8009922:	f1c0 0320 	rsb	r3, r0, #32
 8009926:	fa02 f303 	lsl.w	r3, r2, r3
 800992a:	430b      	orrs	r3, r1
 800992c:	40c2      	lsrs	r2, r0
 800992e:	6163      	str	r3, [r4, #20]
 8009930:	9201      	str	r2, [sp, #4]
 8009932:	9b01      	ldr	r3, [sp, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	bf0c      	ite	eq
 8009938:	2201      	moveq	r2, #1
 800993a:	2202      	movne	r2, #2
 800993c:	61a3      	str	r3, [r4, #24]
 800993e:	6122      	str	r2, [r4, #16]
 8009940:	b1ad      	cbz	r5, 800996e <__d2b+0x92>
 8009942:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009946:	4405      	add	r5, r0
 8009948:	6035      	str	r5, [r6, #0]
 800994a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800994e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009950:	6018      	str	r0, [r3, #0]
 8009952:	4620      	mov	r0, r4
 8009954:	b002      	add	sp, #8
 8009956:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800995a:	6161      	str	r1, [r4, #20]
 800995c:	e7e9      	b.n	8009932 <__d2b+0x56>
 800995e:	a801      	add	r0, sp, #4
 8009960:	f7ff fd5b 	bl	800941a <__lo0bits>
 8009964:	9b01      	ldr	r3, [sp, #4]
 8009966:	2201      	movs	r2, #1
 8009968:	6163      	str	r3, [r4, #20]
 800996a:	3020      	adds	r0, #32
 800996c:	e7e7      	b.n	800993e <__d2b+0x62>
 800996e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009972:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009976:	6030      	str	r0, [r6, #0]
 8009978:	6918      	ldr	r0, [r3, #16]
 800997a:	f7ff fd2f 	bl	80093dc <__hi0bits>
 800997e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009982:	e7e4      	b.n	800994e <__d2b+0x72>
 8009984:	0800f916 	.word	0x0800f916
 8009988:	0800f927 	.word	0x0800f927

0800998c <__ssputs_r>:
 800998c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009990:	461f      	mov	r7, r3
 8009992:	688e      	ldr	r6, [r1, #8]
 8009994:	4682      	mov	sl, r0
 8009996:	42be      	cmp	r6, r7
 8009998:	460c      	mov	r4, r1
 800999a:	4690      	mov	r8, r2
 800999c:	680b      	ldr	r3, [r1, #0]
 800999e:	d82d      	bhi.n	80099fc <__ssputs_r+0x70>
 80099a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099a8:	d026      	beq.n	80099f8 <__ssputs_r+0x6c>
 80099aa:	6965      	ldr	r5, [r4, #20]
 80099ac:	6909      	ldr	r1, [r1, #16]
 80099ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099b2:	eba3 0901 	sub.w	r9, r3, r1
 80099b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099ba:	1c7b      	adds	r3, r7, #1
 80099bc:	444b      	add	r3, r9
 80099be:	106d      	asrs	r5, r5, #1
 80099c0:	429d      	cmp	r5, r3
 80099c2:	bf38      	it	cc
 80099c4:	461d      	movcc	r5, r3
 80099c6:	0553      	lsls	r3, r2, #21
 80099c8:	d527      	bpl.n	8009a1a <__ssputs_r+0x8e>
 80099ca:	4629      	mov	r1, r5
 80099cc:	f7ff fbd2 	bl	8009174 <_malloc_r>
 80099d0:	4606      	mov	r6, r0
 80099d2:	b360      	cbz	r0, 8009a2e <__ssputs_r+0xa2>
 80099d4:	464a      	mov	r2, r9
 80099d6:	6921      	ldr	r1, [r4, #16]
 80099d8:	f000 fa02 	bl	8009de0 <memcpy>
 80099dc:	89a3      	ldrh	r3, [r4, #12]
 80099de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099e6:	81a3      	strh	r3, [r4, #12]
 80099e8:	6126      	str	r6, [r4, #16]
 80099ea:	444e      	add	r6, r9
 80099ec:	6026      	str	r6, [r4, #0]
 80099ee:	463e      	mov	r6, r7
 80099f0:	6165      	str	r5, [r4, #20]
 80099f2:	eba5 0509 	sub.w	r5, r5, r9
 80099f6:	60a5      	str	r5, [r4, #8]
 80099f8:	42be      	cmp	r6, r7
 80099fa:	d900      	bls.n	80099fe <__ssputs_r+0x72>
 80099fc:	463e      	mov	r6, r7
 80099fe:	4632      	mov	r2, r6
 8009a00:	4641      	mov	r1, r8
 8009a02:	6820      	ldr	r0, [r4, #0]
 8009a04:	f000 f9c2 	bl	8009d8c <memmove>
 8009a08:	2000      	movs	r0, #0
 8009a0a:	68a3      	ldr	r3, [r4, #8]
 8009a0c:	1b9b      	subs	r3, r3, r6
 8009a0e:	60a3      	str	r3, [r4, #8]
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	4433      	add	r3, r6
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	f000 fa32 	bl	8009e84 <_realloc_r>
 8009a20:	4606      	mov	r6, r0
 8009a22:	2800      	cmp	r0, #0
 8009a24:	d1e0      	bne.n	80099e8 <__ssputs_r+0x5c>
 8009a26:	4650      	mov	r0, sl
 8009a28:	6921      	ldr	r1, [r4, #16]
 8009a2a:	f7ff fb31 	bl	8009090 <_free_r>
 8009a2e:	230c      	movs	r3, #12
 8009a30:	f8ca 3000 	str.w	r3, [sl]
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a3e:	81a3      	strh	r3, [r4, #12]
 8009a40:	e7e9      	b.n	8009a16 <__ssputs_r+0x8a>
	...

08009a44 <_svfiprintf_r>:
 8009a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a48:	4698      	mov	r8, r3
 8009a4a:	898b      	ldrh	r3, [r1, #12]
 8009a4c:	4607      	mov	r7, r0
 8009a4e:	061b      	lsls	r3, r3, #24
 8009a50:	460d      	mov	r5, r1
 8009a52:	4614      	mov	r4, r2
 8009a54:	b09d      	sub	sp, #116	@ 0x74
 8009a56:	d510      	bpl.n	8009a7a <_svfiprintf_r+0x36>
 8009a58:	690b      	ldr	r3, [r1, #16]
 8009a5a:	b973      	cbnz	r3, 8009a7a <_svfiprintf_r+0x36>
 8009a5c:	2140      	movs	r1, #64	@ 0x40
 8009a5e:	f7ff fb89 	bl	8009174 <_malloc_r>
 8009a62:	6028      	str	r0, [r5, #0]
 8009a64:	6128      	str	r0, [r5, #16]
 8009a66:	b930      	cbnz	r0, 8009a76 <_svfiprintf_r+0x32>
 8009a68:	230c      	movs	r3, #12
 8009a6a:	603b      	str	r3, [r7, #0]
 8009a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a70:	b01d      	add	sp, #116	@ 0x74
 8009a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a76:	2340      	movs	r3, #64	@ 0x40
 8009a78:	616b      	str	r3, [r5, #20]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a7e:	2320      	movs	r3, #32
 8009a80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a84:	2330      	movs	r3, #48	@ 0x30
 8009a86:	f04f 0901 	mov.w	r9, #1
 8009a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a8e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009c28 <_svfiprintf_r+0x1e4>
 8009a92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a96:	4623      	mov	r3, r4
 8009a98:	469a      	mov	sl, r3
 8009a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a9e:	b10a      	cbz	r2, 8009aa4 <_svfiprintf_r+0x60>
 8009aa0:	2a25      	cmp	r2, #37	@ 0x25
 8009aa2:	d1f9      	bne.n	8009a98 <_svfiprintf_r+0x54>
 8009aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8009aa8:	d00b      	beq.n	8009ac2 <_svfiprintf_r+0x7e>
 8009aaa:	465b      	mov	r3, fp
 8009aac:	4622      	mov	r2, r4
 8009aae:	4629      	mov	r1, r5
 8009ab0:	4638      	mov	r0, r7
 8009ab2:	f7ff ff6b 	bl	800998c <__ssputs_r>
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	f000 80a7 	beq.w	8009c0a <_svfiprintf_r+0x1c6>
 8009abc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009abe:	445a      	add	r2, fp
 8009ac0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 809f 	beq.w	8009c0a <_svfiprintf_r+0x1c6>
 8009acc:	2300      	movs	r3, #0
 8009ace:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ad6:	f10a 0a01 	add.w	sl, sl, #1
 8009ada:	9304      	str	r3, [sp, #16]
 8009adc:	9307      	str	r3, [sp, #28]
 8009ade:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ae2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ae4:	4654      	mov	r4, sl
 8009ae6:	2205      	movs	r2, #5
 8009ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aec:	484e      	ldr	r0, [pc, #312]	@ (8009c28 <_svfiprintf_r+0x1e4>)
 8009aee:	f7fe fc6e 	bl	80083ce <memchr>
 8009af2:	9a04      	ldr	r2, [sp, #16]
 8009af4:	b9d8      	cbnz	r0, 8009b2e <_svfiprintf_r+0xea>
 8009af6:	06d0      	lsls	r0, r2, #27
 8009af8:	bf44      	itt	mi
 8009afa:	2320      	movmi	r3, #32
 8009afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b00:	0711      	lsls	r1, r2, #28
 8009b02:	bf44      	itt	mi
 8009b04:	232b      	movmi	r3, #43	@ 0x2b
 8009b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b10:	d015      	beq.n	8009b3e <_svfiprintf_r+0xfa>
 8009b12:	4654      	mov	r4, sl
 8009b14:	2000      	movs	r0, #0
 8009b16:	f04f 0c0a 	mov.w	ip, #10
 8009b1a:	9a07      	ldr	r2, [sp, #28]
 8009b1c:	4621      	mov	r1, r4
 8009b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b22:	3b30      	subs	r3, #48	@ 0x30
 8009b24:	2b09      	cmp	r3, #9
 8009b26:	d94b      	bls.n	8009bc0 <_svfiprintf_r+0x17c>
 8009b28:	b1b0      	cbz	r0, 8009b58 <_svfiprintf_r+0x114>
 8009b2a:	9207      	str	r2, [sp, #28]
 8009b2c:	e014      	b.n	8009b58 <_svfiprintf_r+0x114>
 8009b2e:	eba0 0308 	sub.w	r3, r0, r8
 8009b32:	fa09 f303 	lsl.w	r3, r9, r3
 8009b36:	4313      	orrs	r3, r2
 8009b38:	46a2      	mov	sl, r4
 8009b3a:	9304      	str	r3, [sp, #16]
 8009b3c:	e7d2      	b.n	8009ae4 <_svfiprintf_r+0xa0>
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	1d19      	adds	r1, r3, #4
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	9103      	str	r1, [sp, #12]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bfbb      	ittet	lt
 8009b4a:	425b      	neglt	r3, r3
 8009b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b50:	9307      	strge	r3, [sp, #28]
 8009b52:	9307      	strlt	r3, [sp, #28]
 8009b54:	bfb8      	it	lt
 8009b56:	9204      	strlt	r2, [sp, #16]
 8009b58:	7823      	ldrb	r3, [r4, #0]
 8009b5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b5c:	d10a      	bne.n	8009b74 <_svfiprintf_r+0x130>
 8009b5e:	7863      	ldrb	r3, [r4, #1]
 8009b60:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b62:	d132      	bne.n	8009bca <_svfiprintf_r+0x186>
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	3402      	adds	r4, #2
 8009b68:	1d1a      	adds	r2, r3, #4
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	9203      	str	r2, [sp, #12]
 8009b6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b72:	9305      	str	r3, [sp, #20]
 8009b74:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009c2c <_svfiprintf_r+0x1e8>
 8009b78:	2203      	movs	r2, #3
 8009b7a:	4650      	mov	r0, sl
 8009b7c:	7821      	ldrb	r1, [r4, #0]
 8009b7e:	f7fe fc26 	bl	80083ce <memchr>
 8009b82:	b138      	cbz	r0, 8009b94 <_svfiprintf_r+0x150>
 8009b84:	2240      	movs	r2, #64	@ 0x40
 8009b86:	9b04      	ldr	r3, [sp, #16]
 8009b88:	eba0 000a 	sub.w	r0, r0, sl
 8009b8c:	4082      	lsls	r2, r0
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	3401      	adds	r4, #1
 8009b92:	9304      	str	r3, [sp, #16]
 8009b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b98:	2206      	movs	r2, #6
 8009b9a:	4825      	ldr	r0, [pc, #148]	@ (8009c30 <_svfiprintf_r+0x1ec>)
 8009b9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ba0:	f7fe fc15 	bl	80083ce <memchr>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d036      	beq.n	8009c16 <_svfiprintf_r+0x1d2>
 8009ba8:	4b22      	ldr	r3, [pc, #136]	@ (8009c34 <_svfiprintf_r+0x1f0>)
 8009baa:	bb1b      	cbnz	r3, 8009bf4 <_svfiprintf_r+0x1b0>
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	3307      	adds	r3, #7
 8009bb0:	f023 0307 	bic.w	r3, r3, #7
 8009bb4:	3308      	adds	r3, #8
 8009bb6:	9303      	str	r3, [sp, #12]
 8009bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bba:	4433      	add	r3, r6
 8009bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bbe:	e76a      	b.n	8009a96 <_svfiprintf_r+0x52>
 8009bc0:	460c      	mov	r4, r1
 8009bc2:	2001      	movs	r0, #1
 8009bc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bc8:	e7a8      	b.n	8009b1c <_svfiprintf_r+0xd8>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f04f 0c0a 	mov.w	ip, #10
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	3401      	adds	r4, #1
 8009bd4:	9305      	str	r3, [sp, #20]
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bdc:	3a30      	subs	r2, #48	@ 0x30
 8009bde:	2a09      	cmp	r2, #9
 8009be0:	d903      	bls.n	8009bea <_svfiprintf_r+0x1a6>
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d0c6      	beq.n	8009b74 <_svfiprintf_r+0x130>
 8009be6:	9105      	str	r1, [sp, #20]
 8009be8:	e7c4      	b.n	8009b74 <_svfiprintf_r+0x130>
 8009bea:	4604      	mov	r4, r0
 8009bec:	2301      	movs	r3, #1
 8009bee:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bf2:	e7f0      	b.n	8009bd6 <_svfiprintf_r+0x192>
 8009bf4:	ab03      	add	r3, sp, #12
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	462a      	mov	r2, r5
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8009c38 <_svfiprintf_r+0x1f4>)
 8009bfe:	a904      	add	r1, sp, #16
 8009c00:	f7fd fe82 	bl	8007908 <_printf_float>
 8009c04:	1c42      	adds	r2, r0, #1
 8009c06:	4606      	mov	r6, r0
 8009c08:	d1d6      	bne.n	8009bb8 <_svfiprintf_r+0x174>
 8009c0a:	89ab      	ldrh	r3, [r5, #12]
 8009c0c:	065b      	lsls	r3, r3, #25
 8009c0e:	f53f af2d 	bmi.w	8009a6c <_svfiprintf_r+0x28>
 8009c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c14:	e72c      	b.n	8009a70 <_svfiprintf_r+0x2c>
 8009c16:	ab03      	add	r3, sp, #12
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	462a      	mov	r2, r5
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	4b06      	ldr	r3, [pc, #24]	@ (8009c38 <_svfiprintf_r+0x1f4>)
 8009c20:	a904      	add	r1, sp, #16
 8009c22:	f7fe f90f 	bl	8007e44 <_printf_i>
 8009c26:	e7ed      	b.n	8009c04 <_svfiprintf_r+0x1c0>
 8009c28:	0800fa80 	.word	0x0800fa80
 8009c2c:	0800fa86 	.word	0x0800fa86
 8009c30:	0800fa8a 	.word	0x0800fa8a
 8009c34:	08007909 	.word	0x08007909
 8009c38:	0800998d 	.word	0x0800998d

08009c3c <__sflush_r>:
 8009c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c42:	0716      	lsls	r6, r2, #28
 8009c44:	4605      	mov	r5, r0
 8009c46:	460c      	mov	r4, r1
 8009c48:	d454      	bmi.n	8009cf4 <__sflush_r+0xb8>
 8009c4a:	684b      	ldr	r3, [r1, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	dc02      	bgt.n	8009c56 <__sflush_r+0x1a>
 8009c50:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	dd48      	ble.n	8009ce8 <__sflush_r+0xac>
 8009c56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c58:	2e00      	cmp	r6, #0
 8009c5a:	d045      	beq.n	8009ce8 <__sflush_r+0xac>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c62:	682f      	ldr	r7, [r5, #0]
 8009c64:	6a21      	ldr	r1, [r4, #32]
 8009c66:	602b      	str	r3, [r5, #0]
 8009c68:	d030      	beq.n	8009ccc <__sflush_r+0x90>
 8009c6a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c6c:	89a3      	ldrh	r3, [r4, #12]
 8009c6e:	0759      	lsls	r1, r3, #29
 8009c70:	d505      	bpl.n	8009c7e <__sflush_r+0x42>
 8009c72:	6863      	ldr	r3, [r4, #4]
 8009c74:	1ad2      	subs	r2, r2, r3
 8009c76:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c78:	b10b      	cbz	r3, 8009c7e <__sflush_r+0x42>
 8009c7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c7c:	1ad2      	subs	r2, r2, r3
 8009c7e:	2300      	movs	r3, #0
 8009c80:	4628      	mov	r0, r5
 8009c82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c84:	6a21      	ldr	r1, [r4, #32]
 8009c86:	47b0      	blx	r6
 8009c88:	1c43      	adds	r3, r0, #1
 8009c8a:	89a3      	ldrh	r3, [r4, #12]
 8009c8c:	d106      	bne.n	8009c9c <__sflush_r+0x60>
 8009c8e:	6829      	ldr	r1, [r5, #0]
 8009c90:	291d      	cmp	r1, #29
 8009c92:	d82b      	bhi.n	8009cec <__sflush_r+0xb0>
 8009c94:	4a28      	ldr	r2, [pc, #160]	@ (8009d38 <__sflush_r+0xfc>)
 8009c96:	410a      	asrs	r2, r1
 8009c98:	07d6      	lsls	r6, r2, #31
 8009c9a:	d427      	bmi.n	8009cec <__sflush_r+0xb0>
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	6062      	str	r2, [r4, #4]
 8009ca0:	6922      	ldr	r2, [r4, #16]
 8009ca2:	04d9      	lsls	r1, r3, #19
 8009ca4:	6022      	str	r2, [r4, #0]
 8009ca6:	d504      	bpl.n	8009cb2 <__sflush_r+0x76>
 8009ca8:	1c42      	adds	r2, r0, #1
 8009caa:	d101      	bne.n	8009cb0 <__sflush_r+0x74>
 8009cac:	682b      	ldr	r3, [r5, #0]
 8009cae:	b903      	cbnz	r3, 8009cb2 <__sflush_r+0x76>
 8009cb0:	6560      	str	r0, [r4, #84]	@ 0x54
 8009cb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cb4:	602f      	str	r7, [r5, #0]
 8009cb6:	b1b9      	cbz	r1, 8009ce8 <__sflush_r+0xac>
 8009cb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cbc:	4299      	cmp	r1, r3
 8009cbe:	d002      	beq.n	8009cc6 <__sflush_r+0x8a>
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f7ff f9e5 	bl	8009090 <_free_r>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cca:	e00d      	b.n	8009ce8 <__sflush_r+0xac>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	4628      	mov	r0, r5
 8009cd0:	47b0      	blx	r6
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	1c50      	adds	r0, r2, #1
 8009cd6:	d1c9      	bne.n	8009c6c <__sflush_r+0x30>
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d0c6      	beq.n	8009c6c <__sflush_r+0x30>
 8009cde:	2b1d      	cmp	r3, #29
 8009ce0:	d001      	beq.n	8009ce6 <__sflush_r+0xaa>
 8009ce2:	2b16      	cmp	r3, #22
 8009ce4:	d11d      	bne.n	8009d22 <__sflush_r+0xe6>
 8009ce6:	602f      	str	r7, [r5, #0]
 8009ce8:	2000      	movs	r0, #0
 8009cea:	e021      	b.n	8009d30 <__sflush_r+0xf4>
 8009cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cf0:	b21b      	sxth	r3, r3
 8009cf2:	e01a      	b.n	8009d2a <__sflush_r+0xee>
 8009cf4:	690f      	ldr	r7, [r1, #16]
 8009cf6:	2f00      	cmp	r7, #0
 8009cf8:	d0f6      	beq.n	8009ce8 <__sflush_r+0xac>
 8009cfa:	0793      	lsls	r3, r2, #30
 8009cfc:	bf18      	it	ne
 8009cfe:	2300      	movne	r3, #0
 8009d00:	680e      	ldr	r6, [r1, #0]
 8009d02:	bf08      	it	eq
 8009d04:	694b      	ldreq	r3, [r1, #20]
 8009d06:	1bf6      	subs	r6, r6, r7
 8009d08:	600f      	str	r7, [r1, #0]
 8009d0a:	608b      	str	r3, [r1, #8]
 8009d0c:	2e00      	cmp	r6, #0
 8009d0e:	ddeb      	ble.n	8009ce8 <__sflush_r+0xac>
 8009d10:	4633      	mov	r3, r6
 8009d12:	463a      	mov	r2, r7
 8009d14:	4628      	mov	r0, r5
 8009d16:	6a21      	ldr	r1, [r4, #32]
 8009d18:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009d1c:	47e0      	blx	ip
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	dc07      	bgt.n	8009d32 <__sflush_r+0xf6>
 8009d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d2e:	81a3      	strh	r3, [r4, #12]
 8009d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d32:	4407      	add	r7, r0
 8009d34:	1a36      	subs	r6, r6, r0
 8009d36:	e7e9      	b.n	8009d0c <__sflush_r+0xd0>
 8009d38:	dfbffffe 	.word	0xdfbffffe

08009d3c <_fflush_r>:
 8009d3c:	b538      	push	{r3, r4, r5, lr}
 8009d3e:	690b      	ldr	r3, [r1, #16]
 8009d40:	4605      	mov	r5, r0
 8009d42:	460c      	mov	r4, r1
 8009d44:	b913      	cbnz	r3, 8009d4c <_fflush_r+0x10>
 8009d46:	2500      	movs	r5, #0
 8009d48:	4628      	mov	r0, r5
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	b118      	cbz	r0, 8009d56 <_fflush_r+0x1a>
 8009d4e:	6a03      	ldr	r3, [r0, #32]
 8009d50:	b90b      	cbnz	r3, 8009d56 <_fflush_r+0x1a>
 8009d52:	f7fe fa23 	bl	800819c <__sinit>
 8009d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d0f3      	beq.n	8009d46 <_fflush_r+0xa>
 8009d5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d60:	07d0      	lsls	r0, r2, #31
 8009d62:	d404      	bmi.n	8009d6e <_fflush_r+0x32>
 8009d64:	0599      	lsls	r1, r3, #22
 8009d66:	d402      	bmi.n	8009d6e <_fflush_r+0x32>
 8009d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d6a:	f7fe fb2e 	bl	80083ca <__retarget_lock_acquire_recursive>
 8009d6e:	4628      	mov	r0, r5
 8009d70:	4621      	mov	r1, r4
 8009d72:	f7ff ff63 	bl	8009c3c <__sflush_r>
 8009d76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d78:	4605      	mov	r5, r0
 8009d7a:	07da      	lsls	r2, r3, #31
 8009d7c:	d4e4      	bmi.n	8009d48 <_fflush_r+0xc>
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	059b      	lsls	r3, r3, #22
 8009d82:	d4e1      	bmi.n	8009d48 <_fflush_r+0xc>
 8009d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d86:	f7fe fb21 	bl	80083cc <__retarget_lock_release_recursive>
 8009d8a:	e7dd      	b.n	8009d48 <_fflush_r+0xc>

08009d8c <memmove>:
 8009d8c:	4288      	cmp	r0, r1
 8009d8e:	b510      	push	{r4, lr}
 8009d90:	eb01 0402 	add.w	r4, r1, r2
 8009d94:	d902      	bls.n	8009d9c <memmove+0x10>
 8009d96:	4284      	cmp	r4, r0
 8009d98:	4623      	mov	r3, r4
 8009d9a:	d807      	bhi.n	8009dac <memmove+0x20>
 8009d9c:	1e43      	subs	r3, r0, #1
 8009d9e:	42a1      	cmp	r1, r4
 8009da0:	d008      	beq.n	8009db4 <memmove+0x28>
 8009da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009daa:	e7f8      	b.n	8009d9e <memmove+0x12>
 8009dac:	4601      	mov	r1, r0
 8009dae:	4402      	add	r2, r0
 8009db0:	428a      	cmp	r2, r1
 8009db2:	d100      	bne.n	8009db6 <memmove+0x2a>
 8009db4:	bd10      	pop	{r4, pc}
 8009db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dbe:	e7f7      	b.n	8009db0 <memmove+0x24>

08009dc0 <_sbrk_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	4d05      	ldr	r5, [pc, #20]	@ (8009ddc <_sbrk_r+0x1c>)
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	4608      	mov	r0, r1
 8009dca:	602b      	str	r3, [r5, #0]
 8009dcc:	f7fa f800 	bl	8003dd0 <_sbrk>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d102      	bne.n	8009dda <_sbrk_r+0x1a>
 8009dd4:	682b      	ldr	r3, [r5, #0]
 8009dd6:	b103      	cbz	r3, 8009dda <_sbrk_r+0x1a>
 8009dd8:	6023      	str	r3, [r4, #0]
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	20001c70 	.word	0x20001c70

08009de0 <memcpy>:
 8009de0:	440a      	add	r2, r1
 8009de2:	4291      	cmp	r1, r2
 8009de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009de8:	d100      	bne.n	8009dec <memcpy+0xc>
 8009dea:	4770      	bx	lr
 8009dec:	b510      	push	{r4, lr}
 8009dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009df2:	4291      	cmp	r1, r2
 8009df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009df8:	d1f9      	bne.n	8009dee <memcpy+0xe>
 8009dfa:	bd10      	pop	{r4, pc}

08009dfc <__assert_func>:
 8009dfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009dfe:	4614      	mov	r4, r2
 8009e00:	461a      	mov	r2, r3
 8009e02:	4b09      	ldr	r3, [pc, #36]	@ (8009e28 <__assert_func+0x2c>)
 8009e04:	4605      	mov	r5, r0
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68d8      	ldr	r0, [r3, #12]
 8009e0a:	b954      	cbnz	r4, 8009e22 <__assert_func+0x26>
 8009e0c:	4b07      	ldr	r3, [pc, #28]	@ (8009e2c <__assert_func+0x30>)
 8009e0e:	461c      	mov	r4, r3
 8009e10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e14:	9100      	str	r1, [sp, #0]
 8009e16:	462b      	mov	r3, r5
 8009e18:	4905      	ldr	r1, [pc, #20]	@ (8009e30 <__assert_func+0x34>)
 8009e1a:	f000 f86f 	bl	8009efc <fiprintf>
 8009e1e:	f000 f87f 	bl	8009f20 <abort>
 8009e22:	4b04      	ldr	r3, [pc, #16]	@ (8009e34 <__assert_func+0x38>)
 8009e24:	e7f4      	b.n	8009e10 <__assert_func+0x14>
 8009e26:	bf00      	nop
 8009e28:	20000080 	.word	0x20000080
 8009e2c:	0800fad6 	.word	0x0800fad6
 8009e30:	0800faa8 	.word	0x0800faa8
 8009e34:	0800fa9b 	.word	0x0800fa9b

08009e38 <_calloc_r>:
 8009e38:	b570      	push	{r4, r5, r6, lr}
 8009e3a:	fba1 5402 	umull	r5, r4, r1, r2
 8009e3e:	b93c      	cbnz	r4, 8009e50 <_calloc_r+0x18>
 8009e40:	4629      	mov	r1, r5
 8009e42:	f7ff f997 	bl	8009174 <_malloc_r>
 8009e46:	4606      	mov	r6, r0
 8009e48:	b928      	cbnz	r0, 8009e56 <_calloc_r+0x1e>
 8009e4a:	2600      	movs	r6, #0
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	bd70      	pop	{r4, r5, r6, pc}
 8009e50:	220c      	movs	r2, #12
 8009e52:	6002      	str	r2, [r0, #0]
 8009e54:	e7f9      	b.n	8009e4a <_calloc_r+0x12>
 8009e56:	462a      	mov	r2, r5
 8009e58:	4621      	mov	r1, r4
 8009e5a:	f7fe fa38 	bl	80082ce <memset>
 8009e5e:	e7f5      	b.n	8009e4c <_calloc_r+0x14>

08009e60 <__ascii_mbtowc>:
 8009e60:	b082      	sub	sp, #8
 8009e62:	b901      	cbnz	r1, 8009e66 <__ascii_mbtowc+0x6>
 8009e64:	a901      	add	r1, sp, #4
 8009e66:	b142      	cbz	r2, 8009e7a <__ascii_mbtowc+0x1a>
 8009e68:	b14b      	cbz	r3, 8009e7e <__ascii_mbtowc+0x1e>
 8009e6a:	7813      	ldrb	r3, [r2, #0]
 8009e6c:	600b      	str	r3, [r1, #0]
 8009e6e:	7812      	ldrb	r2, [r2, #0]
 8009e70:	1e10      	subs	r0, r2, #0
 8009e72:	bf18      	it	ne
 8009e74:	2001      	movne	r0, #1
 8009e76:	b002      	add	sp, #8
 8009e78:	4770      	bx	lr
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	e7fb      	b.n	8009e76 <__ascii_mbtowc+0x16>
 8009e7e:	f06f 0001 	mvn.w	r0, #1
 8009e82:	e7f8      	b.n	8009e76 <__ascii_mbtowc+0x16>

08009e84 <_realloc_r>:
 8009e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e88:	4680      	mov	r8, r0
 8009e8a:	4615      	mov	r5, r2
 8009e8c:	460c      	mov	r4, r1
 8009e8e:	b921      	cbnz	r1, 8009e9a <_realloc_r+0x16>
 8009e90:	4611      	mov	r1, r2
 8009e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e96:	f7ff b96d 	b.w	8009174 <_malloc_r>
 8009e9a:	b92a      	cbnz	r2, 8009ea8 <_realloc_r+0x24>
 8009e9c:	f7ff f8f8 	bl	8009090 <_free_r>
 8009ea0:	2400      	movs	r4, #0
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ea8:	f000 f841 	bl	8009f2e <_malloc_usable_size_r>
 8009eac:	4285      	cmp	r5, r0
 8009eae:	4606      	mov	r6, r0
 8009eb0:	d802      	bhi.n	8009eb8 <_realloc_r+0x34>
 8009eb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009eb6:	d8f4      	bhi.n	8009ea2 <_realloc_r+0x1e>
 8009eb8:	4629      	mov	r1, r5
 8009eba:	4640      	mov	r0, r8
 8009ebc:	f7ff f95a 	bl	8009174 <_malloc_r>
 8009ec0:	4607      	mov	r7, r0
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	d0ec      	beq.n	8009ea0 <_realloc_r+0x1c>
 8009ec6:	42b5      	cmp	r5, r6
 8009ec8:	462a      	mov	r2, r5
 8009eca:	4621      	mov	r1, r4
 8009ecc:	bf28      	it	cs
 8009ece:	4632      	movcs	r2, r6
 8009ed0:	f7ff ff86 	bl	8009de0 <memcpy>
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	f7ff f8da 	bl	8009090 <_free_r>
 8009edc:	463c      	mov	r4, r7
 8009ede:	e7e0      	b.n	8009ea2 <_realloc_r+0x1e>

08009ee0 <__ascii_wctomb>:
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	4608      	mov	r0, r1
 8009ee4:	b141      	cbz	r1, 8009ef8 <__ascii_wctomb+0x18>
 8009ee6:	2aff      	cmp	r2, #255	@ 0xff
 8009ee8:	d904      	bls.n	8009ef4 <__ascii_wctomb+0x14>
 8009eea:	228a      	movs	r2, #138	@ 0x8a
 8009eec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef0:	601a      	str	r2, [r3, #0]
 8009ef2:	4770      	bx	lr
 8009ef4:	2001      	movs	r0, #1
 8009ef6:	700a      	strb	r2, [r1, #0]
 8009ef8:	4770      	bx	lr
	...

08009efc <fiprintf>:
 8009efc:	b40e      	push	{r1, r2, r3}
 8009efe:	b503      	push	{r0, r1, lr}
 8009f00:	4601      	mov	r1, r0
 8009f02:	ab03      	add	r3, sp, #12
 8009f04:	4805      	ldr	r0, [pc, #20]	@ (8009f1c <fiprintf+0x20>)
 8009f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f0a:	6800      	ldr	r0, [r0, #0]
 8009f0c:	9301      	str	r3, [sp, #4]
 8009f0e:	f000 f83d 	bl	8009f8c <_vfiprintf_r>
 8009f12:	b002      	add	sp, #8
 8009f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f18:	b003      	add	sp, #12
 8009f1a:	4770      	bx	lr
 8009f1c:	20000080 	.word	0x20000080

08009f20 <abort>:
 8009f20:	2006      	movs	r0, #6
 8009f22:	b508      	push	{r3, lr}
 8009f24:	f000 fa06 	bl	800a334 <raise>
 8009f28:	2001      	movs	r0, #1
 8009f2a:	f7f9 fedc 	bl	8003ce6 <_exit>

08009f2e <_malloc_usable_size_r>:
 8009f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f32:	1f18      	subs	r0, r3, #4
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	bfbc      	itt	lt
 8009f38:	580b      	ldrlt	r3, [r1, r0]
 8009f3a:	18c0      	addlt	r0, r0, r3
 8009f3c:	4770      	bx	lr

08009f3e <__sfputc_r>:
 8009f3e:	6893      	ldr	r3, [r2, #8]
 8009f40:	b410      	push	{r4}
 8009f42:	3b01      	subs	r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	6093      	str	r3, [r2, #8]
 8009f48:	da07      	bge.n	8009f5a <__sfputc_r+0x1c>
 8009f4a:	6994      	ldr	r4, [r2, #24]
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	db01      	blt.n	8009f54 <__sfputc_r+0x16>
 8009f50:	290a      	cmp	r1, #10
 8009f52:	d102      	bne.n	8009f5a <__sfputc_r+0x1c>
 8009f54:	bc10      	pop	{r4}
 8009f56:	f000 b931 	b.w	800a1bc <__swbuf_r>
 8009f5a:	6813      	ldr	r3, [r2, #0]
 8009f5c:	1c58      	adds	r0, r3, #1
 8009f5e:	6010      	str	r0, [r2, #0]
 8009f60:	7019      	strb	r1, [r3, #0]
 8009f62:	4608      	mov	r0, r1
 8009f64:	bc10      	pop	{r4}
 8009f66:	4770      	bx	lr

08009f68 <__sfputs_r>:
 8009f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6a:	4606      	mov	r6, r0
 8009f6c:	460f      	mov	r7, r1
 8009f6e:	4614      	mov	r4, r2
 8009f70:	18d5      	adds	r5, r2, r3
 8009f72:	42ac      	cmp	r4, r5
 8009f74:	d101      	bne.n	8009f7a <__sfputs_r+0x12>
 8009f76:	2000      	movs	r0, #0
 8009f78:	e007      	b.n	8009f8a <__sfputs_r+0x22>
 8009f7a:	463a      	mov	r2, r7
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f82:	f7ff ffdc 	bl	8009f3e <__sfputc_r>
 8009f86:	1c43      	adds	r3, r0, #1
 8009f88:	d1f3      	bne.n	8009f72 <__sfputs_r+0xa>
 8009f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f8c <_vfiprintf_r>:
 8009f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f90:	460d      	mov	r5, r1
 8009f92:	4614      	mov	r4, r2
 8009f94:	4698      	mov	r8, r3
 8009f96:	4606      	mov	r6, r0
 8009f98:	b09d      	sub	sp, #116	@ 0x74
 8009f9a:	b118      	cbz	r0, 8009fa4 <_vfiprintf_r+0x18>
 8009f9c:	6a03      	ldr	r3, [r0, #32]
 8009f9e:	b90b      	cbnz	r3, 8009fa4 <_vfiprintf_r+0x18>
 8009fa0:	f7fe f8fc 	bl	800819c <__sinit>
 8009fa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fa6:	07d9      	lsls	r1, r3, #31
 8009fa8:	d405      	bmi.n	8009fb6 <_vfiprintf_r+0x2a>
 8009faa:	89ab      	ldrh	r3, [r5, #12]
 8009fac:	059a      	lsls	r2, r3, #22
 8009fae:	d402      	bmi.n	8009fb6 <_vfiprintf_r+0x2a>
 8009fb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fb2:	f7fe fa0a 	bl	80083ca <__retarget_lock_acquire_recursive>
 8009fb6:	89ab      	ldrh	r3, [r5, #12]
 8009fb8:	071b      	lsls	r3, r3, #28
 8009fba:	d501      	bpl.n	8009fc0 <_vfiprintf_r+0x34>
 8009fbc:	692b      	ldr	r3, [r5, #16]
 8009fbe:	b99b      	cbnz	r3, 8009fe8 <_vfiprintf_r+0x5c>
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f000 f938 	bl	800a238 <__swsetup_r>
 8009fc8:	b170      	cbz	r0, 8009fe8 <_vfiprintf_r+0x5c>
 8009fca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fcc:	07dc      	lsls	r4, r3, #31
 8009fce:	d504      	bpl.n	8009fda <_vfiprintf_r+0x4e>
 8009fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd4:	b01d      	add	sp, #116	@ 0x74
 8009fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fda:	89ab      	ldrh	r3, [r5, #12]
 8009fdc:	0598      	lsls	r0, r3, #22
 8009fde:	d4f7      	bmi.n	8009fd0 <_vfiprintf_r+0x44>
 8009fe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fe2:	f7fe f9f3 	bl	80083cc <__retarget_lock_release_recursive>
 8009fe6:	e7f3      	b.n	8009fd0 <_vfiprintf_r+0x44>
 8009fe8:	2300      	movs	r3, #0
 8009fea:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fec:	2320      	movs	r3, #32
 8009fee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ff2:	2330      	movs	r3, #48	@ 0x30
 8009ff4:	f04f 0901 	mov.w	r9, #1
 8009ff8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ffc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a1a8 <_vfiprintf_r+0x21c>
 800a000:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a004:	4623      	mov	r3, r4
 800a006:	469a      	mov	sl, r3
 800a008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a00c:	b10a      	cbz	r2, 800a012 <_vfiprintf_r+0x86>
 800a00e:	2a25      	cmp	r2, #37	@ 0x25
 800a010:	d1f9      	bne.n	800a006 <_vfiprintf_r+0x7a>
 800a012:	ebba 0b04 	subs.w	fp, sl, r4
 800a016:	d00b      	beq.n	800a030 <_vfiprintf_r+0xa4>
 800a018:	465b      	mov	r3, fp
 800a01a:	4622      	mov	r2, r4
 800a01c:	4629      	mov	r1, r5
 800a01e:	4630      	mov	r0, r6
 800a020:	f7ff ffa2 	bl	8009f68 <__sfputs_r>
 800a024:	3001      	adds	r0, #1
 800a026:	f000 80a7 	beq.w	800a178 <_vfiprintf_r+0x1ec>
 800a02a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a02c:	445a      	add	r2, fp
 800a02e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a030:	f89a 3000 	ldrb.w	r3, [sl]
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 809f 	beq.w	800a178 <_vfiprintf_r+0x1ec>
 800a03a:	2300      	movs	r3, #0
 800a03c:	f04f 32ff 	mov.w	r2, #4294967295
 800a040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a044:	f10a 0a01 	add.w	sl, sl, #1
 800a048:	9304      	str	r3, [sp, #16]
 800a04a:	9307      	str	r3, [sp, #28]
 800a04c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a050:	931a      	str	r3, [sp, #104]	@ 0x68
 800a052:	4654      	mov	r4, sl
 800a054:	2205      	movs	r2, #5
 800a056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a05a:	4853      	ldr	r0, [pc, #332]	@ (800a1a8 <_vfiprintf_r+0x21c>)
 800a05c:	f7fe f9b7 	bl	80083ce <memchr>
 800a060:	9a04      	ldr	r2, [sp, #16]
 800a062:	b9d8      	cbnz	r0, 800a09c <_vfiprintf_r+0x110>
 800a064:	06d1      	lsls	r1, r2, #27
 800a066:	bf44      	itt	mi
 800a068:	2320      	movmi	r3, #32
 800a06a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a06e:	0713      	lsls	r3, r2, #28
 800a070:	bf44      	itt	mi
 800a072:	232b      	movmi	r3, #43	@ 0x2b
 800a074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a078:	f89a 3000 	ldrb.w	r3, [sl]
 800a07c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a07e:	d015      	beq.n	800a0ac <_vfiprintf_r+0x120>
 800a080:	4654      	mov	r4, sl
 800a082:	2000      	movs	r0, #0
 800a084:	f04f 0c0a 	mov.w	ip, #10
 800a088:	9a07      	ldr	r2, [sp, #28]
 800a08a:	4621      	mov	r1, r4
 800a08c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a090:	3b30      	subs	r3, #48	@ 0x30
 800a092:	2b09      	cmp	r3, #9
 800a094:	d94b      	bls.n	800a12e <_vfiprintf_r+0x1a2>
 800a096:	b1b0      	cbz	r0, 800a0c6 <_vfiprintf_r+0x13a>
 800a098:	9207      	str	r2, [sp, #28]
 800a09a:	e014      	b.n	800a0c6 <_vfiprintf_r+0x13a>
 800a09c:	eba0 0308 	sub.w	r3, r0, r8
 800a0a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	46a2      	mov	sl, r4
 800a0a8:	9304      	str	r3, [sp, #16]
 800a0aa:	e7d2      	b.n	800a052 <_vfiprintf_r+0xc6>
 800a0ac:	9b03      	ldr	r3, [sp, #12]
 800a0ae:	1d19      	adds	r1, r3, #4
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	9103      	str	r1, [sp, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	bfbb      	ittet	lt
 800a0b8:	425b      	neglt	r3, r3
 800a0ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a0be:	9307      	strge	r3, [sp, #28]
 800a0c0:	9307      	strlt	r3, [sp, #28]
 800a0c2:	bfb8      	it	lt
 800a0c4:	9204      	strlt	r2, [sp, #16]
 800a0c6:	7823      	ldrb	r3, [r4, #0]
 800a0c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0ca:	d10a      	bne.n	800a0e2 <_vfiprintf_r+0x156>
 800a0cc:	7863      	ldrb	r3, [r4, #1]
 800a0ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0d0:	d132      	bne.n	800a138 <_vfiprintf_r+0x1ac>
 800a0d2:	9b03      	ldr	r3, [sp, #12]
 800a0d4:	3402      	adds	r4, #2
 800a0d6:	1d1a      	adds	r2, r3, #4
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	9203      	str	r2, [sp, #12]
 800a0dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0e0:	9305      	str	r3, [sp, #20]
 800a0e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a1ac <_vfiprintf_r+0x220>
 800a0e6:	2203      	movs	r2, #3
 800a0e8:	4650      	mov	r0, sl
 800a0ea:	7821      	ldrb	r1, [r4, #0]
 800a0ec:	f7fe f96f 	bl	80083ce <memchr>
 800a0f0:	b138      	cbz	r0, 800a102 <_vfiprintf_r+0x176>
 800a0f2:	2240      	movs	r2, #64	@ 0x40
 800a0f4:	9b04      	ldr	r3, [sp, #16]
 800a0f6:	eba0 000a 	sub.w	r0, r0, sl
 800a0fa:	4082      	lsls	r2, r0
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	3401      	adds	r4, #1
 800a100:	9304      	str	r3, [sp, #16]
 800a102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a106:	2206      	movs	r2, #6
 800a108:	4829      	ldr	r0, [pc, #164]	@ (800a1b0 <_vfiprintf_r+0x224>)
 800a10a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a10e:	f7fe f95e 	bl	80083ce <memchr>
 800a112:	2800      	cmp	r0, #0
 800a114:	d03f      	beq.n	800a196 <_vfiprintf_r+0x20a>
 800a116:	4b27      	ldr	r3, [pc, #156]	@ (800a1b4 <_vfiprintf_r+0x228>)
 800a118:	bb1b      	cbnz	r3, 800a162 <_vfiprintf_r+0x1d6>
 800a11a:	9b03      	ldr	r3, [sp, #12]
 800a11c:	3307      	adds	r3, #7
 800a11e:	f023 0307 	bic.w	r3, r3, #7
 800a122:	3308      	adds	r3, #8
 800a124:	9303      	str	r3, [sp, #12]
 800a126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a128:	443b      	add	r3, r7
 800a12a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a12c:	e76a      	b.n	800a004 <_vfiprintf_r+0x78>
 800a12e:	460c      	mov	r4, r1
 800a130:	2001      	movs	r0, #1
 800a132:	fb0c 3202 	mla	r2, ip, r2, r3
 800a136:	e7a8      	b.n	800a08a <_vfiprintf_r+0xfe>
 800a138:	2300      	movs	r3, #0
 800a13a:	f04f 0c0a 	mov.w	ip, #10
 800a13e:	4619      	mov	r1, r3
 800a140:	3401      	adds	r4, #1
 800a142:	9305      	str	r3, [sp, #20]
 800a144:	4620      	mov	r0, r4
 800a146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a14a:	3a30      	subs	r2, #48	@ 0x30
 800a14c:	2a09      	cmp	r2, #9
 800a14e:	d903      	bls.n	800a158 <_vfiprintf_r+0x1cc>
 800a150:	2b00      	cmp	r3, #0
 800a152:	d0c6      	beq.n	800a0e2 <_vfiprintf_r+0x156>
 800a154:	9105      	str	r1, [sp, #20]
 800a156:	e7c4      	b.n	800a0e2 <_vfiprintf_r+0x156>
 800a158:	4604      	mov	r4, r0
 800a15a:	2301      	movs	r3, #1
 800a15c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a160:	e7f0      	b.n	800a144 <_vfiprintf_r+0x1b8>
 800a162:	ab03      	add	r3, sp, #12
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	462a      	mov	r2, r5
 800a168:	4630      	mov	r0, r6
 800a16a:	4b13      	ldr	r3, [pc, #76]	@ (800a1b8 <_vfiprintf_r+0x22c>)
 800a16c:	a904      	add	r1, sp, #16
 800a16e:	f7fd fbcb 	bl	8007908 <_printf_float>
 800a172:	4607      	mov	r7, r0
 800a174:	1c78      	adds	r0, r7, #1
 800a176:	d1d6      	bne.n	800a126 <_vfiprintf_r+0x19a>
 800a178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a17a:	07d9      	lsls	r1, r3, #31
 800a17c:	d405      	bmi.n	800a18a <_vfiprintf_r+0x1fe>
 800a17e:	89ab      	ldrh	r3, [r5, #12]
 800a180:	059a      	lsls	r2, r3, #22
 800a182:	d402      	bmi.n	800a18a <_vfiprintf_r+0x1fe>
 800a184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a186:	f7fe f921 	bl	80083cc <__retarget_lock_release_recursive>
 800a18a:	89ab      	ldrh	r3, [r5, #12]
 800a18c:	065b      	lsls	r3, r3, #25
 800a18e:	f53f af1f 	bmi.w	8009fd0 <_vfiprintf_r+0x44>
 800a192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a194:	e71e      	b.n	8009fd4 <_vfiprintf_r+0x48>
 800a196:	ab03      	add	r3, sp, #12
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	462a      	mov	r2, r5
 800a19c:	4630      	mov	r0, r6
 800a19e:	4b06      	ldr	r3, [pc, #24]	@ (800a1b8 <_vfiprintf_r+0x22c>)
 800a1a0:	a904      	add	r1, sp, #16
 800a1a2:	f7fd fe4f 	bl	8007e44 <_printf_i>
 800a1a6:	e7e4      	b.n	800a172 <_vfiprintf_r+0x1e6>
 800a1a8:	0800fa80 	.word	0x0800fa80
 800a1ac:	0800fa86 	.word	0x0800fa86
 800a1b0:	0800fa8a 	.word	0x0800fa8a
 800a1b4:	08007909 	.word	0x08007909
 800a1b8:	08009f69 	.word	0x08009f69

0800a1bc <__swbuf_r>:
 800a1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1be:	460e      	mov	r6, r1
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	b118      	cbz	r0, 800a1ce <__swbuf_r+0x12>
 800a1c6:	6a03      	ldr	r3, [r0, #32]
 800a1c8:	b90b      	cbnz	r3, 800a1ce <__swbuf_r+0x12>
 800a1ca:	f7fd ffe7 	bl	800819c <__sinit>
 800a1ce:	69a3      	ldr	r3, [r4, #24]
 800a1d0:	60a3      	str	r3, [r4, #8]
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	071a      	lsls	r2, r3, #28
 800a1d6:	d501      	bpl.n	800a1dc <__swbuf_r+0x20>
 800a1d8:	6923      	ldr	r3, [r4, #16]
 800a1da:	b943      	cbnz	r3, 800a1ee <__swbuf_r+0x32>
 800a1dc:	4621      	mov	r1, r4
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f000 f82a 	bl	800a238 <__swsetup_r>
 800a1e4:	b118      	cbz	r0, 800a1ee <__swbuf_r+0x32>
 800a1e6:	f04f 37ff 	mov.w	r7, #4294967295
 800a1ea:	4638      	mov	r0, r7
 800a1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	6922      	ldr	r2, [r4, #16]
 800a1f2:	b2f6      	uxtb	r6, r6
 800a1f4:	1a98      	subs	r0, r3, r2
 800a1f6:	6963      	ldr	r3, [r4, #20]
 800a1f8:	4637      	mov	r7, r6
 800a1fa:	4283      	cmp	r3, r0
 800a1fc:	dc05      	bgt.n	800a20a <__swbuf_r+0x4e>
 800a1fe:	4621      	mov	r1, r4
 800a200:	4628      	mov	r0, r5
 800a202:	f7ff fd9b 	bl	8009d3c <_fflush_r>
 800a206:	2800      	cmp	r0, #0
 800a208:	d1ed      	bne.n	800a1e6 <__swbuf_r+0x2a>
 800a20a:	68a3      	ldr	r3, [r4, #8]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	60a3      	str	r3, [r4, #8]
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	1c5a      	adds	r2, r3, #1
 800a214:	6022      	str	r2, [r4, #0]
 800a216:	701e      	strb	r6, [r3, #0]
 800a218:	6962      	ldr	r2, [r4, #20]
 800a21a:	1c43      	adds	r3, r0, #1
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d004      	beq.n	800a22a <__swbuf_r+0x6e>
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	07db      	lsls	r3, r3, #31
 800a224:	d5e1      	bpl.n	800a1ea <__swbuf_r+0x2e>
 800a226:	2e0a      	cmp	r6, #10
 800a228:	d1df      	bne.n	800a1ea <__swbuf_r+0x2e>
 800a22a:	4621      	mov	r1, r4
 800a22c:	4628      	mov	r0, r5
 800a22e:	f7ff fd85 	bl	8009d3c <_fflush_r>
 800a232:	2800      	cmp	r0, #0
 800a234:	d0d9      	beq.n	800a1ea <__swbuf_r+0x2e>
 800a236:	e7d6      	b.n	800a1e6 <__swbuf_r+0x2a>

0800a238 <__swsetup_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4b29      	ldr	r3, [pc, #164]	@ (800a2e0 <__swsetup_r+0xa8>)
 800a23c:	4605      	mov	r5, r0
 800a23e:	6818      	ldr	r0, [r3, #0]
 800a240:	460c      	mov	r4, r1
 800a242:	b118      	cbz	r0, 800a24c <__swsetup_r+0x14>
 800a244:	6a03      	ldr	r3, [r0, #32]
 800a246:	b90b      	cbnz	r3, 800a24c <__swsetup_r+0x14>
 800a248:	f7fd ffa8 	bl	800819c <__sinit>
 800a24c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a250:	0719      	lsls	r1, r3, #28
 800a252:	d422      	bmi.n	800a29a <__swsetup_r+0x62>
 800a254:	06da      	lsls	r2, r3, #27
 800a256:	d407      	bmi.n	800a268 <__swsetup_r+0x30>
 800a258:	2209      	movs	r2, #9
 800a25a:	602a      	str	r2, [r5, #0]
 800a25c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a260:	f04f 30ff 	mov.w	r0, #4294967295
 800a264:	81a3      	strh	r3, [r4, #12]
 800a266:	e033      	b.n	800a2d0 <__swsetup_r+0x98>
 800a268:	0758      	lsls	r0, r3, #29
 800a26a:	d512      	bpl.n	800a292 <__swsetup_r+0x5a>
 800a26c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a26e:	b141      	cbz	r1, 800a282 <__swsetup_r+0x4a>
 800a270:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a274:	4299      	cmp	r1, r3
 800a276:	d002      	beq.n	800a27e <__swsetup_r+0x46>
 800a278:	4628      	mov	r0, r5
 800a27a:	f7fe ff09 	bl	8009090 <_free_r>
 800a27e:	2300      	movs	r3, #0
 800a280:	6363      	str	r3, [r4, #52]	@ 0x34
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a288:	81a3      	strh	r3, [r4, #12]
 800a28a:	2300      	movs	r3, #0
 800a28c:	6063      	str	r3, [r4, #4]
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	89a3      	ldrh	r3, [r4, #12]
 800a294:	f043 0308 	orr.w	r3, r3, #8
 800a298:	81a3      	strh	r3, [r4, #12]
 800a29a:	6923      	ldr	r3, [r4, #16]
 800a29c:	b94b      	cbnz	r3, 800a2b2 <__swsetup_r+0x7a>
 800a29e:	89a3      	ldrh	r3, [r4, #12]
 800a2a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a2a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2a8:	d003      	beq.n	800a2b2 <__swsetup_r+0x7a>
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	f000 f882 	bl	800a3b6 <__smakebuf_r>
 800a2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2b6:	f013 0201 	ands.w	r2, r3, #1
 800a2ba:	d00a      	beq.n	800a2d2 <__swsetup_r+0x9a>
 800a2bc:	2200      	movs	r2, #0
 800a2be:	60a2      	str	r2, [r4, #8]
 800a2c0:	6962      	ldr	r2, [r4, #20]
 800a2c2:	4252      	negs	r2, r2
 800a2c4:	61a2      	str	r2, [r4, #24]
 800a2c6:	6922      	ldr	r2, [r4, #16]
 800a2c8:	b942      	cbnz	r2, 800a2dc <__swsetup_r+0xa4>
 800a2ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a2ce:	d1c5      	bne.n	800a25c <__swsetup_r+0x24>
 800a2d0:	bd38      	pop	{r3, r4, r5, pc}
 800a2d2:	0799      	lsls	r1, r3, #30
 800a2d4:	bf58      	it	pl
 800a2d6:	6962      	ldrpl	r2, [r4, #20]
 800a2d8:	60a2      	str	r2, [r4, #8]
 800a2da:	e7f4      	b.n	800a2c6 <__swsetup_r+0x8e>
 800a2dc:	2000      	movs	r0, #0
 800a2de:	e7f7      	b.n	800a2d0 <__swsetup_r+0x98>
 800a2e0:	20000080 	.word	0x20000080

0800a2e4 <_raise_r>:
 800a2e4:	291f      	cmp	r1, #31
 800a2e6:	b538      	push	{r3, r4, r5, lr}
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	d904      	bls.n	800a2f8 <_raise_r+0x14>
 800a2ee:	2316      	movs	r3, #22
 800a2f0:	6003      	str	r3, [r0, #0]
 800a2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f6:	bd38      	pop	{r3, r4, r5, pc}
 800a2f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a2fa:	b112      	cbz	r2, 800a302 <_raise_r+0x1e>
 800a2fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a300:	b94b      	cbnz	r3, 800a316 <_raise_r+0x32>
 800a302:	4628      	mov	r0, r5
 800a304:	f000 f830 	bl	800a368 <_getpid_r>
 800a308:	4622      	mov	r2, r4
 800a30a:	4601      	mov	r1, r0
 800a30c:	4628      	mov	r0, r5
 800a30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a312:	f000 b817 	b.w	800a344 <_kill_r>
 800a316:	2b01      	cmp	r3, #1
 800a318:	d00a      	beq.n	800a330 <_raise_r+0x4c>
 800a31a:	1c59      	adds	r1, r3, #1
 800a31c:	d103      	bne.n	800a326 <_raise_r+0x42>
 800a31e:	2316      	movs	r3, #22
 800a320:	6003      	str	r3, [r0, #0]
 800a322:	2001      	movs	r0, #1
 800a324:	e7e7      	b.n	800a2f6 <_raise_r+0x12>
 800a326:	2100      	movs	r1, #0
 800a328:	4620      	mov	r0, r4
 800a32a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a32e:	4798      	blx	r3
 800a330:	2000      	movs	r0, #0
 800a332:	e7e0      	b.n	800a2f6 <_raise_r+0x12>

0800a334 <raise>:
 800a334:	4b02      	ldr	r3, [pc, #8]	@ (800a340 <raise+0xc>)
 800a336:	4601      	mov	r1, r0
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	f7ff bfd3 	b.w	800a2e4 <_raise_r>
 800a33e:	bf00      	nop
 800a340:	20000080 	.word	0x20000080

0800a344 <_kill_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	2300      	movs	r3, #0
 800a348:	4d06      	ldr	r5, [pc, #24]	@ (800a364 <_kill_r+0x20>)
 800a34a:	4604      	mov	r4, r0
 800a34c:	4608      	mov	r0, r1
 800a34e:	4611      	mov	r1, r2
 800a350:	602b      	str	r3, [r5, #0]
 800a352:	f7f9 fcb8 	bl	8003cc6 <_kill>
 800a356:	1c43      	adds	r3, r0, #1
 800a358:	d102      	bne.n	800a360 <_kill_r+0x1c>
 800a35a:	682b      	ldr	r3, [r5, #0]
 800a35c:	b103      	cbz	r3, 800a360 <_kill_r+0x1c>
 800a35e:	6023      	str	r3, [r4, #0]
 800a360:	bd38      	pop	{r3, r4, r5, pc}
 800a362:	bf00      	nop
 800a364:	20001c70 	.word	0x20001c70

0800a368 <_getpid_r>:
 800a368:	f7f9 bca6 	b.w	8003cb8 <_getpid>

0800a36c <__swhatbuf_r>:
 800a36c:	b570      	push	{r4, r5, r6, lr}
 800a36e:	460c      	mov	r4, r1
 800a370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a374:	4615      	mov	r5, r2
 800a376:	2900      	cmp	r1, #0
 800a378:	461e      	mov	r6, r3
 800a37a:	b096      	sub	sp, #88	@ 0x58
 800a37c:	da0c      	bge.n	800a398 <__swhatbuf_r+0x2c>
 800a37e:	89a3      	ldrh	r3, [r4, #12]
 800a380:	2100      	movs	r1, #0
 800a382:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a386:	bf14      	ite	ne
 800a388:	2340      	movne	r3, #64	@ 0x40
 800a38a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a38e:	2000      	movs	r0, #0
 800a390:	6031      	str	r1, [r6, #0]
 800a392:	602b      	str	r3, [r5, #0]
 800a394:	b016      	add	sp, #88	@ 0x58
 800a396:	bd70      	pop	{r4, r5, r6, pc}
 800a398:	466a      	mov	r2, sp
 800a39a:	f000 f849 	bl	800a430 <_fstat_r>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	dbed      	blt.n	800a37e <__swhatbuf_r+0x12>
 800a3a2:	9901      	ldr	r1, [sp, #4]
 800a3a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a3a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a3ac:	4259      	negs	r1, r3
 800a3ae:	4159      	adcs	r1, r3
 800a3b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3b4:	e7eb      	b.n	800a38e <__swhatbuf_r+0x22>

0800a3b6 <__smakebuf_r>:
 800a3b6:	898b      	ldrh	r3, [r1, #12]
 800a3b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3ba:	079d      	lsls	r5, r3, #30
 800a3bc:	4606      	mov	r6, r0
 800a3be:	460c      	mov	r4, r1
 800a3c0:	d507      	bpl.n	800a3d2 <__smakebuf_r+0x1c>
 800a3c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a3c6:	6023      	str	r3, [r4, #0]
 800a3c8:	6123      	str	r3, [r4, #16]
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	6163      	str	r3, [r4, #20]
 800a3ce:	b003      	add	sp, #12
 800a3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3d2:	466a      	mov	r2, sp
 800a3d4:	ab01      	add	r3, sp, #4
 800a3d6:	f7ff ffc9 	bl	800a36c <__swhatbuf_r>
 800a3da:	9f00      	ldr	r7, [sp, #0]
 800a3dc:	4605      	mov	r5, r0
 800a3de:	4639      	mov	r1, r7
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f7fe fec7 	bl	8009174 <_malloc_r>
 800a3e6:	b948      	cbnz	r0, 800a3fc <__smakebuf_r+0x46>
 800a3e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ec:	059a      	lsls	r2, r3, #22
 800a3ee:	d4ee      	bmi.n	800a3ce <__smakebuf_r+0x18>
 800a3f0:	f023 0303 	bic.w	r3, r3, #3
 800a3f4:	f043 0302 	orr.w	r3, r3, #2
 800a3f8:	81a3      	strh	r3, [r4, #12]
 800a3fa:	e7e2      	b.n	800a3c2 <__smakebuf_r+0xc>
 800a3fc:	89a3      	ldrh	r3, [r4, #12]
 800a3fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a406:	81a3      	strh	r3, [r4, #12]
 800a408:	9b01      	ldr	r3, [sp, #4]
 800a40a:	6020      	str	r0, [r4, #0]
 800a40c:	b15b      	cbz	r3, 800a426 <__smakebuf_r+0x70>
 800a40e:	4630      	mov	r0, r6
 800a410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a414:	f000 f81e 	bl	800a454 <_isatty_r>
 800a418:	b128      	cbz	r0, 800a426 <__smakebuf_r+0x70>
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	f023 0303 	bic.w	r3, r3, #3
 800a420:	f043 0301 	orr.w	r3, r3, #1
 800a424:	81a3      	strh	r3, [r4, #12]
 800a426:	89a3      	ldrh	r3, [r4, #12]
 800a428:	431d      	orrs	r5, r3
 800a42a:	81a5      	strh	r5, [r4, #12]
 800a42c:	e7cf      	b.n	800a3ce <__smakebuf_r+0x18>
	...

0800a430 <_fstat_r>:
 800a430:	b538      	push	{r3, r4, r5, lr}
 800a432:	2300      	movs	r3, #0
 800a434:	4d06      	ldr	r5, [pc, #24]	@ (800a450 <_fstat_r+0x20>)
 800a436:	4604      	mov	r4, r0
 800a438:	4608      	mov	r0, r1
 800a43a:	4611      	mov	r1, r2
 800a43c:	602b      	str	r3, [r5, #0]
 800a43e:	f7f9 fca1 	bl	8003d84 <_fstat>
 800a442:	1c43      	adds	r3, r0, #1
 800a444:	d102      	bne.n	800a44c <_fstat_r+0x1c>
 800a446:	682b      	ldr	r3, [r5, #0]
 800a448:	b103      	cbz	r3, 800a44c <_fstat_r+0x1c>
 800a44a:	6023      	str	r3, [r4, #0]
 800a44c:	bd38      	pop	{r3, r4, r5, pc}
 800a44e:	bf00      	nop
 800a450:	20001c70 	.word	0x20001c70

0800a454 <_isatty_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	2300      	movs	r3, #0
 800a458:	4d05      	ldr	r5, [pc, #20]	@ (800a470 <_isatty_r+0x1c>)
 800a45a:	4604      	mov	r4, r0
 800a45c:	4608      	mov	r0, r1
 800a45e:	602b      	str	r3, [r5, #0]
 800a460:	f7f9 fc9f 	bl	8003da2 <_isatty>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	d102      	bne.n	800a46e <_isatty_r+0x1a>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	b103      	cbz	r3, 800a46e <_isatty_r+0x1a>
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	20001c70 	.word	0x20001c70

0800a474 <_init>:
 800a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a476:	bf00      	nop
 800a478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47a:	bc08      	pop	{r3}
 800a47c:	469e      	mov	lr, r3
 800a47e:	4770      	bx	lr

0800a480 <_fini>:
 800a480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a482:	bf00      	nop
 800a484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a486:	bc08      	pop	{r3}
 800a488:	469e      	mov	lr, r3
 800a48a:	4770      	bx	lr
